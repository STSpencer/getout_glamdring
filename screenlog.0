[1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m sor[K[Kource ../launchpad/venv/bin/activate
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m emacs hypertrain.py 
[?1049h[22;0;0t[?12;25h[?1h=[H[2J[60d[K[?1l>[?12l[?25h[?1049l[23;0;0t[39;49m[?1049h[22;0;0t[?12;25h[?1h=[H[2J[59d[?25l[30m[47m-UUU:----F1  [39;49m[1m[30m[47m*scratch*   [0m[39;49m[30m[47m   All L1     (Fundamental) -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------[39;49m
[A[2d[?12l[?25h[?12;25h[60d[?25lLoading 00debian-vars...done[K[H
[?12l[?25h[?12;25h[60;9H[?25l/etc/emacs/site-start.d/50a2ps.el (source)...[H
[?12l[?25h[?12;25h[60;54H[?25ldone[H
[?12l[?25h[?12;25h[60;36H[?25lsymptote.el (source)...[H
[?12l[?25h[?12;25h[60;59H[?25ldone[H
[?12l[?25h[?12;25h[60;36H[?25lutoconf.el (source)...[K[H
[?12l[?25h[?12;25h[60;58H[?25ldone[H
[?12l[?25h[?12;25h[60;35H[?25lcmake-data.el (source)...[K[H
[?12l[?25h[?12;25h[60;60H[?25ldone[H
[?12l[?25h[?12;25h[60;35H[?25ldictionaries-common.el (source)...[H
[?12l[?25h[?12;25h[60;9H[?25ldebian-ispell...[K[H
[?12l[?25h[?12;25h[60;9H[?25l/var/cache/dictionaries-common/emacsen-ispell-default.el (source)...[H
[?12l[?25h[?12;25h[60;77H[?25ldone[H
[?12l[?25h[?12;25h[60;9H[?25ldebian-ispell...done[K[H
[?12l[?25h[?12;25h[60;9H[?25l/var/cache/dictionaries-common/emacsen-ispell-dicts.el (source)...[H
[?12l[?25h[?12;25h[60;75H[?25ldone[H
[?12l[?25h[?12;25h[60;10H[?25letc/emacs/site-start.d/50dictionaries-common[6P[H
[?12l[?25h[?12;25h[60;35H[?25llatex-cjk-common.el (source)...[K[H
[?12l[?25h[?12;25h[60;9H[?25lcjk-enc...[K[H
[?12l[?25h[?12;25h[60;19H[?25ldone[H
[?12l[?25h[?12;25h[60;9H[?25l/etc/emacs/site-start.d/50latex-cjk-common.el (source)...done[H
[?12l[?25h[?12;25h[60;45H[?25lthai.el (source)...[K[H
[?12l[?25h[?12;25h[60;64H[?25ldone[H
[?12l[?25h[?12;25h[60;35H[?25ltcsh.el (source)...[K[H
[?12l[?25h[?12;25h[60;54H[?25ldone[H
[?12l[?25h[?12;25h[60;36H[?25lexlive-lang-english.el (source)...[H
[?12l[?25h[?12;25h[60;70H[?25ldone[H
[?12l[?25h[?12;25h[60;35H[?25lyorick-auto.el (source)...[K[H
[?12l[?25h[?12;25h[60;61H[?25ldone[H
[?12l[?25h[?12;25h[60d[?25lFor information about GNU Emacs and the GNU system, type C-h C-a.[H
[?12l[?25h[?12;25h[60d[?25lFor information about GNU Emacs and the GNU system, type C-h C-a.[K[H[7mFile Edit Options Buffers Tools Python Help                                                                                                                                                                                                                                                                                                                                 [0m[39;49m[27m
[A
[33m'''Uses Keras to train and test a 2dconvlstm on parameterized VERITAS data.                                                                                                                                                                                                                                                                                                 [39;49m
[A
[33mWritten by S.T. Spencer 27/6/2019'''[39;49m[K
[36mimport[39;49m os[K
[36mimport[39;49m matplotlib [36mas[39;49m mpl[K
mpl.use([33m'Agg'[39;49m)[K
[36mimport[39;49m numpy [36mas[39;49m np[K
[36mimport[39;49m h5py[K
[36mimport[39;49m keras[K
[36mimport[39;49m tempfile[K
[36mimport[39;49m sys[K
[36mimport[39;49m tensorflow [36mas[39;49m tf[K
tf.compat.v1.disable_eager_execution()[K
[36mfrom[39;49m tensorflow.compat.v1 [36mimport[39;49m ConfigProto[K
[36mfrom[39;49m tensorflow.compat.v1 [36mimport[39;49m Session[K
[K
[36mfrom[39;49m keras.utils [36mimport[39;49m HDF5Matrix[K
[36mfrom[39;49m keras.models [36mimport[39;49m Sequential[K
[36mfrom[39;49m keras.layers [36mimport[39;49m Conv2D, MaxPooling2D, Dense, Flatten, Dropout, Conv2D, ConvLSTM2D, MaxPooling2D, BatchNormalization, Conv3D, GlobalAveragePooling3D[K
[36mfrom[39;49m keras.layers.normalization [36mimport[39;49m BatchNormalization[K
[36mfrom[39;49m keras.layers.convolutional [36mimport[39;49m AveragePooling2D[K
[36mfrom[39;49m keras.layers.core [36mimport[39;49m Activation[K
[36mfrom[39;49m keras.layers.core [36mimport[39;49m Dropout[K
[36mfrom[39;49m keras.layers [36mimport[39;49m Input, GaussianNoise[K
[36mfrom[39;49m keras.models [36mimport[39;49m Model[K
[36mfrom[39;49m keras.layers [36mimport[39;49m concatenate[K
[36mimport[39;49m tensorflow.python.keras.backend [36mas[39;49m K[K
[36mfrom[39;49m keras.utils [36mimport[39;49m plot_model[K
[36mimport[39;49m matplotlib.pyplot [36mas[39;49m plt[K
[36mimport[39;49m glob[K
[36mfrom[39;49m sklearn.preprocessing [36mimport[39;49m StandardScaler[K
[36mfrom[39;49m keras.callbacks [36mimport[39;49m EarlyStopping[K
[36mfrom[39;49m keras [36mimport[39;49m regularizers[K
[36mfrom[39;49m mpl_toolkits.axes_grid1 [36mimport[39;49m make_axes_locatable[K
[36mimport[39;49m numpy.ma [36mas[39;49m ma[K
[36mfrom[39;49m matplotlib.pyplot [36mimport[39;49m cm[K
[36mfrom[39;49m sklearn.preprocessing [36mimport[39;49m scale[K
[36mfrom[39;49m mpl_toolkits.axes_grid1 [36mimport[39;49m make_axes_locatable[K
[36mimport[39;49m numpy.ma [36mas[39;49m ma[K
[36mfrom[39;49m matplotlib.pyplot [36mimport[39;49m cm[K
[36mfrom[39;49m mlxtend.evaluate [36mimport[39;49m confusion_matrix[K
[36mfrom[39;49m mlxtend.plotting [36mimport[39;49m plot_confusion_matrix[K
[36mfrom[39;49m keras.metrics [36mimport[39;49m binary_accuracy[K
[36mfrom[39;49m sklearn.metrics [36mimport[39;49m roc_curve, auc[K
[K
[36mimport[39;49m hyperas[K
[36mfrom[39;49m hyperas [36mimport[39;49m optim[K
[36mfrom[39;49m hyperas.distributions [36mimport[39;49m choice, uniform[K
[36mfrom[39;49m hyperopt [36mimport[39;49m Trials, STATUS_OK, tpe, mongoexp[K
[36mimport[39;49m pickle[K
[36mimport[39;49m tempfile[K
[36mfrom[39;49m os [36mimport[39;49m path[K
plt.ioff()[K
[K
[31m# Finds all the hdf5 files in a given directory                                                                                                                                                                                                                                                                                                                             [39;49m
[A
[36mglobal[39;49m onlyfiles[K
[33monlyfiles[39;49m = [36msorted[39;49m(glob.glob([33m'/mnt/extraspace/exet4487/Crab64080/*.hdf5'[39;49m))[K
[33mrunname[39;49m = [36mstr[39;49m(sys.argv[1])[K
[30m[47m-UU-:----F1  [39;49m[1m[30m[47mhypertrain.py[0m[39;49m[30m[47m   Top L1    Git-master  (Python) ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------[39;49m
[A[2d[?12l[?25h[?12;25h[60d[K[59;35H[?25l[30m[47m2[39;49m[H

[?12l[?25h[?12;25h[59;35H[?25l[30m[47m3[39;49m[4;1H[?12l[?25h[?12;25h[59;35H[?25l[30m[47m10[39;49m[11;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m2[39;49m[13;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m6[39;49m[17;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m7[39;49m[18;1H[?12l[?25h[?12;25h[59;35H[?25l[30m[47m20[39;49m[21;1H[?12l[?25h[?12;25h[59;35H[?25l[30m[47m34[39;49m[35;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m5[39;49m[36;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m7[39;49m[38;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m8[39;49m[39;1H[?12l[?25h[?12;25h[59;35H[?25l[30m[47m42[39;49m[43;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m3[39;49m[44;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m4[39;49m[45;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m5[39;49m[46;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m7[39;49m[48;1H[?12l[?25h[?12;25h[59;35H[?25l[30m[47m50[39;49m[51;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m1[39;49m[52;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m2[39;49m[53;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m3[39;49m[54;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m4[39;49m[55;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m5[39;49m[56;1H[?12l[?25h[?12;25h[1;58r[2;1H[32M[1;60r[27;1H[?25l[33mhexmethod[39;49m=[33m'oversampling'[39;49m[K
[33mhomedir[39;49m=[33m'/users/exet4487/'[39;49m[K
[33mtrialsfile[39;49m=homedir+[33m'trials/'[39;49m+runname+[33m'.npy'[39;49m[K
[K
[31m# Define model architecture.                                                                                                                                                                                                                                                                                                                                                [39;49m
[A
[36mif[39;49m hexmethod [36min[39;49m [[33m'axial_addressing'[39;49m,[33m'image_shifting'[39;49m]:[K
    [33minpshape[39;49m=([36mNone[39;49m,27,27,1)[K
[36melif[39;49m hexmethod [36min[39;49m [[33m'bicubic_interpolation'[39;49m,[33m'nearest_interpolation'[39;49m,[33m'oversampling'[39;49m,[33m'rebinning'[39;49m]:[K
    [33minpshape[39;49m=([36mNone[39;49m,54,54,1)[K
[36melse[39;49m:[K
    [36mprint[39;49m([33m'Invalid Hexmethod'[39;49m)[K
    [36mraise[39;49m [33mKeyboardInterrupt[39;49m[K
[K
[36mdef[39;49m [36mdata[39;49m():[K
    [36mdef[39;49m [36mhardcode_valid[39;49m():[K
        [33mhexmethod[39;49m=[33m'oversampling'[39;49m[K
        [33monlyfiles[39;49m = [36msorted[39;49m(glob.glob([33m'/mnt/extraspace/exet4487/Crab64080/*.hdf5'[39;49m))[K
        [33mbatch_size[39;49m=50[K
        [33m""" Generates training/test sequences on demand                                                                                                                                                                                                                                                                                                                     [39;49m
[A
[33m        """[39;49m[K
[K
        [33mnofiles[39;49m = 0[K
        [33mi[39;49m = 0  [31m# No. events loaded in total                                                                                                                                                                                                                                                                                                                                 [39;49m
[A
        [33mfilelist[39;49m = onlyfiles[-10:][K
        [36mglobal[39;49m validevents[K
        [36mglobal[39;49m valid2[K
        [33mvalidevents[39;49m=[][K
        [33mvalid2[39;49m=[][K
        [36mfor[39;49m [36mfile[39;49m [36min[39;49m filelist:[K
            [33minputdata[39;49m = h5py.File([36mfile[39;49m, [33m'r'[39;49m)[K
            [33mvalidevents[39;49m = validevents + inputdata[[33m'isGamma'[39;49m][:].tolist()[K
            [33mvalid2[39;49m = valid2 + inputdata[[33m'id'[39;49m][:].tolist()[K[59;30H[30m[47m 9% L61[39;49m[30;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m4[39;49m[33;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m7[39;49m[36;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m9[39;49m[38;1H[?12l[?25h[?12;25h[59;35H[?25l[30m[47m70[39;49m[39;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m2[39;49m[41;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m3[39;49m[42;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m5[39;49m[44;1H[?12l[?25h[?12;25h[59;35H[?25l[30m[47m80[39;49m[49;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m1[39;49m[50;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m2[39;49m[51;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m3[39;49m[52;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m4[39;49m[53;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m5[39;49m[54;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m6[39;49m[55;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m7[39;49m[56;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m8[39;49m[57;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m9[39;49m[A[?12l[?25h[?12;25h[1;58r[2;1H[29M[1;60r[30;1H[?25l            inputdata.close()[K
[K
        [36mwhile[39;49m [36mTrue[39;49m:[K
            [36mfor[39;49m [36mfile[39;49m [36min[39;49m filelist:[K
                [36mtry[39;49m:[K
                    [33minputdata[39;49m = h5py.File([36mfile[39;49m, [33m'r'[39;49m)[K
                [36mexcept[39;49m [33mOSError[39;49m:[K
                    [36mcontinue[39;49m[K
                [33mtrainarr[39;49m = np.asarray(inputdata[hexmethod][:, :, :, :])[K
                [33mlabelsarr[39;49m = np.asarray(inputdata[[33m'isGamma'[39;49m][:])[K
                [33midarr[39;49m = np.asarray(inputdata[[33m'id'[39;49m][:])[K
                [33mnofiles[39;49m = nofiles + 1[K
                inputdata.close()[K
                [33mnotrigs[39;49m=np.shape(trainarr)[0][K
[K
                [36mfor[39;49m x [36min[39;49m np.arange(np.shape(trainarr)[0]):[K
                    [33mchargevals[39;49m = [][K
                    [36mfor[39;49m y [36min[39;49m np.arange(4):[K
                        chargevals.append(np.[36msum[39;49m(trainarr[x,y,:,:]))[K
[K
                    [33mchargevals[39;49m = np.argsort(chargevals)[K
                    [33mchargevals[39;49m = np.flip(chargevals,axis=0) [31m#Flip to descending order.                                                                                                                                                                                                                                                                                      [39;49m
[A
                    [33mtrainarr[39;49m[x, :, :, :] = trainarr[x, chargevals, :, :][K
                [33mtraining_sample_count[39;49m = [36mlen[39;49m(trainarr)[K
                [33mbatches[39;49m = [36mint[39;49m(training_sample_count / batch_size)[K
                [33mremainder_samples[39;49m = training_sample_count % batch_size[K
                [33mi[39;49m = i + 1000[K
                [33mcountarr[39;49m = np.arange(0, [36mlen[39;49m(labelsarr))[K
                [31m#trainarr = (trainarr-np.amin(trainarr,axis=0))/(np.amax(trainarr,axis=0)-np.amin(trainarr,axis=0))                                                                                                                                                                                                                                                         [39;49m
[A[59;30H[30m[47m16% L90[39;49m[30;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m1[39;49m[31;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m2[39;49m[32;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m3[39;49m[33;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m4[39;49m[34;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m5[39;49m[35;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m8[39;49m[38;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m9[39;49m[39;1H[?12l[?25h[?12;25h[59;35H[?25l[30m[47m100[39;49m[40;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[41;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[43;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m16[39;49m[56;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m7[39;49m[57;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[A[?12l[?25h[?12;25h[1;58r[3;1H[29M[1;60r[2;1H[K[30d[?25l                [36mif[39;49m remainder_samples:[K
                    [33mbatches[39;49m = batches + 1[K
                        [31m# generate batches of samples                                                                                                                                                                                                                                                                                                                       [39;49m
[A
                [36mfor[39;49m idx [36min[39;49m [36mlist[39;49m([36mrange[39;49m(0, batches)):[K
                    [36mif[39;49m idx == batches - 1:[K
                        [33mbatch_idxs[39;49m = countarr[idx * batch_size:][K
                    [36melse[39;49m:[K
                        [33mbatch_idxs[39;49m = countarr[idx *[K
                                              batch_size:idx *[K
                                              batch_size +[K
                                              batch_size][K
                    [33mX[39;49m = trainarr[batch_idxs][K
                    [33mX[39;49m = np.nan_to_num(X)[K
                    [33mY[39;49m = keras.utils.to_categorical([K
                        labelsarr[batch_idxs], num_classes=2)[K
                    [36myield[39;49m (np.array(X), np.array(Y))[K
[K
    [36mdef[39;49m [36mhardcode_train[39;49m():[K
        [33mhexmethod[39;49m=[33m'oversampling'[39;49m[K
        [33monlyfiles[39;49m = [36msorted[39;49m(glob.glob([33m'/mnt/extraspace/exet4487/Crab64080/*.hdf5'[39;49m))[K
        [33mbatch_size[39;49m=50[K
        [33m""" Generates training/test sequences on demand                                                                                                                                                                                                                                                                                                                     [39;49m
[A
[33m        """[39;49m[K
[K
        [33mnofiles[39;49m = 0[K
        [33mi[39;49m = 0  [31m# No. events loaded in total                                                                                                                                                                                                                                                                                                                                 [39;49m
[A
        [36mglobal[39;49m trainevents[K
        [36mglobal[39;49m train2[K
        [33mtrainevents[39;49m=[][K[59;30H[30m[47m23% L119[39;49m[30;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m21[39;49m[32;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m2[39;49m[33;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[34;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[36;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[37;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[39;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m9[39;49m[40;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m30[39;49m[41;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[42;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m2[39;49m[43;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[44;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[45;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[46;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[49;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m41[39;49m[52;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m2[39;49m[53;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[54;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[55;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[56;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[57;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m7[39;49m[A[?12l[?25h[?12;25h[1;58r[2;1H[30M[1;60r[29;1H[?25l        [33mtrain2[39;49m=[][K
        [33mfilelist[39;49m = onlyfiles[:20][K
        [36mfor[39;49m [36mfile[39;49m [36min[39;49m filelist:[K
            [36mtry[39;49m:[K
                [33minputdata[39;49m = h5py.File([36mfile[39;49m, [33m'r'[39;49m)[K
            [36mexcept[39;49m [33mOSError[39;49m:[K
                [36mcontinue[39;49m[K
            [33mtrainevents[39;49m = trainevents + inputdata[[33m'isGamma'[39;49m][:].tolist()[K
            [33mtrain2[39;49m = train2 + inputdata[[33m'id'[39;49m][:].tolist()[K
            inputdata.close()[K
[K
        [36mwhile[39;49m [36mTrue[39;49m:[K
            [36mfor[39;49m [36mfile[39;49m [36min[39;49m filelist:[K
                [36mtry[39;49m:[K
                    [33minputdata[39;49m = h5py.File([36mfile[39;49m, [33m'r'[39;49m)[K
                [36mexcept[39;49m [33mOSError[39;49m:[K
                    [36mcontinue[39;49m[K
                [33mtrainarr[39;49m = np.asarray(inputdata[hexmethod][:, :, :, :])[K
                [33mlabelsarr[39;49m = np.asarray(inputdata[[33m'isGamma'[39;49m][:])[K
                [33midarr[39;49m = np.asarray(inputdata[[33m'id'[39;49m][:])[K
                [33mnofiles[39;49m = nofiles + 1[K
                inputdata.close()[K
                [33mnotrigs[39;49m=np.shape(trainarr)[0][K
[K
                [36mfor[39;49m x [36min[39;49m np.arange(np.shape(trainarr)[0]):[K
                    [33mchargevals[39;49m = [][K
                    [36mfor[39;49m y [36min[39;49m np.arange(4):[K
                        chargevals.append(np.[36msum[39;49m(trainarr[x,y,:,:]))[K
[K
                    [33mchargevals[39;49m = np.argsort(chargevals)[K[59;30H[30m[47m33% L149[39;49m[30;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m50[39;49m[31;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[32;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m2[39;49m[33;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[34;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[35;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[36;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[37;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m7[39;49m[38;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[39;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m60[39;49m[41;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[42;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m2[39;49m[43;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[45;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[46;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[47;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m7[39;49m[48;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[49;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m9[39;49m[50;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m70[39;49m[51;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[54;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[55;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[56;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[57;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m7[39;49m[A[?12l[?25h[?12;25h[1;58r[2;1H[29M[1;60r[30;1H[?25l                    [33mchargevals[39;49m = np.flip(chargevals,axis=0) [31m#Flip to descending order.                                                                                                                                                                                                                                                                                      [39;49m
[A
                    [33mtrainarr[39;49m[x, :, :, :] = trainarr[x, chargevals, :, :][K
[K
                [33mtraining_sample_count[39;49m = [36mlen[39;49m(trainarr)[K
                [33mbatches[39;49m = [36mint[39;49m(training_sample_count / batch_size)[K
                [33mremainder_samples[39;49m = training_sample_count % batch_size[K
                [33mi[39;49m = i + 1000[K
                [33mcountarr[39;49m = np.arange(0, [36mlen[39;49m(labelsarr))[K
[K
                [31m#            trainarr = (trainarr-np.amin(trainarr,axis=0))/(np.amax(trainarr,axis=0)-np.amin(trainarr,axis=0))                                                                                                                                                                                                                                             [39;49m
[A
                [36mif[39;49m remainder_samples:[K
                    [33mbatches[39;49m = batches + 1[K
[K
                [31m# generate batches of samples                                                                                                                                                                                                                                                                                                                               [39;49m
[A
                [36mfor[39;49m idx [36min[39;49m [36mlist[39;49m([36mrange[39;49m(0, batches)):[K
                    [36mif[39;49m idx == batches - 1:[K
                        [33mbatch_idxs[39;49m = countarr[idx * batch_size:][K
                    [36melse[39;49m:[K
                        [33mbatch_idxs[39;49m = countarr[idx *[K
                                              batch_size:idx *[K
                                              batch_size +[K
                                              batch_size][K
                    [33mX[39;49m = trainarr[batch_idxs][K
                    [33mX[39;49m = np.nan_to_num(X)[K
                    [33mY[39;49m = keras.utils.to_categorical([K
                        labelsarr[batch_idxs], num_classes=2)[K
                    [36myield[39;49m (np.array(X), np.array(Y))[K
[K
[K[59;30H[30m[47m42% L178[39;49m[30;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m9[39;49m[31;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m80[39;49m[32;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[33;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m2[39;49m[34;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[35;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[36;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[37;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[38;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m7[39;49m[39;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[40;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m9[39;49m[41;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m90[39;49m[42;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[43;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m2[39;49m[44;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[45;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[46;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[47;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[48;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m7[39;49m[49;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[50;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m9[39;49m[51;1H[?12l[?25h[?12;25h[59;35H[?25l[30m[47m200[39;49m[52;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[53;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[55;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[56;1H[?12l[?25h[?12;25h[1;56r[2;1H[32M[1;60r[25;1H[K
[K
[?25l    [33mtrain_generator[39;49m=hardcode_train()[K
    [33mvalidation_generator[39;49m=hardcode_valid()[K
    [36mreturn[39;49m train_generator, validation_generator[K
[K
[36mdef[39;49m [36mcreate_model[39;49m(train_generator,validation_generator):[K
    [33minpshape[39;49m=([36mNone[39;49m,54,54,1)[K
    [33mstrategy[39;49m=tf.distribute.MirroredStrategy()[K
    [36mprint[39;49m([33m'Number of devices: {}'[39;49m.[36mformat[39;49m(strategy.num_replicas_in_sync))[K
    [36mwith[39;49m strategy.scope():[K
        [33mmodel[39;49m = Sequential()[K
        model.add(ConvLSTM2D(filters={{choice([10,20,30,40,50,60])}}, kernel_size={{choice([(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)])}},[K
                             input_shape=inpshape,[K
                             padding=[33m'same'[39;49m, return_sequences=[36mTrue[39;49m,kernel_regularizer=keras.regularizers.l2({{uniform(0,1)}}),dropout={{uniform(0,1)}},recurrent_dropout={{uniform(0,1)}}))[K
        model.add(BatchNormalization())[K
[K
        model.add(ConvLSTM2D(filters={{choice([10,20,30,40,50,60])}}, kernel_size={{choice([(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)])}},[K
                             padding=[33m'same'[39;49m, return_sequences=[36mTrue[39;49m,kernel_regularizer=keras.regularizers.l2({{uniform(0,1)}}),dropout={{uniform(0,1)}},recurrent_dropout={{uniform(0,1)}}))[K
        model.add(BatchNormalization())[K
[K
        model.add(ConvLSTM2D(filters={{choice([10,20,30,40,50,60])}}, kernel_size={{choice([(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)])}},[K
                             padding=[33m'same'[39;49m, return_sequences=[36mTrue[39;49m,,kernel_regularizer=keras.regularizers.l2({{uniform(0,1)}}),dropout={{uniform(0,1)}},recurrent_dropout={{uniform(0,1)}}))[K
        model.add(BatchNormalization())[K
        model.add(ConvLSTM2D(filters={{choice([10,20,30,40,50,60])}}, kernel_size={{choice([(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)])}},[K
                             padding=[33m'same'[39;49m, return_sequences=[36mTrue[39;49m,,kernel_regularizer=keras.regularizers.l2({{uniform(0,1)}}),dropout={{uniform(0,1)}},recurrent_dropout={{uniform(0,1)}}))[K
        model.add(BatchNormalization())[K
        [36mif[39;49m {{choice([[33m'four'[39;49m,[33m'five'[39;49m,[33m'six'[39;49m])}}==[33m'five'[39;49m:[K
            model.add(ConvLSTM2D(filters={{choice([10,20,30,40,50,60])}}, kernel_size={{choice([(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)])}},[K
                                 padding=[33m'same'[39;49m, return_sequences=[36mTrue[39;49m,,kernel_regularizer=keras.regularizers.l2({{uniform(0,1)}}),dropout={{uniform(0,1)}},recurrent_dropout={{uniform(0,1)}}))[K
            model.add(BatchNormalization())[K
        [36mif[39;49m {{choice([[33m'four'[39;49m,[33m'five'[39;49m,[33m'six'[39;49m])}}==[33m'six'[39;49m:[K[57;13Hmodel.add(ConvLSTM2D(filters={{choice([10,20,30,40,50,60])}}, kernel_size={{choice([(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)])}},[58;34Hpadding=[33m'same'[39;49m, return_sequences=[36mTrue[39;49m,,kernel_regularizer=keras.regularizers.l2({{uniform(0,1)}}),dropout={{uniform(0,1)}},recurrent_dropout={{uniform(0,1)}}))[59;30H[30m[47m52% L210[39;49m[30;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[31;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m2[39;49m[32;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[33;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[36;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m7[39;49m[37;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[38;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m9[39;49m[39;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m20[39;49m[40;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[41;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[43;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[44;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[45;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[46;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m35[39;49m[55;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[56;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m7[39;49m[57;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[A[?12l[?25h[?12;25h[1;58r[2;1H[29M[1;60r[30;1H[?25l            model.add(BatchNormalization())[K
            model.add(ConvLSTM2D(filters={{choice([10,20,30,40,50,60])}}, kernel_size={{choice([(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)])}},[K
                                 padding=[33m'same'[39;49m, return_sequences=[36mTrue[39;49m,,kernel_regularizer=keras.regularizers.l2({{uniform(0,1)}}),dropout={{uniform(0,1)}},recurrent_dropout={{uniform(0,1)}}))[K
            model.add(BatchNormalization())[K
        model.add(GlobalAveragePooling3D())[K
        model.add(Dense({{choice([10,50,100,200])}},activation=[33m'relu'[39;49m))[K
        model.add(Dense(2, activation=[33m'softmax'[39;49m))[K
        [31m# Compile the model                                                                                                                                                                                                                                                                                                                                                 [39;49m
[A
        model.[36mcompile[39;49m(loss=[33m'binary_crossentropy'[39;49m,[K
                      optimizer=[33m'Adam'[39;49m,[K
                      metrics=[[33m'binary_accuracy'[39;49m])[K
        [33m'''early_stop = EarlyStopping(                                                                                                                                                                                                                                                                                                                                      [39;49m
[A
[33m        monitor='val_loss',                                                                                                                                                                                                                                                                                                                                                 [39;49m
[A
[33m        min_delta=0,                                                                                                                                                                                                                                                                                                                                                        [39;49m
[A
[33m        patience=10,                                                                                                                                                                                                                                                                                                                                                        [39;49m
[A
[33m        verbose=1,                                                                                                                                                                                                                                                                                                                                                          [39;49m
[A
[33m        mode='auto')'''[39;49m[K
[K
    [31m# Code for ensuring no contamination between training and test data.                                                                                                                                                                                                                                                                                                    [39;49m
[A
    [33mlentrain[39;49m=19574*2[K
    [33mlentruth[39;49m=19600[K
[31m# Train the network                                                                                                                                                                                                                                                                                                                                                         [39;49m
[A
    [33mhistory[39;49m = model.fit([K
        train_generator,[K
        steps_per_epoch=lentrain/50.0,[K
        epochs=15,[K
        verbose=0,[K
        workers=0,[K
        use_multiprocessing=[36mFalse[39;49m,[K
[30m[47m61% L239[39;49m[30;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m40[39;49m[31;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[32;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m2[39;49m[33;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[34;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[35;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[36;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[37;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m7[39;49m[38;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m9[39;49m[40;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m50[39;49m[41;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[42;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[44;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[45;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[46;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[47;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m9[39;49m[50;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m60[39;49m[51;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[52;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m2[39;49m[53;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[54;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[55;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[57;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m7[39;49m[A[?12l[?25h[?12;25h[1;58r[2;1H[29M[1;60r[30;1H[?25l        shuffle=[36mTrue[39;49m,validation_data=validation_generator,validation_steps=lentruth/50.0)[K
    [33mscore[39;49m, [33macc[39;49m=model.evaluate(validation_generator,steps=lentruth/50.0)[K
    [33mmodelnumber[39;49m=[36mnext[39;49m(tempfile._get_candidate_names())[K
    [33mmodelcode[39;49m=np.random.randint(0,1e10)[K
    [33mout[39;49m = {[33m'loss'[39;49m: -acc,[K
        [33m'score'[39;49m: score,[K
        [33m'modelno'[39;49m:[36mstr[39;49m(modelnumber)+[36mstr[39;49m(modelcode),[K
        [33m'status'[39;49m: STATUS_OK,[K
        [33m'model_params'[39;49m: model.summary()[K
    }[K
    model.save([33m'/users/exet4487/hypermodels/'[39;49m+[36mstr[39;49m(modelnumber)+[36mstr[39;49m(modelcode)+[33m'.h5'[39;49m)[K
    [31m# optionally store a dump of your model here so you can get it from the database later                                                                                                                                                                                                                                                                                  [39;49m
[A
    [33mtemp_name[39;49m = tempfile.gettempdir()+[33m'/'[39;49m+modelnumber + [33m'.h5'[39;49m[K
    model.save(temp_name)[K
    [31m#with open(temp_name, 'rb') as infile:                                                                                                                                                                                                                                                                                                                                  [39;49m
[A
    [31m#model_bytes = infile.read()                                                                                                                                                                                                                                                                                                                                            [39;49m
[A
    [31m#out['model_serial'] = model_bytes                                                                                                                                                                                                                                                                                                                                      [39;49m
[A
    [36mreturn[39;49m out[K
[K
    [31m# Plot training accuracy/loss.                                                                                                                                                                                                                                                                                                                                          [39;49m
[A
[K
[33mtrialsinit[39;49m=mongoexp.MongoTrials([33m'mongo://exet4487:admin123@192.168.0.200:27017/jobs/jobs'[39;49m,exp_key=runname)[K
[K
[33mrun[39;49m,[33mmodel[39;49m=optim.minimize(model=create_model,data=data,algo=tpe.suggest,max_evals=250,trials=trialsinit,keep_temp=[36mTrue[39;49m)[K
[K
[36mprint[39;49m([33m'best run:'[39;49m, run)[K
[36mprint[39;49m(trialsinit)[K
[36mprint[39;49m([36mdir[39;49m(trialsinit))[K
[36mprint[39;49m([36mlen[39;49m(trialsinit))[K[59;30H[30m[47m80% L268[39;49m[30;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m9[39;49m[31;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m70[39;49m[32;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[33;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m2[39;49m[34;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[33;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m0[39;49m[32;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m69[39;49m[31;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[30;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m70[39;49m[32;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[33;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m2[39;49m[34;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[35;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[36;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[38;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m7[39;49m[39;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[40;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m9[39;49m[41;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m80[39;49m[42;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[43;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[45;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[46;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[47;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[48;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m7[39;49m[49;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[50;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m9[39;49m[51;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m91[39;49m[53;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m2[39;49m[54;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[55;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[56;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[A[?12l[?25h[?12;25h[1;58r[2;1H[29M[1;60r[30;1H[?25l[36mprint[39;49m([33m"----------trials-------------"[39;49m)[K
[33mtrialsdict[39;49m={}[K
[36mfor[39;49m i [36min[39;49m trialsinit.trials:[K
    [33mvals[39;49m = i.get([33m'misc'[39;49m).get([33m'vals'[39;49m)[K
    [33mresults[39;49m = i.get([33m'result'[39;49m).get([33m'loss'[39;49m)[K
    [36mprint[39;49m(vals,results)[K
    [33mtrialsdict[39;49m[[36mstr[39;49m(vals)]=[36mstr[39;49m(results)[K
np.save(trialsfile,trialsdict)[K
[31m#pickle.dump(trialsinit, open(trialsfile, "wb"))                                                                                                                                                                                                                                                                                                                            [39;49m
[A
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K
[K[59;30H[30m[47mBot L297[39;49m[30;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[31;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m9[39;49m[32;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[31;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m7[39;49m[30;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[28;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[27;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[26;24H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m2[39;49m[25;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[24;21H[?12l[?25h[?12;25h[C[C		[C[C[C[C[C[C		[C[C[24;37H[C[C		[C[C[C[C[C[C		[C[C[C[C[C[C		[C[C[C[C[C[C		[C[C[C[C[C[C		[C[C[C[C[C[C		[C[C[C[C[?25l[1P[59;6H[30m[47m**[39;49m[24;84H[?12l[?25h[?12;25h[?25l[1P[?12l[?25h[?12;25h[?25l[1P[?12l[?25h[?12;25h[?25l[1@5[?12l[?25h[?12;25h[?25l[1@0[?12l[?25h[?12;25h[?25l[1@0[?12l[?25h[?12;25h[59;37H[?25l[30m[47m0[39;49m[23;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m88[39;49m[21;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m7[39;49m[20;35H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[19;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[18;15H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[17;39H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[16;33H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m2[39;49m[15;43H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[14;26H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m0[39;49m[13;62H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m79[39;49m[12;85H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[11;85H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m7[39;49m[10;6H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[9;40H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[8;29H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[7;51H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[6;24H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m2[39;49m[5;25H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[4;40H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m0[39;49m[3;54H[?12l[?25h[?12;25h[1;58r[2;1H[29L[1;60r[2;1H[?25l            model.add(ConvLSTM2D(filters={{choice([10,20,30,40,50,60])}}, kernel_size={{choice([(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)])}},[K
                                 padding=[33m'same'[39;49m, return_sequences=[36mTrue[39;49m,,kernel_regularizer=keras.regularizers.l2({{uniform(0,1)}}),dropout={{uniform(0,1)}},recurrent_dropout={{uniform(0,1)}}))[K
            model.add(BatchNormalization())[K
        model.add(GlobalAveragePooling3D())[K
        model.add(Dense({{choice([10,50,100,200])}},activation=[33m'relu'[39;49m))[K
        model.add(Dense(2, activation=[33m'softmax'[39;49m))[K
        [31m# Compile the model                                                                                                                                                                                                                                                                                                                                                 [39;49m
[A
        model.[36mcompile[39;49m(loss=[33m'binary_crossentropy'[39;49m,[K
                      optimizer=[33m'Adam'[39;49m,[K
                      metrics=[[33m'binary_accuracy'[39;49m])[K
        [33m'''early_stop = EarlyStopping(                                                                                                                                                                                                                                                                                                                                      [39;49m
[A
[33m        monitor='val_loss',                                                                                                                                                                                                                                                                                                                                                 [39;49m
[A
[33m        min_delta=0,                                                                                                                                                                                                                                                                                                                                                        [39;49m
[A
[33m        patience=10,                                                                                                                                                                                                                                                                                                                                                        [39;49m
[A
[33m        verbose=1,                                                                                                                                                                                                                                                                                                                                                          [39;49m
[A
[33m        mode='auto')'''[39;49m[K
[K
    [31m# Code for ensuring no contamination between training and test data.                                                                                                                                                                                                                                                                                                    [39;49m
[A
    [33mlentrain[39;49m=19574*2[K
    [33mlentruth[39;49m=19600[K
[31m# Train the network                                                                                                                                                                                                                                                                                                                                                         [39;49m
[A
    [33mhistory[39;49m = model.fit([K
        train_generator,[K
        steps_per_epoch=lentrain/50.0,[K
        epochs=15,[K
        verbose=0,[K
        workers=0,[K
        use_multiprocessing=[36mFalse[39;49m,[K
        shuffle=[36mTrue[39;49m,validation_data=validation_generator,validation_steps=lentruth/50.0)[K[59;30H[30m[47m80% L268[39;49m[30;85H[?12l[?25h[?12;25h[60;1H[?25lAuto-saving...[30;85H[?12l[?25h[?12;25h[60;15H[?25ldone[30;85H[?12l[?25h[?12;25h[60;1H[K[59;37H[?25l[30m[47m7[39;49m[29;35H[?12l[?25h[?12;25h[60;1H[?25lSaving file /users/exet4487/getout_glamdring/hypertrain.py...[29;35H[?12l[?25h[?12;25h[60;1H[?25lWrote /users/exet4487/getout_glamdring/hypertrain.py[K[29;35H[?12l[?25h[?12;25h[59;6H[?25l[30m[47m----F1  [39;49m[1m[30m[47mhypertrain.py[0m[39;49m[30m[47m   80% L267  Git:[39;49m[29;35H[?12l[?25h[?12;25h[60;1H[K[29;35H[60;1H[K[?1l>[?12l[?25h[?1049l[23;0;0t[39;49m(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m 
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m \
> 
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m 
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m 
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m 
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m cd ../launchpad
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m ls -trhgl
total 17M
drwxrwxr-x 6 exet4487     6 Jul 21 12:31 venv
-rw-rw-r-- 1 exet4487  1.9K Jul 21 18:32 testgpu.py
-rw-rw-r-- 1 exet4487  2.3K Jul 24 17:08 temp_model.py
-rwxrw-r-- 1 exet4487   462 Aug  5 12:14 testlaunch.sh
-rw-rw-r-- 1 exet4487  1.6K Aug 20 20:03 testhead.sh.sh
-rw-rw-r-- 1 exet4487  734K Aug 22 00:57 screentest9_2.txt
-rw-rw-r-- 1 exet4487  764K Aug 22 01:18 screentest9_3.txt
-rw-rw-r-- 1 exet4487  708K Aug 22 01:20 screentest9_4.txt
-rw-rw-r-- 1 exet4487  776K Aug 22 01:33 screentest9_1.txt
-rw-rw-r-- 1 exet4487   12K Aug 22 19:00 screentest9_5.txt
-rw-rw-r-- 1 exet4487   22K Aug 22 20:17 screentest10_5.txt
-rw-rw-r-- 1 exet4487  117K Aug 22 20:17 screentest10_2.txt
-rw-rw-r-- 1 exet4487  111K Aug 22 20:17 screentest10_4.txt
-rw-rw-r-- 1 exet4487  134K Aug 22 20:17 screentest10_1.txt
-rw-rw-r-- 1 exet4487  111K Aug 22 20:17 screentest10_3.txt
-rw-rw-r-- 1 exet4487   11K Aug 22 20:24 _.txt
-rw-rw-r-- 1 exet4487  701K Aug 23 02:29 screentest11_3.txt
-rw-rw-r-- 1 exet4487  652K Aug 23 02:44 screentest11_8_.txt
-rw-rw-r-- 1 exet4487  783K Aug 23 02:47 screentest11_1.txt
-rw-rw-r-- 1 exet4487  796K Aug 23 02:55 screentest11_2.txt
-rw-rw-r-- 1 exet4487   12K Aug 23 09:56 screentest11_4.txt
-rw-rw-r-- 1 exet4487   12K Aug 23 09:57 screentest12_1.txt
-rw-rw-r-- 1 exet4487   612 Aug 23 09:57 screentest12_3.txt
-rw-rw-r-- 1 exet4487    80 Aug 23 09:57 screentest12_4.txt
-rw-rw-r-- 1 exet4487   12K Aug 23 09:57 screentest12_2.txt
-rw-rw-r-- 1 exet4487  8.9K Aug 23 10:04 screentest13_1.txt
-rw-rw-r-- 1 exet4487   12K Aug 23 10:04 screentest13_4.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 10:04 screentest13_3.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 10:04 screentest13_2.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 10:04 screentest13_5.txt
-rw-rw-r-- 1 exet4487  297K Aug 23 12:32 screentest14_4.txt
-rw-rw-r-- 1 exet4487  649K Aug 23 15:36 screentest14_5.txt
-rw-rw-r-- 1 exet4487  598K Aug 23 15:42 screentest14_1.txt
-rw-rw-r-- 1 exet4487  653K Aug 23 15:51 screentest14_2.txt
-rw-rw-r-- 1 exet4487  683K Aug 23 15:53 screentest14_3.txt
-rw-rw-r-- 1 exet4487   22K Aug 23 22:46 stresstest1_1.txt
-rw-rw-r-- 1 exet4487   22K Aug 23 22:46 stresstest1_3.txt
-rw-rw-r-- 1 exet4487   22K Aug 23 22:46 stresstest1_2.txt
-rw-rw-r-- 1 exet4487   21K Aug 23 22:46 stresstest1_5.txt
-rw-rw-r-- 1 exet4487   20K Aug 23 22:46 stresstest1_4.txt
-rwxrw-r-- 1 exet4487   363 Aug 23 22:47 testhead.sh~
-rwxrw-r-- 1 exet4487   357 Aug 23 22:51 testhead.sh
-rw-rw-r-- 1 exet4487   13K Aug 23 23:02 stresstest4_3.txt
-rw-rw-r-- 1 exet4487  8.9K Aug 23 23:02 stresstest4_1.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 23:02 stresstest4_5.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 23:02 stresstest4_4.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 23:02 stresstest4_2.txt
-rw-rw-r-- 1 exet4487  483K Aug 25 09:55 screentest5_4.txt
-rw-rw-r-- 1 exet4487  515K Aug 25 10:40 screentest5_5.txt
-rw-rw-r-- 1 exet4487  573K Aug 25 11:12 screentest5_3.txt
-rw-rw-r-- 1 exet4487  495K Aug 25 12:23 screentest5_1.txt
-rw-rw-r-- 1 exet4487  589K Aug 25 12:45 screentest5_2.txt
-rw-rw-r-- 1 exet4487   62K Aug 27 20:13 crashtest1_3.txt
-rw-rw-r-- 1 exet4487  110K Aug 27 22:40 crashtest1_4.txt
-rw-rw-r-- 1 exet4487  116K Aug 28 14:52 crashtest1_6.txt
-rw-rw-r-- 1 exet4487  165K Aug 28 17:55 crashtest1_7.txt
-rw-rw-r-- 1 exet4487  813K Aug 29 04:44 crashtest1_5.txt
-rw-rw-r-- 1 exet4487  729K Aug 29 05:01 crashtest1_1.txt
-rw-rw-r-- 1 exet4487  830K Aug 29 06:44 crashtest1_2.txt
-rw-rw-r-- 1 exet4487   61K Aug 31 16:47 crashtest2_3.txt
-rw-rw-r-- 1 exet4487  110K Aug 31 19:11 crashtest2_4.txt
-rw-rw-r-- 1 exet4487  441K Sep  1 10:51 crashtest2_5.txt
-rw-rw-r-- 1 exet4487  402K Sep  1 10:58 crashtest2_1.txt
-rw-rw-r-- 1 exet4487  404K Sep  1 10:58 crashtest2_2.txt
-rw-rw-r-- 1 exet4487   61K Sep  1 14:23 crashtest3_3.txt
-rw-rw-r-- 1 exet4487  592K Sep  2 14:44 crashtest3_4.txt
-rw-rw-r-- 1 exet4487  606K Sep  2 21:34 crashtest3_1.txt
-rw-rw-r-- 1 exet4487  668K Sep  2 21:34 crashtest3_2.txt
-rw-rw-r-- 1 exet4487  682K Sep  2 21:34 crashtest3_5.txt
-rw-rw-r-- 1 exet4487   61K Sep  3 20:54 crashtest4_3.txt
-rw-rw-r-- 1 exet4487  654K Sep  5 01:52 crashtest4_6.txt
-rw-rw-r-- 1 exet4487  722K Sep  5 02:18 crashtest4_2.txt
-rw-rw-r-- 1 exet4487  618K Sep  5 02:42 crashtest4_1.txt
-rw-rw-r-- 1 exet4487  728K Sep  5 04:27 crashtest4_4.txt
-rw-rw-r-- 1 exet4487  621K Sep  6 16:12 crashtest5_3.txt
-rw-rw-r-- 1 exet4487  688K Sep  6 17:38 crashtest5_4.txt
-rw-rw-r-- 1 exet4487   53K Sep  6 17:46 crashtest5_5.txt
-rw-rw-r-- 1 exet4487  703K Sep  6 18:01 crashtest5_2.txt
-rw-rw-r-- 1 exet4487 1001K Sep  6 20:03 crashtest5_1.txt
-rw-rw-r-- 1 exet4487  707K Sep  9 00:26 crashtest6_2.txt
-rw-rw-r-- 1 exet4487  665K Sep  9 01:20 crashtest6_4.txt
-rw-rw-r-- 1 exet4487  257K Sep  9 01:34 crashtest6_gpu03.txt
-rw-rw-r-- 1 exet4487  674K Sep  9 02:59 crashtest6_3.txt
-rw-rw-r-- 1 exet4487  782K Sep  9 03:57 crashtest6_1.txt
-rw-rw-r-- 1 exet4487  117K Sep  9 15:27 crashtest7_2.txt
-rw-rw-r-- 1 exet4487   89K Sep  9 15:27 crashtest7_4.txt
-rw-rw-r-- 1 exet4487  110K Sep  9 15:27 crashtest7_1.txt
-rw-rw-r-- 1 exet4487  121K Sep  9 15:27 crashtest7_5.txt
-rw-rw-r-- 1 exet4487  110K Sep  9 15:27 crashtest7_3.txt
-rw-rw-r-- 1 exet4487  211K Sep 10 00:21 crashtest8_4.txt
-rw-rw-r-- 1 exet4487  247K Sep 10 01:35 crashtest8_2.txt
-rw-rw-r-- 1 exet4487  263K Sep 10 02:12 crashtest8_5.txt
-rw-rw-r-- 1 exet4487  247K Sep 10 02:25 crashtest8_3.txt
-rw-rw-r-- 1 exet4487  285K Sep 10 02:27 crashtest8_1.txt
-rw-rw-r-- 1 exet4487   13K Sep 10 10:15 longtest5_1.txt
-rw-rw-r-- 1 exet4487  8.9K Sep 10 10:15 longtest5_4.txt
-rw-rw-r-- 1 exet4487   13K Sep 10 10:15 longtest5_2.txt
-rw-rw-r-- 1 exet4487   13K Sep 10 10:15 longtest5_5.txt
-rw-rw-r-- 1 exet4487   13K Sep 10 10:15 longtest5_3.txt
-rwxrwxr-x 1 exet4487   998 Sep 10 10:20 submitjobs.sh~
-rw-rw-r-- 1 exet4487   61K Sep 10 12:59 longtest7_3.txt
-rw-rw-r-- 1 exet4487  2.0M Sep 14 11:47 longtest7_2.txt
-rw-rw-r-- 1 exet4487  2.0M Sep 14 11:47 longtest7_1.txt
-rw-rw-r-- 1 exet4487  2.0M Sep 14 11:47 longtest7_5.txt
-rw-rw-r-- 1 exet4487  1.7M Sep 14 11:47 longtest7_4.txt
-rwxrwxr-x 1 exet4487   998 Sep 14 11:48 submitjobs.sh
-rw-rw-r-- 1 exet4487  1.6K Sep 14 11:50 testlaunch.sh.sh
-rw-rw-r-- 1 exet4487  3.1M Sep 20 16:05 longtest8_1.txt
-rw-rw-r-- 1 exet4487  3.2M Sep 20 16:25 longtest8_2.txt
-rw-rw-r-- 1 exet4487  2.6M Sep 20 16:48 longtest8_4.txt
-rw-rw-r-- 1 exet4487  3.2M Sep 20 17:28 longtest8_3.txt
-rw-rw-r-- 1 exet4487  3.1M Sep 20 18:04 longtest8_5.txt
-rw-rw-r-- 1 exet4487   24M Sep 21 12:44 screenlog.0
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m ./testhead.sh Crabte[K[K64080opt1
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m   File "/users/exet4487/getout_glamdring/hypertrain.py", line 227
    padding='same', return_sequences=True,,kernel_regularizer=keras.regularizers.l2({{uniform(0,1)}}),dropout={{uniform(0,1)}},recurrent_dropout={{uniform(0,1)}}))
                                          ^
SyntaxError: invalid syntax
^C
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m ^C
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m ^C
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m ^C
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m ^C
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m ^C
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m ^C
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m emacs ../getout_glamdring/hypertrain.py 
[?1049h[22;0;0t[?12;25h[?1h=[H[2J[60d[K[?1l>[?12l[?25h[?1049l[23;0;0t[39;49m[?1049h[22;0;0t[?12;25h[?1h=[H[2J[59d[?25l[30m[47m-UUU:----F1  [39;49m[1m[30m[47m*scratch*   [0m[39;49m[30m[47m   All L1     (Fundamental) -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------[39;49m
[A[2d[?12l[?25h[?12;25h[60d[?25lLoading 00debian-vars...done[K[H
[?12l[?25h[?12;25h[60;9H[?25l/etc/emacs/site-start.d/50a2ps.el (source)...[H
[?12l[?25h[?12;25h[60;54H[?25ldone[H
[?12l[?25h[?12;25h[60;36H[?25lsymptote.el (source)...[H
[?12l[?25h[?12;25h[60;59H[?25ldone[H
[?12l[?25h[?12;25h[60;36H[?25lutoconf.el (source)...[K[H
[?12l[?25h[?12;25h[60;58H[?25ldone[H
[?12l[?25h[?12;25h[60;35H[?25lcmake-data.el (source)...[K[H
[?12l[?25h[?12;25h[60;60H[?25ldone[H
[?12l[?25h[?12;25h[60;35H[?25ldictionaries-common.el (source)...[H
[?12l[?25h[?12;25h[60;9H[?25ldebian-ispell...[K[H
[?12l[?25h[?12;25h[60;9H[?25l/var/cache/dictionaries-common/emacsen-ispell-default.el (source)...[H
[?12l[?25h[?12;25h[60;77H[?25ldone[H
[?12l[?25h[?12;25h[60;9H[?25ldebian-ispell...done[K[H
[?12l[?25h[?12;25h[60;9H[?25l/var/cache/dictionaries-common/emacsen-ispell-dicts.el (source)...[H
[?12l[?25h[?12;25h[60;75H[?25ldone[H
[?12l[?25h[?12;25h[60;10H[?25letc/emacs/site-start.d/50dictionaries-common[6P[H
[?12l[?25h[?12;25h[60;35H[?25llatex-cjk-common.el (source)...[K[H
[?12l[?25h[?12;25h[60;9H[?25lcjk-enc...[K[H
[?12l[?25h[?12;25h[60;19H[?25ldone[H
[?12l[?25h[?12;25h[60;9H[?25l/etc/emacs/site-start.d/50latex-cjk-common.el (source)...done[H
[?12l[?25h[?12;25h[60;45H[?25lthai.el (source)...[K[H
[?12l[?25h[?12;25h[60;64H[?25ldone[H
[?12l[?25h[?12;25h[60;35H[?25ltcsh.el (source)...[K[H
[?12l[?25h[?12;25h[60;54H[?25ldone[H
[?12l[?25h[?12;25h[60;36H[?25lexlive-lang-english.el (source)...[H
[?12l[?25h[?12;25h[60;70H[?25ldone[H
[?12l[?25h[?12;25h[60;35H[?25lyorick-auto.el (source)...[K[H
[?12l[?25h[?12;25h[60;61H[?25ldone[H
[?12l[?25h[?12;25h[60d[?25lFor information about GNU Emacs and the GNU system, type C-h C-a.[H
[?12l[?25h[?12;25h[60d[?25lFor information about GNU Emacs and the GNU system, type C-h C-a.[K[H[7mFile Edit Options Buffers Tools Python Help                                                                                                                                                                                                                                                                                                                                 [0m[39;49m[27m
[A
[33m'''Uses Keras to train and test a 2dconvlstm on parameterized VERITAS data.                                                                                                                                                                                                                                                                                                 [39;49m
[A
[33mWritten by S.T. Spencer 27/6/2019'''[39;49m[K
[36mimport[39;49m os[K
[36mimport[39;49m matplotlib [36mas[39;49m mpl[K
mpl.use([33m'Agg'[39;49m)[K
[36mimport[39;49m numpy [36mas[39;49m np[K
[36mimport[39;49m h5py[K
[36mimport[39;49m keras[K
[36mimport[39;49m tempfile[K
[36mimport[39;49m sys[K
[36mimport[39;49m tensorflow [36mas[39;49m tf[K
tf.compat.v1.disable_eager_execution()[K
[36mfrom[39;49m tensorflow.compat.v1 [36mimport[39;49m ConfigProto[K
[36mfrom[39;49m tensorflow.compat.v1 [36mimport[39;49m Session[K
[K
[36mfrom[39;49m keras.utils [36mimport[39;49m HDF5Matrix[K
[36mfrom[39;49m keras.models [36mimport[39;49m Sequential[K
[36mfrom[39;49m keras.layers [36mimport[39;49m Conv2D, MaxPooling2D, Dense, Flatten, Dropout, Conv2D, ConvLSTM2D, MaxPooling2D, BatchNormalization, Conv3D, GlobalAveragePooling3D[K
[36mfrom[39;49m keras.layers.normalization [36mimport[39;49m BatchNormalization[K
[36mfrom[39;49m keras.layers.convolutional [36mimport[39;49m AveragePooling2D[K
[36mfrom[39;49m keras.layers.core [36mimport[39;49m Activation[K
[36mfrom[39;49m keras.layers.core [36mimport[39;49m Dropout[K
[36mfrom[39;49m keras.layers [36mimport[39;49m Input, GaussianNoise[K
[36mfrom[39;49m keras.models [36mimport[39;49m Model[K
[36mfrom[39;49m keras.layers [36mimport[39;49m concatenate[K
[36mimport[39;49m tensorflow.python.keras.backend [36mas[39;49m K[K
[36mfrom[39;49m keras.utils [36mimport[39;49m plot_model[K
[36mimport[39;49m matplotlib.pyplot [36mas[39;49m plt[K
[36mimport[39;49m glob[K
[36mfrom[39;49m sklearn.preprocessing [36mimport[39;49m StandardScaler[K
[36mfrom[39;49m keras.callbacks [36mimport[39;49m EarlyStopping[K
[36mfrom[39;49m keras [36mimport[39;49m regularizers[K
[36mfrom[39;49m mpl_toolkits.axes_grid1 [36mimport[39;49m make_axes_locatable[K
[36mimport[39;49m numpy.ma [36mas[39;49m ma[K
[36mfrom[39;49m matplotlib.pyplot [36mimport[39;49m cm[K
[36mfrom[39;49m sklearn.preprocessing [36mimport[39;49m scale[K
[36mfrom[39;49m mpl_toolkits.axes_grid1 [36mimport[39;49m make_axes_locatable[K
[36mimport[39;49m numpy.ma [36mas[39;49m ma[K
[36mfrom[39;49m matplotlib.pyplot [36mimport[39;49m cm[K
[36mfrom[39;49m mlxtend.evaluate [36mimport[39;49m confusion_matrix[K
[36mfrom[39;49m mlxtend.plotting [36mimport[39;49m plot_confusion_matrix[K
[36mfrom[39;49m keras.metrics [36mimport[39;49m binary_accuracy[K
[36mfrom[39;49m sklearn.metrics [36mimport[39;49m roc_curve, auc[K
[K
[36mimport[39;49m hyperas[K
[36mfrom[39;49m hyperas [36mimport[39;49m optim[K
[36mfrom[39;49m hyperas.distributions [36mimport[39;49m choice, uniform[K
[36mfrom[39;49m hyperopt [36mimport[39;49m Trials, STATUS_OK, tpe, mongoexp[K
[36mimport[39;49m pickle[K
[36mimport[39;49m tempfile[K
[36mfrom[39;49m os [36mimport[39;49m path[K
plt.ioff()[K
[K
[31m# Finds all the hdf5 files in a given directory                                                                                                                                                                                                                                                                                                                             [39;49m
[A
[36mglobal[39;49m onlyfiles[K
[33monlyfiles[39;49m = [36msorted[39;49m(glob.glob([33m'/mnt/extraspace/exet4487/Crab64080/*.hdf5'[39;49m))[K
[33mrunname[39;49m = [36mstr[39;49m(sys.argv[1])[K
[30m[47m-UU-:----F1  [39;49m[1m[30m[47mhypertrain.py[0m[39;49m[30m[47m   Top L1    Git:master  (Python) ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------[39;49m
[A[2d[?12l[?25h[?12;25h[60d[K[59;35H[?25l[30m[47m2[39;49m[H

[?12l[?25h[?12;25h[59;35H[?25l[30m[47m3[39;49m[4;1H[?12l[?25h[?12;25h[59;35H[?25l[30m[47m4[39;49m[5;1H[?12l[?25h[?12;25h[59;35H[?25l[30m[47m5[39;49m[6;1H[?12l[?25h[?12;25h[59;35H[?25l[30m[47m6[39;49m[7;1H[?12l[?25h[?12;25h[59;35H[?25l[30m[47m16[39;49m[17;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m9[39;49m[20;1H[?12l[?25h[?12;25h[59;35H[?25l[30m[47m20[39;49m[21;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m5[39;49m[26;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m7[39;49m[28;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m8[39;49m[29;1H[?12l[?25h[?12;25h[59;35H[?25l[30m[47m30[39;49m[31;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m1[39;49m[32;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m3[39;49m[34;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m4[39;49m[35;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m6[39;49m[37;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m7[39;49m[38;1H[?12l[?25h[?12;25h[59;35H[?25l[30m[47m51[39;49m[52;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m2[39;49m[53;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m3[39;49m[54;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m5[39;49m[56;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m6[39;49m[57;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m7[39;49m[A[?12l[?25h[?12;25h[1;58r[2;1H[29M[1;60r[30;1H[?25l[33mhexmethod[39;49m=[33m'oversampling'[39;49m[K
[33mhomedir[39;49m=[33m'/users/exet4487/'[39;49m[K
[33mtrialsfile[39;49m=homedir+[33m'trials/'[39;49m+runname+[33m'.npy'[39;49m[K
[K
[31m# Define model architecture.                                                                                                                                                                                                                                                                                                                                                [39;49m
[A
[36mif[39;49m hexmethod [36min[39;49m [[33m'axial_addressing'[39;49m,[33m'image_shifting'[39;49m]:[K
    [33minpshape[39;49m=([36mNone[39;49m,27,27,1)[K
[36melif[39;49m hexmethod [36min[39;49m [[33m'bicubic_interpolation'[39;49m,[33m'nearest_interpolation'[39;49m,[33m'oversampling'[39;49m,[33m'rebinning'[39;49m]:[K
    [33minpshape[39;49m=([36mNone[39;49m,54,54,1)[K
[36melse[39;49m:[K
    [36mprint[39;49m([33m'Invalid Hexmethod'[39;49m)[K
    [36mraise[39;49m [33mKeyboardInterrupt[39;49m[K
[K
[36mdef[39;49m [36mdata[39;49m():[K
    [36mdef[39;49m [36mhardcode_valid[39;49m():[K
        [33mhexmethod[39;49m=[33m'oversampling'[39;49m[K
        [33monlyfiles[39;49m = [36msorted[39;49m(glob.glob([33m'/mnt/extraspace/exet4487/Crab64080/*.hdf5'[39;49m))[K
        [33mbatch_size[39;49m=50[K
        [33m""" Generates training/test sequences on demand                                                                                                                                                                                                                                                                                                                     [39;49m
[A
[33m        """[39;49m[K
[K
        [33mnofiles[39;49m = 0[K
        [33mi[39;49m = 0  [31m# No. events loaded in total                                                                                                                                                                                                                                                                                                                                 [39;49m
[A
        [33mfilelist[39;49m = onlyfiles[-10:][K
        [36mglobal[39;49m validevents[K
        [36mglobal[39;49m valid2[K
        [33mvalidevents[39;49m=[][K
        [33mvalid2[39;49m=[][K
        [36mfor[39;49m [36mfile[39;49m [36min[39;49m filelist:[K
[30m[47m 8% L58[39;49m[30;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m9[39;49m[31;1H[?12l[?25h[?12;25h[59;35H[?25l[30m[47m60[39;49m[32;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m1[39;49m[33;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m2[39;49m[34;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m3[39;49m[35;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m4[39;49m[36;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m5[39;49m[37;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m6[39;49m[38;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m8[39;49m[40;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m9[39;49m[41;1H[?12l[?25h[?12;25h[59;35H[?25l[30m[47m70[39;49m[42;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m1[39;49m[43;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m2[39;49m[44;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m3[39;49m[45;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m4[39;49m[46;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m5[39;49m[47;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m6[39;49m[48;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m8[39;49m[50;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m9[39;49m[51;1H[?12l[?25h[?12;25h[59;35H[?25l[30m[47m80[39;49m[52;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m1[39;49m[53;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m2[39;49m[54;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m3[39;49m[55;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m4[39;49m[56;1H[?12l[?25h[?12;25h[1;58r[2;1H[30M[1;60r[29;1H[?25l            [33minputdata[39;49m = h5py.File([36mfile[39;49m, [33m'r'[39;49m)[K
            [33mvalidevents[39;49m = validevents + inputdata[[33m'isGamma'[39;49m][:].tolist()[K
            [33mvalid2[39;49m = valid2 + inputdata[[33m'id'[39;49m][:].tolist()[K
            inputdata.close()[K
[K
        [36mwhile[39;49m [36mTrue[39;49m:[K
            [36mfor[39;49m [36mfile[39;49m [36min[39;49m filelist:[K
                [36mtry[39;49m:[K
                    [33minputdata[39;49m = h5py.File([36mfile[39;49m, [33m'r'[39;49m)[K
                [36mexcept[39;49m [33mOSError[39;49m:[K
                    [36mcontinue[39;49m[K
                [33mtrainarr[39;49m = np.asarray(inputdata[hexmethod][:, :, :, :])[K
                [33mlabelsarr[39;49m = np.asarray(inputdata[[33m'isGamma'[39;49m][:])[K
                [33midarr[39;49m = np.asarray(inputdata[[33m'id'[39;49m][:])[K
                [33mnofiles[39;49m = nofiles + 1[K
                inputdata.close()[K
                [33mnotrigs[39;49m=np.shape(trainarr)[0][K
[K
                [36mfor[39;49m x [36min[39;49m np.arange(np.shape(trainarr)[0]):[K
                    [33mchargevals[39;49m = [][K
                    [36mfor[39;49m y [36min[39;49m np.arange(4):[K
                        chargevals.append(np.[36msum[39;49m(trainarr[x,y,:,:]))[K
[K
                    [33mchargevals[39;49m = np.argsort(chargevals)[K
                    [33mchargevals[39;49m = np.flip(chargevals,axis=0) [31m#Flip to descending order.                                                                                                                                                                                                                                                                                      [39;49m
[A
                    [33mtrainarr[39;49m[x, :, :, :] = trainarr[x, chargevals, :, :][K
                [33mtraining_sample_count[39;49m = [36mlen[39;49m(trainarr)[K
                [33mbatches[39;49m = [36mint[39;49m(training_sample_count / batch_size)[K
                [33mremainder_samples[39;49m = training_sample_count % batch_size[K
                [33mi[39;49m = i + 1000[K
[C[30m[47m15% L88[39;49m[30;1H[?12l[?25h[?12;25h[59;35H[?25l[30m[47m90[39;49m[32;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m2[39;49m[34;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m3[39;49m[35;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m6[39;49m[38;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m8[39;49m[40;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m9[39;49m[41;1H[?12l[?25h[?12;25h[59;35H[?25l[30m[47m101[39;49m[43;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[45;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[46;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[47;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m7[39;49m[49;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[50;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m9[39;49m[51;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m10[39;49m[52;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[53;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m2[39;49m[54;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[55;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[56;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[57;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[A[?12l[?25h[?12;25h[1;58r[2;1H[29M[1;60r[30;1H[?25l                [33mcountarr[39;49m = np.arange(0, [36mlen[39;49m(labelsarr))[K
                [31m#trainarr = (trainarr-np.amin(trainarr,axis=0))/(np.amax(trainarr,axis=0)-np.amin(trainarr,axis=0))                                                                                                                                                                                                                                                         [39;49m
[A
                [36mif[39;49m remainder_samples:[K
                    [33mbatches[39;49m = batches + 1[K
                        [31m# generate batches of samples                                                                                                                                                                                                                                                                                                                       [39;49m
[A
                [36mfor[39;49m idx [36min[39;49m [36mlist[39;49m([36mrange[39;49m(0, batches)):[K
                    [36mif[39;49m idx == batches - 1:[K
                        [33mbatch_idxs[39;49m = countarr[idx * batch_size:][K
                    [36melse[39;49m:[K
                        [33mbatch_idxs[39;49m = countarr[idx *[K
                                              batch_size:idx *[K
                                              batch_size +[K
                                              batch_size][K
                    [33mX[39;49m = trainarr[batch_idxs][K
                    [33mX[39;49m = np.nan_to_num(X)[K
                    [33mY[39;49m = keras.utils.to_categorical([K
                        labelsarr[batch_idxs], num_classes=2)[K
                    [36myield[39;49m (np.array(X), np.array(Y))[K
[K
    [36mdef[39;49m [36mhardcode_train[39;49m():[K
        [33mhexmethod[39;49m=[33m'oversampling'[39;49m[K
        [33monlyfiles[39;49m = [36msorted[39;49m(glob.glob([33m'/mnt/extraspace/exet4487/Crab64080/*.hdf5'[39;49m))[K
        [33mbatch_size[39;49m=50[K
        [33m""" Generates training/test sequences on demand                                                                                                                                                                                                                                                                                                                     [39;49m
[A
[33m        """[39;49m[K
[K
        [33mnofiles[39;49m = 0[K
        [33mi[39;49m = 0  [31m# No. events loaded in total                                                                                                                                                                                                                                                                                                                                 [39;49m
[A
        [36mglobal[39;49m trainevents[K[59;30H[30m[47m22% L117[39;49m[30;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[31;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m20[39;49m[33;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[34;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m2[39;49m[35;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[36;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[37;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[38;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[39;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[41;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m30[39;49m[43;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m42[39;49m[55;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[56;1H[?12l[?25h[?12;25h[1;58r[2;1H[31M[1;60r[28;1H[?25l        [36mglobal[39;49m train2[K
        [33mtrainevents[39;49m=[][K
        [33mtrain2[39;49m=[][K
        [33mfilelist[39;49m = onlyfiles[:20][K
        [36mfor[39;49m [36mfile[39;49m [36min[39;49m filelist:[K
            [36mtry[39;49m:[K
                [33minputdata[39;49m = h5py.File([36mfile[39;49m, [33m'r'[39;49m)[K
            [36mexcept[39;49m [33mOSError[39;49m:[K
                [36mcontinue[39;49m[K
            [33mtrainevents[39;49m = trainevents + inputdata[[33m'isGamma'[39;49m][:].tolist()[K
            [33mtrain2[39;49m = train2 + inputdata[[33m'id'[39;49m][:].tolist()[K
            inputdata.close()[K
[K
        [36mwhile[39;49m [36mTrue[39;49m:[K
            [36mfor[39;49m [36mfile[39;49m [36min[39;49m filelist:[K
                [36mtry[39;49m:[K
                    [33minputdata[39;49m = h5py.File([36mfile[39;49m, [33m'r'[39;49m)[K
                [36mexcept[39;49m [33mOSError[39;49m:[K
                    [36mcontinue[39;49m[K
                [33mtrainarr[39;49m = np.asarray(inputdata[hexmethod][:, :, :, :])[K
                [33mlabelsarr[39;49m = np.asarray(inputdata[[33m'isGamma'[39;49m][:])[K
                [33midarr[39;49m = np.asarray(inputdata[[33m'id'[39;49m][:])[K
                [33mnofiles[39;49m = nofiles + 1[K
                inputdata.close()[K
                [33mnotrigs[39;49m=np.shape(trainarr)[0][K
[K
                [36mfor[39;49m x [36min[39;49m np.arange(np.shape(trainarr)[0]):[K
                    [33mchargevals[39;49m = [][K
                    [36mfor[39;49m y [36min[39;49m np.arange(4):[K
                        chargevals.append(np.[36msum[39;49m(trainarr[x,y,:,:]))[K
[K[59;30H[30m[47m33% L148[39;49m[30;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m50[39;49m[32;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[33;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m2[39;49m[34;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[35;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[36;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[37;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[38;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m7[39;49m[39;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[40;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m9[39;49m[41;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m60[39;49m[42;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[43;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m2[39;49m[44;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[45;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[46;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[47;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[48;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m9[39;49m[51;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m70[39;49m[52;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[53;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m2[39;49m[54;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[55;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[57;1H[?12l[?25h[?12;25h[1;57r[2;1H[29M[1;60r[29;1H[K
[?25l                    [33mchargevals[39;49m = np.argsort(chargevals)[K
                    [33mchargevals[39;49m = np.flip(chargevals,axis=0) [31m#Flip to descending order.                                                                                                                                                                                                                                                                                      [39;49m
[A
                    [33mtrainarr[39;49m[x, :, :, :] = trainarr[x, chargevals, :, :][K
[K
                [33mtraining_sample_count[39;49m = [36mlen[39;49m(trainarr)[K
                [33mbatches[39;49m = [36mint[39;49m(training_sample_count / batch_size)[K
                [33mremainder_samples[39;49m = training_sample_count % batch_size[K
                [33mi[39;49m = i + 1000[K
                [33mcountarr[39;49m = np.arange(0, [36mlen[39;49m(labelsarr))[K
[K
                [31m#            trainarr = (trainarr-np.amin(trainarr,axis=0))/(np.amax(trainarr,axis=0)-np.amin(trainarr,axis=0))                                                                                                                                                                                                                                             [39;49m
[A
                [36mif[39;49m remainder_samples:[K
                    [33mbatches[39;49m = batches + 1[K
[K
                [31m# generate batches of samples                                                                                                                                                                                                                                                                                                                               [39;49m
[A
                [36mfor[39;49m idx [36min[39;49m [36mlist[39;49m([36mrange[39;49m(0, batches)):[K
                    [36mif[39;49m idx == batches - 1:[K
                        [33mbatch_idxs[39;49m = countarr[idx * batch_size:][K
                    [36melse[39;49m:[K
                        [33mbatch_idxs[39;49m = countarr[idx *[K
                                              batch_size:idx *[K
                                              batch_size +[K
                                              batch_size][K
                    [33mX[39;49m = trainarr[batch_idxs][K
                    [33mX[39;49m = np.nan_to_num(X)[K
                    [33mY[39;49m = keras.utils.to_categorical([K
                        labelsarr[batch_idxs], num_classes=2)[K
                    [36myield[39;49m (np.array(X), np.array(Y))[K[59;30H[30m[47m41% L177[39;49m[30;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m81[39;49m[34;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m2[39;49m[35;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[36;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[37;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[38;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[39;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m7[39;49m[40;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[41;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m92[39;49m[45;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[47;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[48;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[49;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m7[39;49m[50;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[51;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m9[39;49m[52;1H[?12l[?25h[?12;25h[59;35H[?25l[30m[47m200[39;49m[53;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[54;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m2[39;49m[55;1H[?12l[?25h[?12;25h[1;57r[3;1H[31M[1;60r[2;1H[K[27d[K
[K
[?25l    [33mtrain_generator[39;49m=hardcode_train()[K
    [33mvalidation_generator[39;49m=hardcode_valid()[K
    [36mreturn[39;49m train_generator, validation_generator[K
[K
[36mdef[39;49m [36mcreate_model[39;49m(train_generator,validation_generator):[K
    [33minpshape[39;49m=([36mNone[39;49m,54,54,1)[K
    [33mstrategy[39;49m=tf.distribute.MirroredStrategy()[K
    [36mprint[39;49m([33m'Number of devices: {}'[39;49m.[36mformat[39;49m(strategy.num_replicas_in_sync))[K
    [36mwith[39;49m strategy.scope():[K
        [33mmodel[39;49m = Sequential()[K
        model.add(ConvLSTM2D(filters={{choice([10,20,30,40,50,60])}}, kernel_size={{choice([(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)])}},[K
                             input_shape=inpshape,[K
                             padding=[33m'same'[39;49m, return_sequences=[36mTrue[39;49m,kernel_regularizer=keras.regularizers.l2({{uniform(0,1)}}),dropout={{uniform(0,1)}},recurrent_dropout={{uniform(0,1)}}))[K
        model.add(BatchNormalization())[K
[K
        model.add(ConvLSTM2D(filters={{choice([10,20,30,40,50,60])}}, kernel_size={{choice([(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)])}},[K
                             padding=[33m'same'[39;49m, return_sequences=[36mTrue[39;49m,kernel_regularizer=keras.regularizers.l2({{uniform(0,1)}}),dropout={{uniform(0,1)}},recurrent_dropout={{uniform(0,1)}}))[K
        model.add(BatchNormalization())[K
[K
        model.add(ConvLSTM2D(filters={{choice([10,20,30,40,50,60])}}, kernel_size={{choice([(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)])}},[K
                             padding=[33m'same'[39;49m, return_sequences=[36mTrue[39;49m,,kernel_regularizer=keras.regularizers.l2({{uniform(0,1)}}),dropout={{uniform(0,1)}},recurrent_dropout={{uniform(0,1)}}))[K
        model.add(BatchNormalization())[K
        model.add(ConvLSTM2D(filters={{choice([10,20,30,40,50,60])}}, kernel_size={{choice([(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)])}},[K
                             padding=[33m'same'[39;49m, return_sequences=[36mTrue[39;49m,,kernel_regularizer=keras.regularizers.l2({{uniform(0,1)}}),dropout={{uniform(0,1)}},recurrent_dropout={{uniform(0,1)}}))[K
        model.add(BatchNormalization())[K
        [36mif[39;49m {{choice([[33m'four'[39;49m,[33m'five'[39;49m,[33m'six'[39;49m])}}==[33m'five'[39;49m:[K
            model.add(ConvLSTM2D(filters={{choice([10,20,30,40,50,60])}}, kernel_size={{choice([(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)])}},[K
                                 padding=[33m'same'[39;49m, return_sequences=[36mTrue[39;49m,,kernel_regularizer=keras.regularizers.l2({{uniform(0,1)}}),dropout={{uniform(0,1)}},recurrent_dropout={{uniform(0,1)}}))[K
            model.add(BatchNormalization())[K
	[36mif[39;49m {{choice([[33m'four'[39;49m,[33m'five'[39;49m,[33m'six'[39;49m])}}==[33m'six'[39;49m:[59;30H[30m[47m51% L208[39;49m[30;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m9[39;49m[31;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m14[39;49m[36;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[37;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[38;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m7[39;49m[39;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[40;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m9[39;49m[41;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m20[39;49m[42;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[43;1H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m0[39;49m[42;1H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m19[39;49m[41;1H[?12l[?25h[?12;25h[C[C[59;37H[?25l[30m[47m8[39;49m[40;51H[?12l[?25h[?12;25h[C[59;37H[?25l[30m[47m9[39;49m[41;51H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m20[39;49m[42;40H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[43;9H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m2[39;49m[44;51H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[45;51H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[46;40H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[47;9H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[48;51H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m7[39;49m[49;51H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[50;40H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m9[39;49m[51;51H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m30[39;49m[52;51H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[53;40H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m2[39;49m[54;51H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[55;51H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[56;51H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[57;44H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[58;51H[?12l[?25h[?12;25h[1;58r[2;1H[29M[1;60r[30;1H[?25l            model.add(ConvLSTM2D(filters={{choice([10,20,30,40,50,60])}}, kernel_size={{choice([(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)])}},[K
                                 padding=[33m'same'[39;49m, return_sequences=[36mTrue[39;49m,,kernel_regularizer=keras.regularizers.l2({{uniform(0,1)}}),dropout={{uniform(0,1)}},recurrent_dropout={{uniform(0,1)}}))[K
            model.add(BatchNormalization())[K
            model.add(ConvLSTM2D(filters={{choice([10,20,30,40,50,60])}}, kernel_size={{choice([(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)])}},[K
                                 padding=[33m'same'[39;49m, return_sequences=[36mTrue[39;49m,,kernel_regularizer=keras.regularizers.l2({{uniform(0,1)}}),dropout={{uniform(0,1)}},recurrent_dropout={{uniform(0,1)}}))[K
            model.add(BatchNormalization())[K
        model.add(GlobalAveragePooling3D())[K
        model.add(Dense({{choice([10,50,100,200])}},activation=[33m'relu'[39;49m))[K
        model.add(Dense(2, activation=[33m'softmax'[39;49m))[K
        [31m# Compile the model                                                                                                                                                                                                                                                                                                                                                 [39;49m
[A
        model.[36mcompile[39;49m(loss=[33m'binary_crossentropy'[39;49m,[K
                      optimizer=[33m'Adam'[39;49m,[K
                      metrics=[[33m'binary_accuracy'[39;49m])[K
        [33m'''early_stop = EarlyStopping(                                                                                                                                                                                                                                                                                                                                      [39;49m
[A
[33m        monitor='val_loss',                                                                                                                                                                                                                                                                                                                                                 [39;49m
[A
[33m        min_delta=0,                                                                                                                                                                                                                                                                                                                                                        [39;49m
[A
[33m        patience=10,                                                                                                                                                                                                                                                                                                                                                        [39;49m
[A
[33m        verbose=1,                                                                                                                                                                                                                                                                                                                                                          [39;49m
[A
[33m        mode='auto')'''[39;49m[K
[K
    [31m# Code for ensuring no contamination between training and test data.                                                                                                                                                                                                                                                                                                    [39;49m
[A
    [33mlentrain[39;49m=19574*2[K
    [33mlentruth[39;49m=19600[K
[31m# Train the network                                                                                                                                                                                                                                                                                                                                                         [39;49m
[A
    [33mhistory[39;49m = model.fit([K
        train_generator,[K
        steps_per_epoch=lentrain/50.0,[K
        epochs=15,[K
        verbose=0,[K[59;30H[30m[47m61% L237[39;49m[30;51H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[31;51H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m9[39;49m[32;44H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m40[39;49m[33;51H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[34;51H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m0[39;49m[33;51H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m39[39;49m[32;44H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[31;51H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m7[39;49m[30;51H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[29;51H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[28;44H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[27;51H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[26;51H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m2[39;49m[25;51H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[24;40H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m0[39;49m[23;51H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m29[39;49m[22;51H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[21;40H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m7[39;49m[20;51H[?12l[?25h[?12;25h[C[C[C[C		[C[C[C[C[C[C		[C[C[C[C[?25l[1P[59;6H[30m[47m**[39;49m[20;68H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[21;40H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m9[39;49m[22;68H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m30[39;49m[23;68H[?12l[?25h[?12;25h[?25l[1P[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[24;40H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m2[39;49m[25;54H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m3[39;49m[26;67H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m4[39;49m[27;67H[?12l[?25h[?12;25h[C[C[C[C	[?25l[1P[?12l[?25h[?12;25h[59;37H[?25l[30m[47m5[39;49m[28;44H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m6[39;49m[29;53H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m7[39;49m[30;71H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m8[39;49m[31;71H[?12l[?25h[?12;25h	[?25l[1P[?12l[?25h[?12;25h[59;37H[?25l[30m[47m9[39;49m[32;44H[?12l[?25h[?12;25h[59;36H[?25l[30m[47m40[39;49m[33;71H[?12l[?25h[?12;25h[59;37H[?25l[30m[47m1[39;49m[34;71H[?12l[?25h[?12;25h	[?25l[1P[?12l[?25h[?12;25h[60;1H[?25lSaving file /users/exet4487/getout_glamdring/hypertrain.py...[34;71H[?12l[?25h[?12;25h[60;1H[?25lWrote /users/exet4487/getout_glamdring/hypertrain.py[K[34;71H[?12l[?25h[?12;25h[59;6H[?25l[30m[47m--[39;49m[34;71H[?12l[?25h[?12;25h[60;1H[K[34;71H[60;1H[K[?1l>[?12l[?25h[?1049l[23;0;0t[39;49m(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m emacs ../getout_glamdring/hypertrain.py [13P./testhead.sh Crab64080opt1emacs ../getout_glamdring/hypertrain.py [Kgit add ../getout_glamdring/hypertrain.py 
fatal: not a git repository (or any parent up to mount point /mnt)
Stopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set).
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m cd ../getout_glamdring/
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m git add hypertrain.py 
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m git commit =[K-m 'First long run'
[master 560498d] First long run
 1 file changed, 6 insertions(+), 6 deletions(-)
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m git push
Username for 'https://github.com': STSpencer
Password for 'https://STSpencer@github.com': 
Counting objects: 3, done.
Delta compression using up to 12 threads.
Compressing objects:  33% (1/3)   Compressing objects:  66% (2/3)   Compressing objects: 100% (3/3)   Compressing objects: 100% (3/3), done.
Writing objects:  33% (1/3)   Writing objects:  66% (2/3)   Writing objects: 100% (3/3)   Writing objects: 100% (3/3), 355 bytes | 355.00 KiB/s, done.
Total 3 (delta 2), reused 0 (delta 0)
remote: Resolving deltas:   0% (0/2)[Kremote: Resolving deltas:  50% (1/2)[Kremote: Resolving deltas: 100% (2/2)[Kremote: Resolving deltas: 100% (2/2), completed with 2 local objects.[K
To https://github.com/STSpencer/getout_glamdring.git
   2605593..560498d  master -> master
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m cd ../hyer[K[K[K[Ka[Klaunchpad/
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m ./testhead.sh Crab64080opt1
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m 
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m 
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m cd ../[K[K[K[K[K[Kk[Kwatch -n0.1 l[Kls -trghl ../getout_glamdring/
[?1049h[22;0;0t[1;60r(B[m[4l[?7h[H[2JEvery 0.1s: ls -trghl ../getout_glamdring/[1;330Hglamdring: Mon Sep 21 12:46:37 2020[3;1Htotal 98K[4d-rw-rw-r-- 1 exet4487   98 Jul 22 12:45 README.md[5d-rw-rw-r-- 1 exet4487  16K Jul 28 10:30 net_utils.py[6ddrwxrwxr-x 2 exet4487    5 Aug  5 12:24 submit[7d-rw-rw-r-- 1 exet4487  13K Sep 14 11:49 temp_model.py[8ddrwxrwxr-x 2 exet4487    3 Sep 14 11:49 __pycache__[9d-rw-rw-r-- 1 exet4487 1.1K Sep 21 12:24 best_model.py[10d-rw-rw-r-- 1 exet4487  14K Sep 21 12:45 hypertrain.py[11d-rw-rw-r-- 1 exet4487 100K Sep 21 12:46 screenlog.0[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[11;25H1[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[7d[2M[1;359H6[10d-rw-rw-r-- 1 exet4487  15K Sep 21 12:46 temp_model.py[11ddrwxrwxr-x 2 exet4487    3 Sep 21 12:46 __pycache__[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[60;1H[?1049l[23;0;0t[?1l>(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m ./submitjobs.sh Crab64080opt1
Disabling MPI - so only running 1 copy of your program.
Sending program's output to file: /users/exet4487/launchpad/testlaunch.sh-201398.out
Job submission complete.

Disabling MPI - so only running 1 copy of your program.
Sending program's output to file: /users/exet4487/launchpad/testlaunch.sh-201399.out
Job submission complete.

Disabling MPI - so only running 1 copy of your program.
Sending program's output to file: /users/exet4487/launchpad/testlaunch.sh-201400.out
Job submission complete.

Disabling MPI - so only running 1 copy of your program.
Sending program's output to file: /users/exet4487/launchpad/testlaunch.sh-201401.out
Job submission complete.

Disabling MPI - so only running 1 copy of your program.
Sending program's output to file: /users/exet4487/launchpad/testlaunch.sh-201402.out
Job submission complete.

[?1049h[22;0;0t[1;60r(B[m[4l[?7h[H[2JEvery 0.1s: q[1;330Hglamdring: Mon Sep 21 12:48:05 2020[3;3HJobNum  Status[3;30HName[40GJob Name[3;68HCores used/reserved[93GGB  IO (r/w mbps)    Runtime/Q time    Comment[4d--------  -----------------  --------  --------------------------  ---------------------  ----  ---------------  ----------------  ---------[5;3H201398  Q (# 49)(gpulong)  exet4487  launchpad/testlaunch.sh.sh  1x8[5;93H24  0.1 mins[5;114Hnocomment[6;3H201399  Q (# 50)(gpulong)  exet4487  launchpad/testlaunch.sh.sh  1x8[6;93H24  0.1 mins[6;114Hnocomment[7;3H201400  Q (# 51)(gpulong)  exet4487  launchpad/testlaunch.sh.sh  1x4[7;93H12  0.1 mins[7;114Hnocomment[8;3H201401  Q (# 52)(gpulong)  exet4487  launchpad/testlaunch.sh.sh  1x4[8;93H12  0.1 mins[8;114Hnocomment[10d╒═══════════════════════╤══════════╤═════════════╤══════════╤═══════════╤═══════════╤═════════════╕[11d│ cores free in queue   │ NORMAL   │ BLACKHOLE   │ PLANET   │ CMB[73G│ BERG[85G│ GPULONG     │[12d╞═══════════════════════╪══════════╪═════════════╪══════════╪═══════════╪═══════════╪═════════════╡[13d│[13;25H│ 32 / 40  │ 64 / 80     │ 66 / 96  │ 104 / 488 │ 142 / 448 │ 4 / 5 nodes │[14d╘═══════════════════════╧══════════╧═════════════╧══════════╧═══════════╧═══════════╧═════════════╛[15dYou can use the command "n" ("n -t" for text-only) to list cores/GB availability on the compute nodes.[60;364H[7d[L[1;359H6[3;68H          Cores used/reserved    GB       IO (r/w mbps)    Runtime/Q time    Comment     Nodes List[4;66H--[4;76H  [4;89H----------  [108G  ----[4;125H  -----[4;141H--  ----------  ------------[5;11HRUNNING [5;40Hexet4487/testlaunch.sh Crab64080opt1  ?? / 1x8[93G        ?? / 24   ??[14X[5;127H0.1 mins[5;145Hnocomment   gpu01(8)[6;16H49[6;68H   [78G1x8[6;93H        24.0     0.1 mins         nocomment[7;3H201400  Q (# 50)(gpulong)  exet4487  launchpad/testlaunch.sh.sh[7;78H1x4[7;101H12.0     0.1 mins[7;127Hnocomment[8;8H1[8;68H   [78G1x4[8;93H        12.0     0.1 mins         nocomment[9;8H2[9;68H   [78G1x8[9;93H        24.0     0.1 mins         nocomment[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[6;112H2[14;87H3[60;364H[1;358H11[5;129H2[7;112H2[8d2[60;364H[1;359H2[6;11HRUNNING [6;40Hexet4487/testlaunch.sh Crab64080opt1  ?? / 1x8[6;101H?? / 24   ??     [6;127H0.1 mins [6;145Hnocomment   gpu02(8)[7;16H49[8d0[9d1[9;112H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[5;129H3[7;112H3[8d3[60;364H[1;359H8[6;129H2[9;112H3[14;87H2[60;364H[1;359H9[60;364H[1;358H20[7;11HRUNNING [7;40Hexet4487/testlaunch.sh Crab64080opt1  ?? / 1x4[7;101H?? / 12   ??     [7;127H0.1 mins [7;145Hnocomment   gpu03(4)[8;16H49[9d0[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[5;129H4[6d3[8;112H4[9d4[60;364H[1;359H5[60;364H[1;359H6[7;129H2[14;87H1[60;364H[1;359H7[60;364H[1;359H8[5;129H5[8;11HRUNNING [8;40Hexet4487/testlaunch.sh Crab64080opt1  ?? / 1x4[8;101H?? / 12   ??     [8;127H0.1 mins [8;145Hnocomment   gpu04(4)[9;16H49[60;364H[1;358H30[6;129H4[9;112H5[60;364H[1;359H1[3;103H[110G IO (r/w mbps)    Runtime/Q time    Comment     Nodes List[4;101H[108G-  [4;125H-  [4;143H-  [4;155H-  [4;169H-[5;78H0.0 / 1x8[5;101H1.0 / 24  ~ 0[5;127H 0.5 mins[5;145H nocomment   gpu01(8)[6;78H0.0 / 1x8[6;101H2.5 / 24  ~ 0[6;127H 0.4 mins[6;145H nocomment   gpu02(8)[7;78H0.0 / 1x4[7;101H0.4 / 12  ~ 0[7;127H 0.3 mins[7;145H nocomment   gpu03(4)[8;108H    ??[8;127H 0.1 mins[8;145H nocomment   gpu04(4)[9;105H      0.5 mins[9;127H nocomment[14;87H0[60;364H[1;359H4[8;130H2[9;11HRUNNING [9;40Hexet4487/testlaunch.sh Crab64080opt1  ?? / 1x8[9;101H?? / 24    ??     [9;128H0.1 mins [9;146Hnocomment   gpu05(8)[60;364H[1;359H5[5;130H6[6d5[60;364H[1;359H7[7;130H4[60;364H[1;359H9[60;364H[1;358H41[5;130H7[8d3[9d2[60;364H[1;359H3[6;130H6[60;364H[1;359H4[7;130H5[60;364H[1;359H5[8;130H4[9d3[60;364H[1;359H7[5;130H8[60;364H[1;359H8[6;130H7[60;364H[1;358H50[7;130H6[60;364H[1;359H2[8;130H5[9d4[60;364H[1;359H3[5;130H9[6d8[60;364H[1;359H5[7;130H7[60;364H[1;359H7[60;364H[1;359H9[5;128H1.0[8d6[9d5[60;364H[1;356H9:00[6;130H9[60;364H[1;359H1[60;364H[1;359H2[7;130H8[60;364H[1;359H4[8;130H7[9d6[60;364H[1;359H5[5;130H1[60;364H[1;359H6[6;128H1.0[60;364H[1;359H7[60;364H[1;359H8[7;130H9[60;364H[1;359H9[60;364H[1;358H10[5;130H2[8d8[9d7[60;364H[1;359H2[6;130H1[60;364H[1;359H3[60;364H[1;359H4[7;128H1.0[60;364H[1;359H5[60;364H[1;359H6[8;130H9[9d8[60;364H[1;359H7[5;130H3[60;364H[1;359H9[6;130H2[60;364H[1;358H20[7;130H1[60;364H[1;359H1[60;364H[1;359H2[8;128H1.0[9d9[60;364H[1;359H3[5;130H4[60;364H[1;359H4[6;130H3[60;364H[1;359H6[7;130H2[60;364H[1;359H7[60;364H[1;359H8[8;130H1[9;128H1.0[60;364H[1;359H9[5;130H5[60;364H[1;358H30[6;130H4[60;364H[1;359H2[7;130H3[60;364H[1;359H3[5;78H1.5[5;101H4[5;111H23.2/0[6;78H1.8[6;101H4.0[111G34.9/0[7;78H1.4[7;101H4.0[111G34.8/0[8;78H0.0 / 1x4[8;101H0.1 / 12  ~ 0[9;78H0.0 / 1x8[9;101H3.9 / 24  ~ 0[60;364H[1;359H4[8;130H2[9d1[60;364H[1;359H5[5;130H6[60;364H[1;359H6[6;130H5[60;364H[1;359H7[7;130H4[60;364H[1;359H9[60;364H[1;358H40[8;130H3[9d2[60;364H[1;359H1[5;130H7[60;364H[1;359H2[6;130H6[60;364H[1;359H3[60;364H[1;359H5[7;130H5[60;364H[1;359H6[8;130H4[9d3[60;364H[1;359H7[5;130H8[60;364H[1;359H8[6;130H7[60;364H[1;358H50[7;130H6[60;364H[1;359H1[60;364H[1;359H2[8;130H5[9d4[60;364H[1;359H3[5;130H9[60;364H[1;359H5[6;130H8[60;364H[1;359H6[7;130H7[60;364H[1;359H7[60;364H[1;359H8[8;130H6[9d5[60;364H[1;359H9[5;128H2.0[60;364H[1;355H50:01[6;130H9[60;364H[1;359H2[7;130H8[60;364H[1;359H3[60;364H[1;359H4[8;130H7[9d6[60;364H[1;359H6[5;130H1[6;128H2.0[60;364H[1;359H7[60;364H[1;359H8[7;130H9[60;364H[1;359H9[60;364H[1;358H11[5;130H2[8d8[9d7[60;364H[1;359H2[6;130H1[60;364H[1;359H3[60;364H[1;359H4[7;128H2.0[60;364H[1;359H5[8;130H9[9d8[60;364H[1;359H7[5;130H3[60;364H[1;359H8[6;130H2[60;364H[1;359H9[60;364H[1;358H20[7;130H1[60;364H[1;359H2[8;128H2.0[9d9[60;364H[1;359H3[5;130H4[60;364H[1;359H4[6;130H3[60;364H[1;359H5[60;364H[1;359H6[7;130H2[60;364H[1;359H8[8;130H1[9;128H2.0[60;364H[1;359H9[5;130H5[60;364H[1;358H30[6;130H4[60;364H[1;359H1[60;364H[1;359H2[7;130H3[60;364H[1;359H4[5;80H9[5;111H46.5[6;78H2.0[6;111H46.5[7;80H6[7;114H9[8;80H2[8;101H2.8[111G11.5/0.1[8;130H2[9;78H1.9[9;111H46.5/0[9;130H1[60;364H[1;359H5[5;130H6[60;364H[1;359H6[6;130H5[60;364H[1;359H7[60;364H[1;359H8[7;130H4[60;364H[1;358H40[8;130H3[9d2[60;364H[1;359H1[5;130H7[60;364H[1;359H2[6;130H6[60;364H[1;359H3[60;364H[1;359H5[7;130H5[60;364H[1;359H6[8;130H4[9d3[60;364H[1;359H7[5;130H8[60;364H[1;359H8[6;130H7[60;364H[1;358H50[7;130H6[60;364H[1;359H1[60;364H[1;359H2[8;130H5[9d4[60;364H[1;359H3[5;130H9[60;364H[1;359H4[6;130H8[60;364H[1;359H6[7;130H7[60;364H[1;359H7[60;364H[1;359H8[8;130H6[9d5[60;364H[1;359H9[5;128H3.0[60;364H[1;356H1:01[6;130H9[60;364H[1;359H2[7;130H8[60;364H[1;359H3[60;364H[1;359H4[8;130H7[9d6[60;364H[1;359H6[5;130H1[6;128H3.0[60;364H[1;359H7[60;364H[1;359H8[7;130H9[60;364H[1;359H9[60;364H[1;358H10[5;130H2[8d8[9d7[60;364H[1;359H2[6;130H1[60;364H[1;359H3[60;364H[1;359H4[7;128H3.0[60;364H[1;359H5[60;364H[1;359H7[5;130H3[8d9[9d8[60;364H[1;359H8[6;130H2[60;364H[1;359H9[60;364H[1;358H20[7;130H1[60;364H[1;359H1[60;364H[1;359H3[5;130H4[8;128H3.0[9d9[60;364H[1;359H4[6;130H3[60;364H[1;359H5[60;364H[1;359H6[7;130H2[60;364H[1;359H8[8;130H1[9;128H3.0[60;364H[1;359H9[5;130H5[60;364H[1;358H30[6;130H4[60;364H[60;1H[?1049l[23;0;0t[?1l>(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m cc[Kd ../logs/
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m ls -trhgl
total 622K
-rw-rw-r-- 1 exet4487  50K Jul 30 17:38 hyperasglamdringtest8log.txt
-rw-rw-r-- 1 exet4487  26K Jul 31 12:37 hypertrain8v2.txt
-rw-rw-r-- 1 exet4487    0 Jul 31 17:11 hypertrain3.txt
-rw-rw-r-- 1 exet4487  27K Jul 31 17:29 hypertrain8v3.txt
-rw-rw-r-- 1 exet4487  180 Aug 23 22:42 stresstest1_log.txt
-rw-rw-r-- 1 exet4487  174 Aug 23 22:49 _log.txt
-rw-rw-r-- 1 exet4487  174 Aug 23 22:49 1_log.txt
-rw-rw-r-- 1 exet4487  14K Aug 23 22:52 stresstest2_log.txt
-rw-rw-r-- 1 exet4487    0 Aug 23 22:52 stresstest3_log.txt
-rw-rw-r-- 1 exet4487  14K Aug 23 22:54 stresstest4_log.txt
-rw-rw-r-- 1 exet4487  18K Aug 25 12:37 screentest5_log.txt
-rw-rw-r-- 1 exet4487  18K Aug 29 06:37 crashtest1_log.txt
-rw-rw-r-- 1 exet4487  16K Sep  1 09:21 crashtest2_log.txt
-rw-rw-r-- 1 exet4487  18K Sep  2 21:07 crashtest3_log.txt
-rw-rw-r-- 1 exet4487  19K Sep  5 04:20 crashtest4_log.txt
-rw-rw-r-- 1 exet4487  44K Sep  6 19:55 crashtest5_log.txt
-rw-rw-r-- 1 exet4487  44K Sep  9 03:49 crashtest6_log.txt
-rw-rw-r-- 1 exet4487  15K Sep  9 14:48 crashtest7_log.txt
-rw-rw-r-- 1 exet4487  14K Sep  9 18:02 crashtest8_log.txt
-rw-rw-r-- 1 exet4487  14K Sep 10 09:48 longtest1_log.txt
-rw-rw-r-- 1 exet4487  14K Sep 10 09:53 longtest2_log.txt
-rw-rw-r-- 1 exet4487  14K Sep 10 10:12 longtest5_log.txt
-rw-rw-r-- 1 exet4487  14K Sep 10 10:21 screentest6_log.txt
-rw-rw-r-- 1 exet4487  26K Sep 14 10:19 longtest7_log.txt
-rw-rw-r-- 1 exet4487 158K Sep 20 17:56 longtest8_log.txt
-rw-rw-r-- 1 exet4487  16K Sep 21 12:47 Crab64080opt1_log.txt
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m tail -f Crab64080opt1_log.txt 
  69:     model.save('/users/exet4487/hypermodels/'+str(modelnumber)+str(modelcode)+'.h5')
  70:     # optionally store a dump of your model here so you can get it from the database later                                                                                                   
  71:     temp_name = tempfile.gettempdir()+'/'+modelnumber + '.h5'
  72:     model.save(temp_name)
  73:     #with open(temp_name, 'rb') as infile:
  74:     #model_bytes = infile.read()
  75:     #out['model_serial'] = model_bytes
  76:     return out
  77: 
  0%|          | 0/500 [00:00<?, ?trial/s, best loss=?]^C
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m ls -trhgl
total 622K
-rw-rw-r-- 1 exet4487  50K Jul 30 17:38 hyperasglamdringtest8log.txt
-rw-rw-r-- 1 exet4487  26K Jul 31 12:37 hypertrain8v2.txt
-rw-rw-r-- 1 exet4487    0 Jul 31 17:11 hypertrain3.txt
-rw-rw-r-- 1 exet4487  27K Jul 31 17:29 hypertrain8v3.txt
-rw-rw-r-- 1 exet4487  180 Aug 23 22:42 stresstest1_log.txt
-rw-rw-r-- 1 exet4487  174 Aug 23 22:49 _log.txt
-rw-rw-r-- 1 exet4487  174 Aug 23 22:49 1_log.txt
-rw-rw-r-- 1 exet4487  14K Aug 23 22:52 stresstest2_log.txt
-rw-rw-r-- 1 exet4487    0 Aug 23 22:52 stresstest3_log.txt
-rw-rw-r-- 1 exet4487  14K Aug 23 22:54 stresstest4_log.txt
-rw-rw-r-- 1 exet4487  18K Aug 25 12:37 screentest5_log.txt
-rw-rw-r-- 1 exet4487  18K Aug 29 06:37 crashtest1_log.txt
-rw-rw-r-- 1 exet4487  16K Sep  1 09:21 crashtest2_log.txt
-rw-rw-r-- 1 exet4487  18K Sep  2 21:07 crashtest3_log.txt
-rw-rw-r-- 1 exet4487  19K Sep  5 04:20 crashtest4_log.txt
-rw-rw-r-- 1 exet4487  44K Sep  6 19:55 crashtest5_log.txt
-rw-rw-r-- 1 exet4487  44K Sep  9 03:49 crashtest6_log.txt
-rw-rw-r-- 1 exet4487  15K Sep  9 14:48 crashtest7_log.txt
-rw-rw-r-- 1 exet4487  14K Sep  9 18:02 crashtest8_log.txt
-rw-rw-r-- 1 exet4487  14K Sep 10 09:48 longtest1_log.txt
-rw-rw-r-- 1 exet4487  14K Sep 10 09:53 longtest2_log.txt
-rw-rw-r-- 1 exet4487  14K Sep 10 10:12 longtest5_log.txt
-rw-rw-r-- 1 exet4487  14K Sep 10 10:21 screentest6_log.txt
-rw-rw-r-- 1 exet4487  26K Sep 14 10:19 longtest7_log.txt
-rw-rw-r-- 1 exet4487 158K Sep 20 17:56 longtest8_log.txt
-rw-rw-r-- 1 exet4487  16K Sep 21 12:47 Crab64080opt1_log.txt
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m ls -trhgltail -f Crab64080opt1_log.txt 
  69:     model.save('/users/exet4487/hypermodels/'+str(modelnumber)+str(modelcode)+'.h5')
  70:     # optionally store a dump of your model here so you can get it from the database later                                                                                                   
  71:     temp_name = tempfile.gettempdir()+'/'+modelnumber + '.h5'
  72:     model.save(temp_name)
  73:     #with open(temp_name, 'rb') as infile:
  74:     #model_bytes = infile.read()
  75:     #out['model_serial'] = model_bytes
  76:     return out
  77: 
  0%|          | 0/500 [00:00<?, ?trial/s, best loss=?]^C
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m q
  JobNum  Status             Name      Job Name                              Cores used/reserved    GB        IO (r/w mbps)    Runtime/Q time    Comment     Nodes List
--------  -----------------  --------  ------------------------------------  ---------------------  --------  ---------------  ----------------  ----------  ------------
  201398  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.9 / 1x8              4.0 / 24  34.9/0           3.9 mins          nocomment   gpu01(8)
  201399  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  2.0 / 1x8              4.0 / 24  34.9/0           3.8 mins          nocomment   gpu02(8)
  201400  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.6 / 1x4              4.0 / 12  46.5/0           3.6 mins          nocomment   gpu03(4)
  201401  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  0.2 / 1x4              5.5 / 12  23.1/0.2         3.5 mins          nocomment   gpu04(4)
  201402  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.8 / 1x8              3.9 / 24  46.5/0           3.4 mins          nocomment   gpu05(8)

╒═══════════════════════╤══════════╤═════════════╤══════════╤═══════════╤═══════════╤═════════════╕
│ cores free in queue   │ NORMAL   │ BLACKHOLE   │ PLANET   │ CMB       │ BERG      │ GPULONG     │
╞═══════════════════════╪══════════╪═════════════╪══════════╪═══════════╪═══════════╪═════════════╡
│                       │ 32 / 40  │ 64 / 80     │ 66 / 96  │ 104 / 488 │ 142 / 448 │ 0 / 5 nodes │
╘═══════════════════════╧══════════╧═════════════╧══════════╧═══════════╧═══════════╧═════════════╛
You can use the command "n" ("n -t" for text-only) to list cores/GB availability on the compute nodes.
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m l[Kwatch -n0.1 q
[?1049h[22;0;0t[1;60r(B[m[4l[?7h[H[2JEvery 0.1s: q[1;330Hglamdring: Mon Sep 21 12:52:00 2020[3;3HJobNum  Status[3;30HName[40GJob Name[3;78HCores used/reserved    GB[3;111HIO (r/w mbps)    Runtime/Q time    Comment     Nodes List[4d--------  -----------------  --------  ------------------------------------  ---------------------  --------  ---------------  ----------------  ----------  ------------[5;3H201398  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.9 / 1x8[5;101H4.0 / 24  34.9/0[5;128H4.0 mins[5;146Hnocomment   gpu01(8)[6;3H201399  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  2.0 / 1x8[6;101H4.0 / 24  34.9/0[6;128H3.9 mins[6;146Hnocomment   gpu02(8)[7;3H201400  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.6 / 1x4[7;101H4.0 / 12  46.5/0[7;128H3.7 mins[7;146Hnocomment   gpu03(4)[8;3H201401  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  0.2 / 1x4[8;101H5.5 / 12  23.1/0.2[8;128H3.6 mins[8;146Hnocomment   gpu04(4)[9;3H201402  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.8 / 1x8[9;101H3.9 / 24  46.5/0[9;128H3.5 mins[9;146Hnocomment   gpu05(8)[11d╒═══════════════════════╤══════════╤═════════════╤══════════╤═══════════╤═══════════╤═════════════╕[12d│ cores free in queue   │ NORMAL   │ BLACKHOLE   │ PLANET   │ CMB[73G│ BERG[85G│ GPULONG     │[13d╞═══════════════════════╪══════════╪═════════════╪══════════╪═══════════╪═══════════╪═════════════╡[14d│[14;25H│ 32 / 40  │ 64 / 80     │ 66 / 96  │ 104 / 488 │ 142 / 448 │ 0 / 5 nodes │[15d╘═══════════════════════╧══════════╧═════════════╧══════════╧═══════════╧═══════════╧═════════════╛[16dYou can use the command "n" ("n -t" for text-only) to list cores/GB availability on the compute nodes.[60;364H[1;359H2[7;130H8[60;364H[1;359H3[60;364H[1;359H4[8;130H7[9d6[60;364H[1;359H5[5;130H1[60;364H[1;359H6[6;128H4.0[60;364H[1;359H8[7;130H9[60;364H[1;359H9[60;364H[1;358H10[8;130H8[9d7[60;364H[1;359H1[5;130H2[6d1[60;364H[1;359H3[60;364H[1;359H4[7;128H4.0[60;364H[1;359H5[60;364H[1;359H7[5;130H3[8d9[9d8[60;364H[1;359H8[6;130H2[60;364H[1;359H9[60;364H[1;358H20[7;130H1[60;364H[1;359H2[8;128H4.0[9d9[60;364H[1;359H3[5;130H4[60;364H[1;359H4[6;130H3[60;364H[1;359H5[60;364H[1;359H7[7;130H2[60;364H[1;359H8[8;130H1[9;128H4.0[60;364H[1;359H9[5;130H5[60;364H[1;358H30[6;130H4[60;364H[1;359H2[7;130H3[60;364H[1;359H3[60;364H[1;359H4[8;130H2[9d1[60;364H[1;359H5[5;111H46.5[5;130H6[6;111H46.5[7;111H34.9[8;111H11.5[60;364H[1;359H7[6;130H5[60;364H[1;359H8[7;130H4[60;364H[1;359H9[60;364H[1;358H40[8;130H3[9d2[60;364H[1;359H2[5;130H7[6d6[60;364H[1;359H3[60;364H[1;359H4[7;130H5[60;364H[1;359H5[60;364H[1;359H6[5;130H8[8d4[9d3[60;364H[1;359H8[6;130H7[60;364H[1;359H9[60;364H[1;358H50[7;130H6[60;364H[1;359H1[60;364H[1;359H3[5;130H9[8d5[9d4[60;364H[1;359H4[6;130H8[60;364H[1;359H5[60;364H[1;359H6[7;130H7[60;364H[1;359H7[8;130H6[9d5[60;364H[1;359H9[5;128H5.0[60;364H[1;356H3:00[6;130H9[60;364H[1;359H1[60;364H[1;359H2[7;130H8[60;364H[1;359H4[8;130H7[9d6[60;364H[1;359H5[5;130H1[60;364H[1;359H6[6;128H5.0[60;364H[1;359H7[60;364H[1;359H8[7;130H9[60;364H[1;359H9[8;130H8[9d7[60;364H[1;358H11[5;130H2[60;364H[1;359H2[6;130H1[60;364H[1;359H3[60;364H[1;359H4[7;128H5.0[60;364H[1;359H6[8;130H9[9d8[60;364H[1;359H7[5;130H3[60;364H[1;359H8[6;130H2[60;364H[1;359H9[60;364H[1;358H20[7;130H1[60;364H[1;359H2[8;128H5.0[9d9[60;364H[1;359H3[5;130H4[60;364H[1;359H4[6;130H3[60;364H[1;359H5[60;364H[1;359H7[7;130H2[60;364H[1;359H8[8;130H1[9;128H5.0[60;364H[1;359H9[5;130H5[60;364H[1;358H30[6;130H4[60;364H[1;359H1[7;130H3[60;364H[1;359H3[60;364H[1;359H4[8;130H2[9d1[60;364H[1;359H5[5;130H6[60;364H[1;359H6[5;111H34.9[6;130H5[8;101H8.3[111G23.1/0.3[60;364H[1;359H8[7;130H4[60;364H[1;359H9[60;364H[1;358H40[8;130H3[9d2[60;364H[1;359H2[5;130H7[6d6[60;364H[1;359H3[60;364H[1;359H4[7;130H5[60;364H[1;359H5[60;364H[1;359H7[5;130H8[8d4[9d3[60;364H[1;359H8[6;130H7[60;364H[1;359H9[60;364H[1;358H50[7;130H6[60;364H[1;359H1[60;364H[1;359H3[5;130H9[8d5[9d4[60;364H[1;359H4[6;130H8[60;364H[1;359H5[60;364H[1;359H6[7;130H7[60;364H[1;359H8[8;130H6[9d5[60;364H[1;359H9[5;128H6.0[60;364H[1;356H4:00[6;130H9[60;364H[1;359H1[60;364H[1;359H3[7;130H8[60;364H[1;359H4[8;130H7[9d6[60;364H[1;359H5[5;130H1[60;364H[1;359H6[6;128H6.0[60;364H[1;359H7[60;364H[1;359H8[7;130H9[60;364H[1;358H10[8;130H8[9d7[60;364H[1;359H1[5;130H2[60;364H[1;359H2[6;130H1[60;364H[1;359H3[7;128H6.0[60;364H[1;359H5[60;364H[1;359H6[8;130H9[9d8[60;364H[1;359H7[5;130H3[60;364H[1;359H8[6;130H2[60;364H[1;359H9[7;130H1[60;364H[1;358H21[60;364H[1;359H2[8;128H6.0[9d9[60;364H[1;359H3[5;130H4[60;364H[1;359H4[6;130H3[60;364H[1;359H6[7;130H2[60;364H[1;359H7[60;364H[1;359H8[8;130H1[9;128H6.0[60;364H[1;359H9[5;130H5[6d4[60;364H[1;358H31[60;364H[1;359H2[7;130H3[60;364H[1;359H3[60;364H[1;359H4[8;130H2[9d1[60;364H[1;359H6[5;130H6[6d5[60;364H[1;359H7[6;78H1.1[6;111H128.0/0[7;111H46.5[8;78H1 / 1x4  [8;101H5.6[111G46.5/0.1[9;80H4[9;111H81.4[60;364H[1;359H8[7;130H4[60;364H[1;359H9[60;364H[1;358H40[5;130H7[8d3[9d2[60;364H[1;359H2[6;130H6[60;364H[1;359H3[60;364H[1;359H4[7;130H5[60;364H[1;359H5[60;364H[1;359H7[5;130H8[8d4[9d3[60;364H[1;359H8[6;130H7[60;364H[1;359H9[60;364H[1;358H50[7;130H6[60;364H[1;359H2[8;130H5[9d4[60;364H[1;359H3[5;130H9[60;364H[1;359H4[6;130H8[60;364H[1;359H5[60;364H[1;359H7[7;130H7[60;364H[1;359H8[8;130H6[9d5[60;364H[1;359H9[5;128H7.0[60;364H[1;356H5:00[6;130H9[60;364H[1;359H1[7;130H8[60;364H[1;359H3[60;364H[1;359H4[8;130H7[9d6[60;364H[1;359H5[5;130H1[60;364H[1;359H6[6;128H7.0[60;364H[1;359H8[7;130H9[60;364H[1;359H9[60;364H[1;358H10[8;130H8[9d7[60;364H[1;359H1[5;130H2[6d1[60;364H[1;359H3[60;364H[1;359H4[7;128H7.0[60;364H[1;359H5[60;364H[1;359H6[8;130H9[9d8[60;364H[1;359H8[5;130H3[6d2[60;364H[1;359H9[60;364H[1;358H20[7;130H1[60;364H[1;359H1[60;364H[1;359H2[5;130H4[8;128H7.0[9d9[60;364H[1;359H4[6;130H3[60;364H[1;359H5[60;364H[1;359H6[7;130H2[60;364H[1;359H7[60;364H[1;359H8[5;130H5[8d1[9;128H7.0[60;364H[1;358H30[6;130H4[60;364H[1;359H1[60;364H[1;359H2[7;130H3[60;364H[1;359H3[60;364H[1;359H4[5;130H6[8d2[9d1[60;364H[1;359H6[6;130H5[60;364H[1;359H7[60;364H[1;359H8[5;80H1[5;111H116.3/0[6;78H2.0[6;111H46.4/0 [7;79H / 1x4  [7;111H116.3/0[7;130H4[9;114H3[60;364H[1;359H9[60;364H[1;358H40[8;130H3[9d2[60;364H[1;359H1[5;130H7[6d6[60;364H[1;359H3[60;364H[1;359H4[7;130H5[60;364H[1;359H5[60;364H[1;359H6[8;130H4[9d3[60;364H[1;359H8[5;130H8[6d7[60;364H[1;359H9[60;364H[1;358H50[7;130H6[60;364H[1;359H1[60;364H[1;359H2[8;130H5[9d4[60;364H[1;359H3[5;130H9[6d8[60;364H[1;359H5[60;364H[1;359H6[7;130H7[60;364H[1;359H7[60;364H[1;359H8[8;130H6[9d5[60;364H[1;359H9[5;128H8.0[6d9[60;364H[1;356H6:01[60;364H[1;359H2[7;130H8[60;364H[1;359H3[60;364H[1;359H4[8;130H7[9d6[60;364H[1;359H6[5;130H1[6;128H8.0[60;364H[1;359H7[60;364H[1;359H8[7;130H9[60;364H[1;359H9[60;364H[1;358H10[5;130H2[8d8[9d7[60;364H[1;359H2[6;130H1[60;364H[1;359H3[60;364H[1;359H4[7;128H8.0[60;364H[1;359H5[60;364H[1;359H7[5;130H3[8d9[9d8[60;364H[1;359H8[6;130H2[60;364H[1;359H9[60;364H[1;358H20[7;130H1[60;364H[1;359H2[8;128H8.0[9d9[60;364H[1;359H3[5;130H4[60;364H[1;359H4[6;130H3[60;364H[1;359H5[60;364H[1;359H7[7;130H2[60;364H[1;359H8[8;130H1[9;128H8.0[60;364H[1;359H9[5;130H5[60;364H[1;358H30[6;130H4[60;364H[1;359H1[7;130H3[60;364H[1;359H3[60;364H[1;359H4[8;130H2[9d1[60;364H[1;359H5[5;130H6[60;364H[1;359H6[6;130H5[60;364H[1;359H8[7;130H4[60;364H[1;359H9[5;80H8[5;111H46.4/0 [6;114H5[7;79H.6 / 1x4[7;111H46.4/0 [8;101H2.8[111G58.1/0  [9;80H8[9;111H46.5[60;364H[1;358H40[8;130H3[9d2[60;364H[1;359H1[5;130H7[60;364H[1;359H3[6;130H6[60;364H[1;359H4[7;130H5[60;364H[1;359H5[60;364H[1;359H6[8;130H4[9d3[60;364H[1;359H8[5;130H8[6d7[60;364H[1;359H9[60;364H[1;358H50[7;130H6[60;364H[1;359H1[60;364H[1;359H3[5;130H9[8d5[9d4[60;364H[1;359H4[6;130H8[60;364H[1;359H5[60;364H[1;359H6[7;130H7[60;364H[1;359H7[60;364H[1;359H8[5;128H9.0[8d6[9d5[60;364H[1;356H7:00[6;130H9[60;364H[1;359H1[60;364H[1;359H2[7;130H8[60;364H[1;359H3[60;364H[1;359H4[8;130H7[9d6[60;364H[1;359H6[5;130H1[6;128H9.0[60;364H[1;359H7[60;364H[1;359H8[7;130H9[60;364H[1;359H9[60;364H[1;358H10[8;130H8[9d7[60;364H[1;359H1[5;130H2[60;364H[1;359H3[6;130H1[60;364H[1;359H4[7;128H9.0[60;364H[1;359H5[60;364H[1;359H6[8;130H9[9d8[60;364H[1;359H7[5;130H3[60;364H[1;359H8[6;130H2[60;364H[1;358H20[7;130H1[60;364H[1;359H1[60;364H[1;359H2[8;128H9.0[9d9[60;364H[1;359H3[5;130H4[60;364H[1;359H4[6;130H3[60;364H[1;359H6[7;130H2[60;364H[1;359H7[60;364H[1;359H8[8;130H1[9;128H9.0[60;364H[1;359H9[5;130H5[60;364H[1;358H31[6;130H4[60;364H[1;359H2[7;130H3[60;364H[1;359H3[60;364H[1;359H4[8;130H2[9d1[60;364H[1;359H5[5;130H6[60;364H[1;359H7[6;130H5[60;364H[1;359H8[7;130H4[60;364H[60;1H[?1049l[23;0;0t[?1l>(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m cd /store/spencers/[K[K[K[K[K[K[K[K[K
bash: cd: /store/: No such file or directory
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m ls -[K[K[K[Kpwd
/users/exet4487/logs
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m ls -trhgl
total 622K
-rw-rw-r-- 1 exet4487  50K Jul 30 17:38 hyperasglamdringtest8log.txt
-rw-rw-r-- 1 exet4487  26K Jul 31 12:37 hypertrain8v2.txt
-rw-rw-r-- 1 exet4487    0 Jul 31 17:11 hypertrain3.txt
-rw-rw-r-- 1 exet4487  27K Jul 31 17:29 hypertrain8v3.txt
-rw-rw-r-- 1 exet4487  180 Aug 23 22:42 stresstest1_log.txt
-rw-rw-r-- 1 exet4487  174 Aug 23 22:49 _log.txt
-rw-rw-r-- 1 exet4487  174 Aug 23 22:49 1_log.txt
-rw-rw-r-- 1 exet4487  14K Aug 23 22:52 stresstest2_log.txt
-rw-rw-r-- 1 exet4487    0 Aug 23 22:52 stresstest3_log.txt
-rw-rw-r-- 1 exet4487  14K Aug 23 22:54 stresstest4_log.txt
-rw-rw-r-- 1 exet4487  18K Aug 25 12:37 screentest5_log.txt
-rw-rw-r-- 1 exet4487  18K Aug 29 06:37 crashtest1_log.txt
-rw-rw-r-- 1 exet4487  16K Sep  1 09:21 crashtest2_log.txt
-rw-rw-r-- 1 exet4487  18K Sep  2 21:07 crashtest3_log.txt
-rw-rw-r-- 1 exet4487  19K Sep  5 04:20 crashtest4_log.txt
-rw-rw-r-- 1 exet4487  44K Sep  6 19:55 crashtest5_log.txt
-rw-rw-r-- 1 exet4487  44K Sep  9 03:49 crashtest6_log.txt
-rw-rw-r-- 1 exet4487  15K Sep  9 14:48 crashtest7_log.txt
-rw-rw-r-- 1 exet4487  14K Sep  9 18:02 crashtest8_log.txt
-rw-rw-r-- 1 exet4487  14K Sep 10 09:48 longtest1_log.txt
-rw-rw-r-- 1 exet4487  14K Sep 10 09:53 longtest2_log.txt
-rw-rw-r-- 1 exet4487  14K Sep 10 10:12 longtest5_log.txt
-rw-rw-r-- 1 exet4487  14K Sep 10 10:21 screentest6_log.txt
-rw-rw-r-- 1 exet4487  26K Sep 14 10:19 longtest7_log.txt
-rw-rw-r-- 1 exet4487 158K Sep 20 17:56 longtest8_log.txt
-rw-rw-r-- 1 exet4487  16K Sep 21 12:47 Crab64080opt1_log.txt
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m q
  JobNum  Status             Name      Job Name                              Cores used/reserved    GB        IO (r/w mbps)    Runtime/Q time    Comment     Nodes List
--------  -----------------  --------  ------------------------------------  ---------------------  --------  ---------------  ----------------  ----------  ------------
  201398  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.9 / 1x8              4.0 / 24  34.9/0           10.0 mins         nocomment   gpu01(8)
  201399  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  2.0 / 1x8              4.0 / 24  46.5/0           9.9 mins          nocomment   gpu02(8)
  201400  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.6 / 1x4              4.0 / 12  34.9/0           9.7 mins          nocomment   gpu03(4)
  201401  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1 / 1x4                2.8 / 12  58.2/0           9.6 mins          nocomment   gpu04(4)
  201402  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.7 / 1x8              3.9 / 24  46.5/0           9.5 mins          nocomment   gpu05(8)

╒═══════════════════════╤══════════╤═════════════╤══════════╤═══════════╤═══════════╤═════════════╕
│ cores free in queue   │ NORMAL   │ BLACKHOLE   │ PLANET   │ CMB       │ BERG      │ GPULONG     │
╞═══════════════════════╪══════════╪═════════════╪══════════╪═══════════╪═══════════╪═════════════╡
│                       │ 32 / 40  │ 64 / 80     │ 66 / 96  │ 104 / 488 │ 142 / 448 │ 0 / 5 nodes │
╘═══════════════════════╧══════════╧═════════════╧══════════╧═══════════╧═══════════╧═════════════╛
You can use the command "n" ("n -t" for text-only) to list cores/GB availability on the compute nodes.
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m q
  JobNum  Status             Name      Job Name                              Cores used/reserved    GB        IO (r/w mbps)    Runtime/Q time    Comment     Nodes List
--------  -----------------  --------  ------------------------------------  ---------------------  --------  ---------------  ----------------  ----------  ------------
  201398  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.8 / 1x8              4.0 / 24  46.5/0           0.4 hrs           nocomment   gpu01(8)
  201399  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  2.0 / 1x8              4.2 / 24  46.5/0           0.4 hrs           nocomment   gpu02(8)
  201400  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.6 / 1x4              4.0 / 12  46.5/0           0.4 hrs           nocomment   gpu03(4)
  201401  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  0.8 / 1x4              2.8 / 12  116.3/0          0.3 hrs           nocomment   gpu04(4)
  201402  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.7 / 1x8              3.9 / 24  46.4/0           0.3 hrs           nocomment   gpu05(8)

╒═══════════════════════╤══════════╤═════════════╤══════════╤═══════════╤═══════════╤═════════════╕
│ cores free in queue   │ NORMAL   │ BLACKHOLE   │ PLANET   │ CMB       │ BERG      │ GPULONG     │
╞═══════════════════════╪══════════╪═════════════╪══════════╪═══════════╪═══════════╪═════════════╡
│                       │ 32 / 40  │ 64 / 80     │ 66 / 96  │ 104 / 488 │ 142 / 448 │ 0 / 5 nodes │
╘═══════════════════════╧══════════╧═════════════╧══════════╧═══════════╧═══════════╧═════════════╛
You can use the command "n" ("n -t" for text-only) to list cores/GB availability on the compute nodes.
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m q
  JobNum  Status             Name      Job Name                              Cores used/reserved    GB        IO (r/w mbps)    Runtime/Q time    Comment     Nodes List
--------  -----------------  --------  ------------------------------------  ---------------------  --------  ---------------  ----------------  ----------  ------------
  201398  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.9 / 1x8              4.0 / 24  34.9/0           0.4 hrs           nocomment   gpu01(8)
  201399  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.6 / 1x8              4.2 / 24  81.4/0           0.4 hrs           nocomment   gpu02(8)
  201400  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.6 / 1x4              4.0 / 12  34.9/0           0.4 hrs           nocomment   gpu03(4)
  201401  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1 / 1x4                2.8 / 12  46.5/0           0.4 hrs           nocomment   gpu04(4)
  201402  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.7 / 1x8              3.9 / 24  34.9/0           0.4 hrs           nocomment   gpu05(8)

╒═══════════════════════╤══════════╤═════════════╤══════════╤═══════════╤═══════════╤═════════════╕
│ cores free in queue   │ NORMAL   │ BLACKHOLE   │ PLANET   │ CMB       │ BERG      │ GPULONG     │
╞═══════════════════════╪══════════╪═════════════╪══════════╪═══════════╪═══════════╪═════════════╡
│                       │ 32 / 40  │ 64 / 80     │ 66 / 96  │ 104 / 488 │ 142 / 448 │ 0 / 5 nodes │
╘═══════════════════════╧══════════╧═════════════╧══════════╧═══════════╧═══════════╧═════════════╛
You can use the command "n" ("n -t" for text-only) to list cores/GB availability on the compute nodes.
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m watch -n0.1 q
[?1049h[22;0;0t[1;60r(B[m[4l[?7h[H[2JEvery 0.1s: q[1;330Hglamdring: Mon Sep 21 13:12:03 2020[3;3HJobNum  Status[3;30HName[40GJob Name[3;78HCores used/reserved    GB[3;111HIO (r/w mbps)    Runtime/Q time    Comment     Nodes List[4d--------  -----------------  --------  ------------------------------------  ---------------------  --------  ---------------  ----------------  ----------  ------------[5;3H201398  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.9 / 1x8[5;101H4.0 / 24  34.9/0[5;128H0.4 hrs[5;146Hnocomment   gpu01(8)[6;3H201399  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.6 / 1x8[6;101H4.2 / 24  81.4/0[6;128H0.4 hrs[6;146Hnocomment   gpu02(8)[7;3H201400  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.6 / 1x4[7;101H4.0 / 12  34.9/0[7;128H0.4 hrs[7;146Hnocomment   gpu03(4)[8;3H201401  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1 / 1x4[8;101H2.8 / 12  46.5/0[8;128H0.4 hrs[8;146Hnocomment   gpu04(4)[9;3H201402  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.7 / 1x8[9;101H3.9 / 24  34.9/0[9;128H0.4 hrs[9;146Hnocomment   gpu05(8)[11d╒═══════════════════════╤══════════╤═════════════╤══════════╤═══════════╤═══════════╤═════════════╕[12d│ cores free in queue   │ NORMAL   │ BLACKHOLE   │ PLANET   │ CMB[73G│ BERG[85G│ GPULONG     │[13d╞═══════════════════════╪══════════╪═════════════╪══════════╪═══════════╪═══════════╪═════════════╡[14d│[14;25H│ 32 / 40  │ 64 / 80     │ 66 / 96  │ 104 / 488 │ 142 / 448 │ 0 / 5 nodes │[15d╘═══════════════════════╧══════════╧═════════════╧══════════╧═══════════╧═══════════╧═════════════╛[16dYou can use the command "n" ("n -t" for text-only) to list cores/GB availability on the compute nodes.[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[6;111H92.9[9;111H46.5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;356H3:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H21[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[5;111H46.5[6;78H2.0[6;111H46.5[7;111H46.5[8;78H0.8 / 1x4[8;111H104.7/0[9;79H / 1x8  [9;111H116.3/0[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H4:00[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[5;111H34.9[7;111H34.9[8;78H1 / 1x4  [8;101H3.0[111G46.5/0 [9;79H.7 / 1x8[9;111H46.4/0 [60;364H[1;359H9[60;364H[1;356H5:00[60;364H[1;359H1[60;364H[1;359H3[5;130H5[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[6;130H5[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[7;130H5[60;364H[1;359H8[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[8;130H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H30[60;364H[1;359H1[9;130H5[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[5;80H5[5;103H3[111G69.8[8;111H58.1[9d5[60;364H[1;356H6:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H11[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[5;80H4[5;111H92.9[7;79H / 1x4  [7;111H116.3/0[8;111H46.5[9;111H34.9[60;364H[1;356H7:01[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;356H8:00[5;80H9[5;111H34[6;78H1.4[6;111H104.7/0[7;79H.6 / 1x4[7;111H34.7/0 [8;78H0.9 / 1x4[8;111H81.4[9;111H46.5[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;356H9:00[60;364H[1;359H1[6;80H8[6;111H69.6/0 [7;111H46.5[8;80H8[8;111H104.5/0[9;111H34.9[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H11[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H21[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H31[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;355H20:00[60;364H[1;359H1[60;364H[1;359H2[5;111H46.5[6;78H2.0[6;111H34.9[7;111H34.9[8;78H1 / 1x4  [8;111H46.5/0 [9;80H3[9;111H93.0[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H11[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H21[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;356H1:00[60;364H[1;359H1[60;364H[1;359H2[5;130H6[60;364H[1;359H3[5;111H34.9[6;111H46.5[8;111H58.1[9;80H4[9;111H81.3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[6;130H6[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[7;130H6[60;364H[1;359H8[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[8;130H6[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H30[60;364H[1;359H1[9;130H6[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H41[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H51[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H2:01[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[8;111H46.5[9;80H7[9;111H34.9[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H3:01[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[5;80H3[5;111H104.7/0[9;111H46.5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;356H4:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[5;80H6[5;111H58.0/0 [6;78H1.2[6;111H116.3/0[7;79H / 1x4  [7;111H127.9/0[8;78H0.7 / 1x4[8;111H139.6/0[9;101H4.1[111G34.9[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;356H5:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[5;80H9[5;111H34.9[6;80H9[6;111H58.0/0 [7;79H.6 / 1x4[7;111H34.7/0 [8;78H1 / 1x4  [8;111H46.4/0 [9;111H46.5[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H6:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[5;111H46.5[6;78H2.0[6;111H46.5[7d9[8d5[9;80H6[9;111H58.1[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H21[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H31[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H7:01[60;364H[1;359H2[5;130H7[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[5;111H34.9[6;130H7[8;111H58.1[9;80H1[9;111H104.7/0[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[7;130H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[8;130H7[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[9;130H7[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H41[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;356H8:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[6;111H34.9[8;111H46.5[9;80H7[9;111H46.4/0 [60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;356H9:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H2[5;79H / 1x8  [5;111H116.3/0[6;111H46.5[8;78H0.7 / 1x4[8;111H127.9/0[9;114H5[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;355H30:01[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H2[60;364H[1;359H3[5;79H.9 / 1x8[5;111H46.4/0 [6;78H1.1[6;111H127.9/0[7;111H46.5[8;78H1 / 1x4  [8;111H58.0/0 [9;111H34.9[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H21[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H41[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;356H1:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[5;114H5[6;78H2.0[6;111H46.4/0 [7;79H / 1x4  [7;111H104.7/0[8;111H46.5[9;111H46.5[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H31[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;356H2:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H11[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[5;111H34.9[6d5[7;79H.6 / 1x4[7;111H46.4/0 [9;111H34.9[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H3:00[60;364H[1;359H2[5;130H8[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H10[6;130H8[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[7;111H34.9[8;111H58.1[9;78H0.9[9;111H127.9/0[60;364H[1;359H7[7;130H8[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[8;130H8[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[9;130H8[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H51[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H4:00[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[8;78H0.7 / 1x4[8;111H116.3/0[9;78H1.7[9;111H46.4/0 [60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H51[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H5:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H11[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[5;111H46.5[6;111H34.9[7;111H46.5[8;78H1 / 1x4  [8;111H58.0/0 [9;111H34.9[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H41[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H6:01[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[5;79H / 1x8  [5;111H116.3/0[6;78H1.2[6;111H127.9/0[7;111H34.9[8;111H46.5[9;111H46.5[60;364H[1;359H9[60;364H[1;358H21[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;356H7:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[5;79H.9 / 1x8[5;111H46.4/0 [6;78H2.0[6;111H34.7/0 [9;111H34.9[60;364H[1;358H21[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H8:01[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[5;111H34.9[6;111H46.5[7;80H1[7;111H116.3/0[8;111H58.1[9;111H46.5[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;356H9:00[60;364H[1;359H1[60;364H[1;359H2[5;130H9[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[6;130H9[60;364H[1;358H11[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[7;130H9[60;364H[1;359H8[60;364H[60;1H[?1049l[23;0;0t[?1l>(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m ls -trhgl
total 622K
-rw-rw-r-- 1 exet4487  50K Jul 30 17:38 hyperasglamdringtest8log.txt
-rw-rw-r-- 1 exet4487  26K Jul 31 12:37 hypertrain8v2.txt
-rw-rw-r-- 1 exet4487    0 Jul 31 17:11 hypertrain3.txt
-rw-rw-r-- 1 exet4487  27K Jul 31 17:29 hypertrain8v3.txt
-rw-rw-r-- 1 exet4487  180 Aug 23 22:42 stresstest1_log.txt
-rw-rw-r-- 1 exet4487  174 Aug 23 22:49 _log.txt
-rw-rw-r-- 1 exet4487  174 Aug 23 22:49 1_log.txt
-rw-rw-r-- 1 exet4487  14K Aug 23 22:52 stresstest2_log.txt
-rw-rw-r-- 1 exet4487    0 Aug 23 22:52 stresstest3_log.txt
-rw-rw-r-- 1 exet4487  14K Aug 23 22:54 stresstest4_log.txt
-rw-rw-r-- 1 exet4487  18K Aug 25 12:37 screentest5_log.txt
-rw-rw-r-- 1 exet4487  18K Aug 29 06:37 crashtest1_log.txt
-rw-rw-r-- 1 exet4487  16K Sep  1 09:21 crashtest2_log.txt
-rw-rw-r-- 1 exet4487  18K Sep  2 21:07 crashtest3_log.txt
-rw-rw-r-- 1 exet4487  19K Sep  5 04:20 crashtest4_log.txt
-rw-rw-r-- 1 exet4487  44K Sep  6 19:55 crashtest5_log.txt
-rw-rw-r-- 1 exet4487  44K Sep  9 03:49 crashtest6_log.txt
-rw-rw-r-- 1 exet4487  15K Sep  9 14:48 crashtest7_log.txt
-rw-rw-r-- 1 exet4487  14K Sep  9 18:02 crashtest8_log.txt
-rw-rw-r-- 1 exet4487  14K Sep 10 09:48 longtest1_log.txt
-rw-rw-r-- 1 exet4487  14K Sep 10 09:53 longtest2_log.txt
-rw-rw-r-- 1 exet4487  14K Sep 10 10:12 longtest5_log.txt
-rw-rw-r-- 1 exet4487  14K Sep 10 10:21 screentest6_log.txt
-rw-rw-r-- 1 exet4487  26K Sep 14 10:19 longtest7_log.txt
-rw-rw-r-- 1 exet4487 158K Sep 20 17:56 longtest8_log.txt
-rw-rw-r-- 1 exet4487  16K Sep 21 12:47 Crab64080opt1_log.txt
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m ta[K[Kcat Crab64080opt1_log.txt 
>>> Imports:
#coding=utf-8

try:
    import os
except:
    pass

try:
    import matplotlib as mpl
except:
    pass

try:
    import numpy as np
except:
    pass

try:
    import h5py
except:
    pass

try:
    import keras
except:
    pass

try:
    import tempfile
except:
    pass

try:
    import sys
except:
    pass

try:
    import tensorflow as tf
except:
    pass

try:
    from tensorflow.compat.v1 import ConfigProto
except:
    pass

try:
    from tensorflow.compat.v1 import Session
except:
    pass

try:
    from keras.utils import HDF5Matrix
except:
    pass

try:
    from keras.models import Sequential
except:
    pass

try:
    from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout, Conv2D, ConvLSTM2D, MaxPooling2D, BatchNormalization, Conv3D, GlobalAveragePooling3D
except:
    pass

try:
    from keras.layers.normalization import BatchNormalization
except:
    pass

try:
    from keras.layers.convolutional import AveragePooling2D
except:
    pass

try:
    from keras.layers.core import Activation
except:
    pass

try:
    from keras.layers.core import Dropout
except:
    pass

try:
    from keras.layers import Input, GaussianNoise
except:
    pass

try:
    from keras.models import Model
except:
    pass

try:
    from keras.layers import concatenate
except:
    pass

try:
    import tensorflow.python.keras.backend as K
except:
    pass

try:
    from keras.utils import plot_model
except:
    pass

try:
    import matplotlib.pyplot as plt
except:
    pass

try:
    import glob
except:
    pass

try:
    from sklearn.preprocessing import StandardScaler
except:
    pass

try:
    from keras.callbacks import EarlyStopping
except:
    pass

try:
    from keras import regularizers
except:
    pass

try:
    from mpl_toolkits.axes_grid1 import make_axes_locatable
except:
    pass

try:
    import numpy.ma as ma
except:
    pass

try:
    from matplotlib.pyplot import cm
except:
    pass

try:
    from sklearn.preprocessing import scale
except:
    pass

try:
    from mpl_toolkits.axes_grid1 import make_axes_locatable
except:
    pass

try:
    import numpy.ma as ma
except:
    pass

try:
    from matplotlib.pyplot import cm
except:
    pass

try:
    from mlxtend.evaluate import confusion_matrix
except:
    pass

try:
    from mlxtend.plotting import plot_confusion_matrix
except:
    pass

try:
    from keras.metrics import binary_accuracy
except:
    pass

try:
    from sklearn.metrics import roc_curve, auc
except:
    pass

try:
    import hyperas
except:
    pass

try:
    from hyperas import optim
except:
    pass

try:
    from hyperas.distributions import choice, uniform
except:
    pass

try:
    from hyperopt import Trials, STATUS_OK, tpe, mongoexp
except:
    pass

try:
    import pickle
except:
    pass

try:
    import tempfile
except:
    pass

try:
    from os import path
except:
    pass

>>> Hyperas search space:

def get_space():
    return {
        'filters': hp.choice('filters', [10,20,30,40,50,60]),
        'kernel_size': hp.choice('kernel_size', [(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)]),
        'l2': hp.uniform('l2', 0,1),
        'l2_1': hp.uniform('l2_1', 0,1),
        'l2_2': hp.uniform('l2_2', 0,1),
        'filters_1': hp.choice('filters_1', [10,20,30,40,50,60]),
        'kernel_size_1': hp.choice('kernel_size_1', [(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)]),
        'l2_3': hp.uniform('l2_3', 0,1),
        'l2_4': hp.uniform('l2_4', 0,1),
        'l2_5': hp.uniform('l2_5', 0,1),
        'filters_2': hp.choice('filters_2', [10,20,30,40,50,60]),
        'kernel_size_2': hp.choice('kernel_size_2', [(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)]),
        'l2_6': hp.uniform('l2_6', 0,1),
        'l2_7': hp.uniform('l2_7', 0,1),
        'l2_8': hp.uniform('l2_8', 0,1),
        'filters_3': hp.choice('filters_3', [10,20,30,40,50,60]),
        'kernel_size_3': hp.choice('kernel_size_3', [(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)]),
        'l2_9': hp.uniform('l2_9', 0,1),
        'l2_10': hp.uniform('l2_10', 0,1),
        'l2_11': hp.uniform('l2_11', 0,1),
        'l2_12': hp.choice('l2_12', ['four','five','six']),
        'filters_4': hp.choice('filters_4', [10,20,30,40,50,60]),
        'kernel_size_4': hp.choice('kernel_size_4', [(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)]),
        'l2_13': hp.uniform('l2_13', 0,1),
        'l2_14': hp.uniform('l2_14', 0,1),
        'l2_15': hp.uniform('l2_15', 0,1),
        'l2_16': hp.choice('l2_16', ['four','five','six']),
        'filters_5': hp.choice('filters_5', [10,20,30,40,50,60]),
        'kernel_size_5': hp.choice('kernel_size_5', [(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)]),
        'l2_17': hp.uniform('l2_17', 0,1),
        'l2_18': hp.uniform('l2_18', 0,1),
        'l2_19': hp.uniform('l2_19', 0,1),
        'filters_6': hp.choice('filters_6', [10,20,30,40,50,60]),
        'kernel_size_6': hp.choice('kernel_size_6', [(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)]),
        'l2_20': hp.uniform('l2_20', 0,1),
        'l2_21': hp.uniform('l2_21', 0,1),
        'l2_22': hp.uniform('l2_22', 0,1),
        'Dense': hp.choice('Dense', [10,50,100,200]),
    }

>>> Data
   1: 
   2: def hardcode_valid():
   3:     hexmethod='oversampling'
   4:     onlyfiles = sorted(glob.glob('/mnt/extraspace/exet4487/Crab64080/*.hdf5'))
   5:     batch_size=50
   6:     """ Generates training/test sequences on demand
   7:     """
   8:     
   9:     nofiles = 0
  10:     i = 0  # No. events loaded in total
  11:     filelist = onlyfiles[-10:]
  12:     global validevents
  13:     global valid2
  14:     validevents=[]
  15:     valid2=[]
  16:     for file in filelist:
  17:         inputdata = h5py.File(file, 'r')
  18:         validevents = validevents + inputdata['isGamma'][:].tolist()
  19:         valid2 = valid2 + inputdata['id'][:].tolist()
  20:         inputdata.close()
  21: 
  22:     while True:
  23:         for file in filelist:
  24:             try:
  25:                 inputdata = h5py.File(file, 'r')
  26:             except OSError:
  27:                 continue
  28:             trainarr = np.asarray(inputdata[hexmethod][:, :, :, :])
  29:             labelsarr = np.asarray(inputdata['isGamma'][:])
  30:             idarr = np.asarray(inputdata['id'][:])
  31:             nofiles = nofiles + 1
  32:             inputdata.close()
  33:             notrigs=np.shape(trainarr)[0]
  34:             
  35:             for x in np.arange(np.shape(trainarr)[0]):
  36:                 chargevals = []
  37:                 for y in np.arange(4):
  38:                     chargevals.append(np.sum(trainarr[x,y,:,:]))
  39:                     
  40:                 chargevals = np.argsort(chargevals)
  41:                 chargevals = np.flip(chargevals,axis=0) #Flip to descending order.
  42:                 trainarr[x, :, :, :] = trainarr[x, chargevals, :, :]
  43:             training_sample_count = len(trainarr)
  44:             batches = int(training_sample_count / batch_size)
  45:             remainder_samples = training_sample_count % batch_size
  46:             i = i + 1000
  47:             countarr = np.arange(0, len(labelsarr))
  48:             #trainarr = (trainarr-np.amin(trainarr,axis=0))/(np.amax(trainarr,axis=0)-np.amin(trainarr,axis=0))
  49:             if remainder_samples:
  50:                 batches = batches + 1
  51:                     # generate batches of samples
  52:             for idx in list(range(0, batches)):
  53:                 if idx == batches - 1:
  54:                     batch_idxs = countarr[idx * batch_size:]
  55:                 else:
  56:                     batch_idxs = countarr[idx *
  57:                                           batch_size:idx *
  58:                                           batch_size +
  59:                                           batch_size]
  60:                 X = trainarr[batch_idxs]
  61:                 X = np.nan_to_num(X)
  62:                 Y = keras.utils.to_categorical(
  63:                     labelsarr[batch_idxs], num_classes=2)
  64:                 yield (np.array(X), np.array(Y))
  65: 
  66: def hardcode_train():
  67:     hexmethod='oversampling'
  68:     onlyfiles = sorted(glob.glob('/mnt/extraspace/exet4487/Crab64080/*.hdf5'))
  69:     batch_size=50
  70:     """ Generates training/test sequences on demand
  71:     """
  72:     
  73:     nofiles = 0
  74:     i = 0  # No. events loaded in total
  75:     global trainevents
  76:     global train2
  77:     trainevents=[]
  78:     train2=[]
  79:     filelist = onlyfiles[:20]
  80:     for file in filelist:
  81:         try:
  82:             inputdata = h5py.File(file, 'r')
  83:         except OSError:
  84:             continue
  85:         trainevents = trainevents + inputdata['isGamma'][:].tolist()
  86:         train2 = train2 + inputdata['id'][:].tolist()
  87:         inputdata.close()
  88: 
  89:     while True:
  90:         for file in filelist:
  91:             try:
  92:                 inputdata = h5py.File(file, 'r')
  93:             except OSError:
  94:                 continue
  95:             trainarr = np.asarray(inputdata[hexmethod][:, :, :, :])
  96:             labelsarr = np.asarray(inputdata['isGamma'][:])
  97:             idarr = np.asarray(inputdata['id'][:])
  98:             nofiles = nofiles + 1
  99:             inputdata.close()
 100:             notrigs=np.shape(trainarr)[0]
 101:             
 102:             for x in np.arange(np.shape(trainarr)[0]):
 103:                 chargevals = []
 104:                 for y in np.arange(4):
 105:                     chargevals.append(np.sum(trainarr[x,y,:,:]))
 106:                     
 107:                 chargevals = np.argsort(chargevals)
 108:                 chargevals = np.flip(chargevals,axis=0) #Flip to descending order.
 109:                 trainarr[x, :, :, :] = trainarr[x, chargevals, :, :]
 110:                 
 111:             training_sample_count = len(trainarr)
 112:             batches = int(training_sample_count / batch_size)
 113:             remainder_samples = training_sample_count % batch_size
 114:             i = i + 1000
 115:             countarr = np.arange(0, len(labelsarr))
 116:                 
 117:             #            trainarr = (trainarr-np.amin(trainarr,axis=0))/(np.amax(trainarr,axis=0)-np.amin(trainarr,axis=0))
 118:             if remainder_samples:
 119:                 batches = batches + 1
 120:                     
 121:             # generate batches of samples
 122:             for idx in list(range(0, batches)):
 123:                 if idx == batches - 1:
 124:                     batch_idxs = countarr[idx * batch_size:]
 125:                 else:
 126:                     batch_idxs = countarr[idx *
 127:                                           batch_size:idx *
 128:                                           batch_size +
 129:                                           batch_size]
 130:                 X = trainarr[batch_idxs]
 131:                 X = np.nan_to_num(X)
 132:                 Y = keras.utils.to_categorical(
 133:                     labelsarr[batch_idxs], num_classes=2)
 134:                 yield (np.array(X), np.array(Y))
 135: 
 136: 
 137: train_generator=hardcode_train()
 138: validation_generator=hardcode_valid()
 139: 
 140: 
 141: 
>>> Resulting replaced keras model:

   1: def keras_fmin_fnct(space):
   2: 
   3:     inpshape=(None,54,54,1)
   4:     strategy=tf.distribute.MirroredStrategy()
   5:     print('Number of devices: {}'.format(strategy.num_replicas_in_sync))
   6:     with strategy.scope():
   7:         model = Sequential()
   8:         model.add(ConvLSTM2D(filters=space['filters'], kernel_size=space['kernel_size'],
   9:                              input_shape=inpshape,
  10:                              padding='same', return_sequences=True,kernel_regularizer=keras.regularizers.l2(space['l2']),dropout=space['l2_1'],recurrent_dropout=space['l2_2']))
  11:         model.add(BatchNormalization())
  12:         
  13:         model.add(ConvLSTM2D(filters=space['filters_1'], kernel_size=space['kernel_size_1'],
  14:                              padding='same', return_sequences=True,kernel_regularizer=keras.regularizers.l2(space['l2_3']),dropout=space['l2_4'],recurrent_dropout=space['l2_5']))
  15:         model.add(BatchNormalization())
  16:         
  17:         model.add(ConvLSTM2D(filters=space['filters_2'], kernel_size=space['kernel_size_2'],
  18:                              padding='same', return_sequences=True,kernel_regularizer=keras.regularizers.l2(space['l2_6']),dropout=space['l2_7'],recurrent_dropout=space['l2_8']))
  19:         model.add(BatchNormalization())
  20:         model.add(ConvLSTM2D(filters=space['filters_3'], kernel_size=space['kernel_size_3'],
  21:                              padding='same', return_sequences=True,kernel_regularizer=keras.regularizers.l2(space['l2_9']),dropout=space['l2_10'],recurrent_dropout=space['l2_11']))
  22:         model.add(BatchNormalization())
  23:         if space['l2_12']=='five':
  24:             model.add(ConvLSTM2D(filters=space['filters_4'], kernel_size=space['kernel_size_4'],
  25:                                  padding='same', return_sequences=True,kernel_regularizer=keras.regularizers.l2(space['l2_13']),dropout=space['l2_14'],recurrent_dropout=space['l2_15']))
  26:             model.add(BatchNormalization())
  27:         if space['l2_16']=='six':
  28:             model.add(ConvLSTM2D(filters=space['filters_5'], kernel_size=space['kernel_size_5'],
  29:                                  padding='same', return_sequences=True,kernel_regularizer=keras.regularizers.l2(space['l2_17']),dropout=space['l2_18'],recurrent_dropout=space['l2_19']))
  30:             model.add(BatchNormalization())
  31:             model.add(ConvLSTM2D(filters=space['filters_6'], kernel_size=space['kernel_size_6'],
  32:                                  padding='same', return_sequences=True,kernel_regularizer=keras.regularizers.l2(space['l2_20']),dropout=space['l2_21'],recurrent_dropout=space['l2_22']))
  33:             model.add(BatchNormalization())
  34:         model.add(GlobalAveragePooling3D())
  35:         model.add(Dense(space['Dense'],activation='relu'))
  36:         model.add(Dense(2, activation='softmax'))
  37:         # Compile the model
  38:         model.compile(loss='binary_crossentropy',
  39:                       optimizer='Adam',
  40:                       metrics=['binary_accuracy'])
  41:         '''early_stop = EarlyStopping(
  42:         monitor='val_loss',
  43:         min_delta=0,
  44:         patience=10,
  45:         verbose=1,
  46:         mode='auto')'''
  47:     
  48:     # Code for ensuring no contamination between training and test data.
  49:     lentrain=19574*2
  50:     lentruth=19600
  51: # Train the network
  52:     history = model.fit(
  53:         train_generator,
  54:         steps_per_epoch=lentrain/50.0,
  55:         epochs=15,
  56:         verbose=0,
  57:         workers=0,
  58:         use_multiprocessing=False,
  59:         shuffle=True,validation_data=validation_generator,validation_steps=lentruth/50.0)
  60:     score, acc=model.evaluate(validation_generator,steps=lentruth/50.0)
  61:     modelnumber=next(tempfile._get_candidate_names())
  62:     modelcode=np.random.randint(0,1e10)
  63:     out = {'loss': -acc,
  64:         'score': score,
  65:         'modelno':str(modelnumber)+str(modelcode),
  66:         'status': STATUS_OK,
  67:         'model_params': model.summary()
  68:     }
  69:     model.save('/users/exet4487/hypermodels/'+str(modelnumber)+str(modelcode)+'.h5')
  70:     # optionally store a dump of your model here so you can get it from the database later                                                                                                   
  71:     temp_name = tempfile.gettempdir()+'/'+modelnumber + '.h5'
  72:     model.save(temp_name)
  73:     #with open(temp_name, 'rb') as infile:
  74:     #model_bytes = infile.read()
  75:     #out['model_serial'] = model_bytes
  76:     return out
  77: 
  0%|          | 0/500 [00:00<?, ?trial/s, best loss=?](venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m tail-[K -f c[KCrab64080opt1_log.txt 
  69:     model.save('/users/exet4487/hypermodels/'+str(modelnumber)+str(modelcode)+'.h5')
  70:     # optionally store a dump of your model here so you can get it from the database later                                                                                                   
  71:     temp_name = tempfile.gettempdir()+'/'+modelnumber + '.h5'
  72:     model.save(temp_name)
  73:     #with open(temp_name, 'rb') as infile:
  74:     #model_bytes = infile.read()
  75:     #out['model_serial'] = model_bytes
  76:     return out
  77: 
  0%|          | 0/500 [00:00<?, ?trial/s, best loss=?]^[[B^[[B^[[B^[[B^[[B^[[B^[[B                            
e2    0%|          | 1/500 [1:24:12<700:17:58, 5052.26s/trial, best loss: -0.7428793907165527]  0%|          | 2/500 [1:29:57<503:32:36, 3640.07s/trial, best loss: -0.7428793907165527]  1%|          | 3/500 [1:36:38<368:22:36, 2668.32s/trial, best loss: -0.7428793907165527]  1%|          | 4/500 [1:44:31<276:54:29, 2009.82s/trial, best loss: -0.7428793907165527]  1%|          | 5/500 [1:47:24<200:34:33, 1458.73s/trial, best loss: -0.7605509161949158]  1%|          | 6/500 [2:39:33<268:56:41, 1959.92s/trial, best loss: -0.7605509161949158]  1%|▏         | 7/500 [2:51:35<217:31:26, 1588.41s/trial, best loss: -0.7605509161949158]  2%|▏         | 8/500 [3:04:46<184:23:07, 1349.16s/trial, best loss: -0.7605509161949158]  2%|▏         | 9/500 [3:29:46<190:10:40, 1394.38s/trial, best loss: -0.7605509161949158]  2%|▏         | 10/500 [4:03:41<215:57:19, 1586.61s/trial, best loss: -0.7605509161949158]  2%|▏         | 11/500 [4:06:33<157:52:27, 1162.26s/trial, best loss: -0.7605509161949158]  2%|▏         | 12/500 [4:13:44<127:50:29, 943.09s/trial, best loss: -0.7605509161949158]   3%|▎         | 13/500 [4:47:38<171:48:50, 1270.08s/trial, best loss: -0.7605509161949158]  3%|▎         | 14/500 [5:01:47<154:24:27, 1143.76s/trial, best loss: -0.7605509161949158]  3%|▎         | 15/500 [5:16:23<143:17:02, 1063.55s/trial, best loss: -0.7605509161949158]  3%|▎         | 16/500 [5:40:28<158:21:30, 1177.87s/trial, best loss: -0.7605509161949158]  3%|▎         | 17/500 [5:43:32<118:02:08, 879.77s/trial, best loss: -0.7605509161949158]   4%|▎         | 18/500 [5:57:37<116:23:58, 869.37s/trial, best loss: -0.7605509161949158]  4%|▍         | 19/500 [6:09:22<109:34:58, 820.16s/trial, best loss: -0.7605509161949158]  4%|▍         | 20/500 [6:30:01<126:05:25, 945.68s/trial, best loss: -0.7611746191978455]  4%|▍         | 21/500 [7:16:14<198:45:54, 1493.85s/trial, best loss: -0.7611746191978455]  4%|▍         | 22/500 [7:17:07<140:58:19, 1061.71s/trial, best loss: -0.7611746191978455]  5%|▍         | 23/500 [7:18:48<102:28:39, 773.42s/trial, best loss: -0.7611746191978455]   5%|▍         | 24/500 [8:01:23<172:56:55, 1308.02s/trial, best loss: -0.7611746191978455]  5%|▌         | 25/500 [8:31:35<192:31:06, 1459.09s/trial, best loss: -0.7611746191978455]  5%|▌         | 26/500 [8:38:41<151:18:02, 1149.12s/trial, best loss: -0.7972972989082336]  5%|▌         | 27/500 [8:40:41<110:24:46, 840.35s/trial, best loss: -0.7972972989082336]   6%|▌         | 28/500 [8:50:54<101:14:31, 772.18s/trial, best loss: -0.7972972989082336]  6%|▌         | 29/500 [9:09:37<114:48:45, 877.55s/trial, best loss: -0.7972972989082336]  6%|▌         | 30/500 [10:02:43<204:58:08, 1569.98s/trial, best loss: -0.7972972989082336]  6%|▌         | 31/500 [10:10:20<161:02:34, 1236.15s/trial, best loss: -0.7972972989082336]  6%|▋         | 32/500 [10:15:29<124:32:54, 958.07s/trial, best loss: -0.7972972989082336]   7%|▋         | 33/500 [10:23:44<106:14:47, 819.03s/trial, best loss: -0.7972972989082336]  7%|▋         | 34/500 [10:57:02<151:47:45, 1172.67s/trial, best loss: -0.7972972989082336]  7%|▋         | 35/500 [11:00:25<113:55:00, 881.94s/trial, best loss: -0.7972972989082336]   7%|▋         | 36/500 [11:24:10<134:38:40, 1044.66s/trial, best loss: -0.7972972989082336]  7%|▋         | 37/500 [11:42:45<137:04:22, 1065.79s/trial, best loss: -0.7972972989082336]  8%|▊         | 38/500 [11:58:55<133:05:25, 1037.07s/trial, best loss: -0.7972972989082336]  8%|▊         | 39/500 [12:16:47<134:08:36, 1047.54s/trial, best loss: -0.7972972989082336]  8%|▊         | 40/500 [12:54:36<180:40:58, 1414.04s/trial, best loss: -0.7972972989082336]  8%|▊         | 41/500 [13:09:33<160:30:10, 1258.85s/trial, best loss: -0.7972972989082336]  8%|▊         | 42/500 [13:12:46<119:29:46, 939.27s/trial, best loss: -0.7972972989082336]   9%|▊         | 43/500 [13:45:50<159:01:14, 1252.68s/trial, best loss: -0.7972972989082336]  9%|▉         | 44/500 [13:50:34<121:52:07, 962.12s/trial, best loss: -0.7972972989082336]   9%|▉         | 45/500 [13:57:50<101:37:47, 804.10s/trial, best loss: -0.7972972989082336]  9%|▉         | 46/500 [14:07:58<94:00:46, 745.48s/trial, best loss: -0.7972972989082336]   9%|▉         | 47/500 [14:38:47<135:27:55, 1076.55s/trial, best loss: -0.7972972989082336] 10%|▉         | 48/500 [14:57:17<136:24:15, 1086.41s/trial, best loss: -0.7972972989082336] 10%|▉         | 49/500 [14:57:57<96:47:31, 772.62s/trial, best loss: -0.7972972989082336]   10%|█         | 50/500 [15:00:11<72:36:03, 580.81s/trial, best loss: -0.7972972989082336] 10%|█         | 51/500 [15:12:45<78:56:38, 632.96s/trial, best loss: -0.7972972989082336] 10%|█         | 52/500 [15:24:58<82:29:43, 662.91s/trial, best loss: -0.7972972989082336] 11%|█         | 53/500 [15:46:23<105:29:45, 849.63s/trial, best loss: -0.7972972989082336] 11%|█         | 54/500 [15:53:29<89:29:32, 722.36s/trial, best loss: -0.7972972989082336]  11%|█         | 55/500 [15:57:11<70:43:50, 572.20s/trial, best loss: -0.7972972989082336] 11%|█         | 56/500 [16:07:02<71:17:50, 578.09s/trial, best loss: -0.7972972989082336] 11%|█▏        | 57/500 [16:15:49<69:14:20, 562.66s/trial, best loss: -0.7972972989082336] 12%|█▏        | 58/500 [17:12:20<173:16:19, 1411.27s/trial, best loss: -0.7972972989082336] 12%|█▏        | 59/500 [17:12:57<122:21:13, 998.81s/trial, best loss: -0.7972972989082336]  12%|█▏        | 60/500 [17:29:18<121:25:31, 993.48s/trial, best loss: -0.7972972989082336] 12%|█▏        | 61/500 [18:02:44<158:12:52, 1297.43s/trial, best loss: -0.7972972989082336] 12%|█▏        | 62/500 [18:03:17<111:40:53, 917.93s/trial, best loss: -0.7972972989082336]  13%|█▎        | 63/500 [18:06:25<84:50:03, 698.86s/trial, best loss: -0.7972972989082336]  13%|█▎        | 64/500 [18:08:51<64:33:55, 533.11s/trial, best loss: -0.7972972989082336] 13%|█▎        | 65/500 [18:38:07<108:43:59, 899.86s/trial, best loss: -0.7972972989082336] 13%|█▎        | 66/500 [18:55:12<113:02:32, 937.68s/trial, best loss: -0.7972972989082336] 13%|█▎        | 67/500 [19:03:32<96:58:22, 806.24s/trial, best loss: -0.7972972989082336]  14%|█▎        | 68/500 [19:21:29<106:30:34, 887.58s/trial, best loss: -0.7972972989082336] 14%|█▍        | 69/500 [19:24:42<81:18:53, 679.20s/trial, best loss: -0.7972972989082336]  14%|█▍        | 70/500 [19:33:26<75:33:14, 632.54s/trial, best loss: -0.7972972989082336] 14%|█▍        | 71/500 [20:30:59<176:12:42, 1478.70s/trial, best loss: -0.7972972989082336] 14%|█▍        | 72/500 [20:34:33<130:41:07, 1099.22s/trial, best loss: -0.7972972989082336] 15%|█▍        | 73/500 [20:34:47<91:46:20, 773.72s/trial, best loss: -0.7972972989082336]   15%|█▍        | 74/500 [20:36:22<67:27:42, 570.10s/trial, best loss: -0.7972972989082336] 15%|█▌        | 75/500 [21:04:45<107:24:34, 909.82s/trial, best loss: -0.7972972989082336] 15%|█▌        | 76/500 [21:29:33<127:36:44, 1083.50s/trial, best loss: -0.7972972989082336] 15%|█▌        | 77/500 [21:46:17<124:30:26, 1059.64s/trial, best loss: -0.7972972989082336] 16%|█▌        | 78/500 [21:49:11<93:03:01, 793.80s/trial, best loss: -0.7972972989082336]   16%|█▌        | 79/500 [22:05:00<98:17:44, 840.53s/trial, best loss: -0.7972972989082336] 16%|█▌        | 80/500 [22:22:22<105:05:32, 900.79s/trial, best loss: -0.7972972989082336] 16%|█▌        | 81/500 [22:27:45<84:40:02, 727.45s/trial, best loss: -0.7972972989082336]  16%|█▋        | 82/500 [22:39:18<83:17:20, 717.32s/trial, best loss: -0.7972972989082336] 17%|█▋        | 83/500 [23:20:05<143:11:06, 1236.13s/trial, best loss: -0.7972972989082336] 17%|█▋        | 84/500 [23:27:53<116:12:29, 1005.65s/trial, best loss: -0.7972972989082336]^C
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m tail -f Crab64080opt1_log.txt 
  69:     model.save('/users/exet4487/hypermodels/'+str(modelnumber)+str(modelcode)+'.h5')
  70:     # optionally store a dump of your model here so you can get it from the database later                                                                                                   
  71:     temp_name = tempfile.gettempdir()+'/'+modelnumber + '.h5'
  72:     model.save(temp_name)
  73:     #with open(temp_name, 'rb') as infile:
  74:     #model_bytes = infile.read()
  75:     #out['model_serial'] = model_bytes
  76:     return out
  77: 
  0%|          | 0/500 [00:00<?, ?trial/s, best loss=?]  0%|          | 1/500 [1:24:12<700:17:58, 5052.26s/trial, best loss: -0.7428793907165527]  0%|          | 2/500 [1:29:57<503:32:36, 3640.07s/trial, best loss: -0.7428793907165527]  1%|          | 3/500 [1:36:38<368:22:36, 2668.32s/trial, best loss: -0.7428793907165527]  1%|          | 4/500 [1:44:31<276:54:29, 2009.82s/trial, best loss: -0.7428793907165527]  1%|          | 5/500 [1:47:24<200:34:33, 1458.73s/trial, best loss: -0.7605509161949158]  1%|          | 6/500 [2:39:33<268:56:41, 1959.92s/trial, best loss: -0.7605509161949158]  1%|▏         | 7/500 [2:51:35<217:31:26, 1588.41s/trial, best loss: -0.7605509161949158]  2%|▏         | 8/500 [3:04:46<184:23:07, 1349.16s/trial, best loss: -0.7605509161949158]  2%|▏         | 9/500 [3:29:46<190:10:40, 1394.38s/trial, best loss: -0.7605509161949158]  2%|▏         | 10/500 [4:03:41<215:57:19, 1586.61s/trial, best loss: -0.7605509161949158]  2%|▏         | 11/500 [4:06:33<157:52:27, 1162.26s/trial, best loss: -0.7605509161949158]  2%|▏         | 12/500 [4:13:44<127:50:29, 943.09s/trial, best loss: -0.7605509161949158]   3%|▎         | 13/500 [4:47:38<171:48:50, 1270.08s/trial, best loss: -0.7605509161949158]  3%|▎         | 14/500 [5:01:47<154:24:27, 1143.76s/trial, best loss: -0.7605509161949158]  3%|▎         | 15/500 [5:16:23<143:17:02, 1063.55s/trial, best loss: -0.7605509161949158]  3%|▎         | 16/500 [5:40:28<158:21:30, 1177.87s/trial, best loss: -0.7605509161949158]  3%|▎         | 17/500 [5:43:32<118:02:08, 879.77s/trial, best loss: -0.7605509161949158]   4%|▎         | 18/500 [5:57:37<116:23:58, 869.37s/trial, best loss: -0.7605509161949158]  4%|▍         | 19/500 [6:09:22<109:34:58, 820.16s/trial, best loss: -0.7605509161949158]  4%|▍         | 20/500 [6:30:01<126:05:25, 945.68s/trial, best loss: -0.7611746191978455]  4%|▍         | 21/500 [7:16:14<198:45:54, 1493.85s/trial, best loss: -0.7611746191978455]  4%|▍         | 22/500 [7:17:07<140:58:19, 1061.71s/trial, best loss: -0.7611746191978455]  5%|▍         | 23/500 [7:18:48<102:28:39, 773.42s/trial, best loss: -0.7611746191978455]   5%|▍         | 24/500 [8:01:23<172:56:55, 1308.02s/trial, best loss: -0.7611746191978455]  5%|▌         | 25/500 [8:31:35<192:31:06, 1459.09s/trial, best loss: -0.7611746191978455]  5%|▌         | 26/500 [8:38:41<151:18:02, 1149.12s/trial, best loss: -0.7972972989082336]  5%|▌         | 27/500 [8:40:41<110:24:46, 840.35s/trial, best loss: -0.7972972989082336]   6%|▌         | 28/500 [8:50:54<101:14:31, 772.18s/trial, best loss: -0.7972972989082336]  6%|▌         | 29/500 [9:09:37<114:48:45, 877.55s/trial, best loss: -0.7972972989082336]  6%|▌         | 30/500 [10:02:43<204:58:08, 1569.98s/trial, best loss: -0.7972972989082336]  6%|▌         | 31/500 [10:10:20<161:02:34, 1236.15s/trial, best loss: -0.7972972989082336]  6%|▋         | 32/500 [10:15:29<124:32:54, 958.07s/trial, best loss: -0.7972972989082336]   7%|▋         | 33/500 [10:23:44<106:14:47, 819.03s/trial, best loss: -0.7972972989082336]  7%|▋         | 34/500 [10:57:02<151:47:45, 1172.67s/trial, best loss: -0.7972972989082336]  7%|▋         | 35/500 [11:00:25<113:55:00, 881.94s/trial, best loss: -0.7972972989082336]   7%|▋         | 36/500 [11:24:10<134:38:40, 1044.66s/trial, best loss: -0.7972972989082336]  7%|▋         | 37/500 [11:42:45<137:04:22, 1065.79s/trial, best loss: -0.7972972989082336]  8%|▊         | 38/500 [11:58:55<133:05:25, 1037.07s/trial, best loss: -0.7972972989082336]  8%|▊         | 39/500 [12:16:47<134:08:36, 1047.54s/trial, best loss: -0.7972972989082336]  8%|▊         | 40/500 [12:54:36<180:40:58, 1414.04s/trial, best loss: -0.7972972989082336]  8%|▊         | 41/500 [13:09:33<160:30:10, 1258.85s/trial, best loss: -0.7972972989082336]  8%|▊         | 42/500 [13:12:46<119:29:46, 939.27s/trial, best loss: -0.7972972989082336]   9%|▊         | 43/500 [13:45:50<159:01:14, 1252.68s/trial, best loss: -0.7972972989082336]  9%|▉         | 44/500 [13:50:34<121:52:07, 962.12s/trial, best loss: -0.7972972989082336]   9%|▉         | 45/500 [13:57:50<101:37:47, 804.10s/trial, best loss: -0.7972972989082336]  9%|▉         | 46/500 [14:07:58<94:00:46, 745.48s/trial, best loss: -0.7972972989082336]   9%|▉         | 47/500 [14:38:47<135:27:55, 1076.55s/trial, best loss: -0.7972972989082336] 10%|▉         | 48/500 [14:57:17<136:24:15, 1086.41s/trial, best loss: -0.7972972989082336] 10%|▉         | 49/500 [14:57:57<96:47:31, 772.62s/trial, best loss: -0.7972972989082336]   10%|█         | 50/500 [15:00:11<72:36:03, 580.81s/trial, best loss: -0.7972972989082336] 10%|█         | 51/500 [15:12:45<78:56:38, 632.96s/trial, best loss: -0.7972972989082336] 10%|█         | 52/500 [15:24:58<82:29:43, 662.91s/trial, best loss: -0.7972972989082336] 11%|█         | 53/500 [15:46:23<105:29:45, 849.63s/trial, best loss: -0.7972972989082336] 11%|█         | 54/500 [15:53:29<89:29:32, 722.36s/trial, best loss: -0.7972972989082336]  11%|█         | 55/500 [15:57:11<70:43:50, 572.20s/trial, best loss: -0.7972972989082336] 11%|█         | 56/500 [16:07:02<71:17:50, 578.09s/trial, best loss: -0.7972972989082336] 11%|█▏        | 57/500 [16:15:49<69:14:20, 562.66s/trial, best loss: -0.7972972989082336] 12%|█▏        | 58/500 [17:12:20<173:16:19, 1411.27s/trial, best loss: -0.7972972989082336] 12%|█▏        | 59/500 [17:12:57<122:21:13, 998.81s/trial, best loss: -0.7972972989082336]  12%|█▏        | 60/500 [17:29:18<121:25:31, 993.48s/trial, best loss: -0.7972972989082336] 12%|█▏        | 61/500 [18:02:44<158:12:52, 1297.43s/trial, best loss: -0.7972972989082336] 12%|█▏        | 62/500 [18:03:17<111:40:53, 917.93s/trial, best loss: -0.7972972989082336]  13%|█▎        | 63/500 [18:06:25<84:50:03, 698.86s/trial, best loss: -0.7972972989082336]  13%|█▎        | 64/500 [18:08:51<64:33:55, 533.11s/trial, best loss: -0.7972972989082336] 13%|█▎        | 65/500 [18:38:07<108:43:59, 899.86s/trial, best loss: -0.7972972989082336] 13%|█▎        | 66/500 [18:55:12<113:02:32, 937.68s/trial, best loss: -0.7972972989082336] 13%|█▎        | 67/500 [19:03:32<96:58:22, 806.24s/trial, best loss: -0.7972972989082336]  14%|█▎        | 68/500 [19:21:29<106:30:34, 887.58s/trial, best loss: -0.7972972989082336] 14%|█▍        | 69/500 [19:24:42<81:18:53, 679.20s/trial, best loss: -0.7972972989082336]  14%|█▍        | 70/500 [19:33:26<75:33:14, 632.54s/trial, best loss: -0.7972972989082336] 14%|█▍        | 71/500 [20:30:59<176:12:42, 1478.70s/trial, best loss: -0.7972972989082336] 14%|█▍        | 72/500 [20:34:33<130:41:07, 1099.22s/trial, best loss: -0.7972972989082336] 15%|█▍        | 73/500 [20:34:47<91:46:20, 773.72s/trial, best loss: -0.7972972989082336]   15%|█▍        | 74/500 [20:36:22<67:27:42, 570.10s/trial, best loss: -0.7972972989082336] 15%|█▌        | 75/500 [21:04:45<107:24:34, 909.82s/trial, best loss: -0.7972972989082336] 15%|█▌        | 76/500 [21:29:33<127:36:44, 1083.50s/trial, best loss: -0.7972972989082336] 15%|█▌        | 77/500 [21:46:17<124:30:26, 1059.64s/trial, best loss: -0.7972972989082336] 16%|█▌        | 78/500 [21:49:11<93:03:01, 793.80s/trial, best loss: -0.7972972989082336]   16%|█▌        | 79/500 [22:05:00<98:17:44, 840.53s/trial, best loss: -0.7972972989082336] 16%|█▌        | 80/500 [22:22:22<105:05:32, 900.79s/trial, best loss: -0.7972972989082336] 16%|█▌        | 81/500 [22:27:45<84:40:02, 727.45s/trial, best loss: -0.7972972989082336]  16%|█▋        | 82/500 [22:39:18<83:17:20, 717.32s/trial, best loss: -0.7972972989082336] 17%|█▋        | 83/500 [23:20:05<143:11:06, 1236.13s/trial, best loss: -0.7972972989082336] 17%|█▋        | 84/500 [23:27:53<116:12:29, 1005.65s/trial, best loss: -0.7972972989082336]^C
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m q
  JobNum  Status             Name      Job Name                              Cores used/reserved    GB        IO (r/w mbps)    Runtime/Q time    Comment     Nodes List
--------  -----------------  --------  ------------------------------------  ---------------------  --------  ---------------  ----------------  ----------  ------------
  201398  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  2.0 / 1x8              4.2 / 24  58.1/0           23.6 hrs          nocomment   gpu01(8)
  201399  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  2.0 / 1x8              4.2 / 24  46.5/0           23.6 hrs          nocomment   gpu02(8)
  201400  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.6 / 1x4              3.9 / 12  58.1/0           23.6 hrs          nocomment   gpu03(4)
  201401  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1 / 1x4                3.0 / 12  34.7/0           23.6 hrs          nocomment   gpu04(4)
  201402  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.9 / 1x8              4.2 / 24  69.8/0           23.6 hrs          nocomment   gpu05(8)

╒═══════════════════════╤══════════╤═════════════╤══════════╤══════════╤══════════╤═════════════╕
│ cores free in queue   │ NORMAL   │ BLACKHOLE   │ PLANET   │ CMB      │ BERG     │ GPULONG     │
╞═══════════════════════╪══════════╪═════════════╪══════════╪══════════╪══════════╪═════════════╡
│                       │ 31 / 40  │ 80 / 80     │ 66 / 96  │ 84 / 488 │ 82 / 448 │ 0 / 5 nodes │
╘═══════════════════════╧══════════╧═════════════╧══════════╧══════════╧══════════╧═════════════╛
You can use the command "n" ("n -t" for text-only) to list cores/GB availability on the compute nodes.
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m ^C
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m qtail -f Crab64080opt1_log.txt 
  69:     model.save('/users/exet4487/hypermodels/'+str(modelnumber)+str(modelcode)+'.h5')
  70:     # optionally store a dump of your model here so you can get it from the database later                                                                                                   
  71:     temp_name = tempfile.gettempdir()+'/'+modelnumber + '.h5'
  72:     model.save(temp_name)
  73:     #with open(temp_name, 'rb') as infile:
  74:     #model_bytes = infile.read()
  75:     #out['model_serial'] = model_bytes
  76:     return out
  77: 
  0%|          | 0/500 [00:00<?, ?trial/s, best loss=?]  0%|          | 1/500 [1:24:12<700:17:58, 5052.26s/trial, best loss: -0.7428793907165527]  0%|          | 2/500 [1:29:57<503:32:36, 3640.07s/trial, best loss: -0.7428793907165527]  1%|          | 3/500 [1:36:38<368:22:36, 2668.32s/trial, best loss: -0.7428793907165527]  1%|          | 4/500 [1:44:31<276:54:29, 2009.82s/trial, best loss: -0.7428793907165527]  1%|          | 5/500 [1:47:24<200:34:33, 1458.73s/trial, best loss: -0.7605509161949158]  1%|          | 6/500 [2:39:33<268:56:41, 1959.92s/trial, best loss: -0.7605509161949158]  1%|▏         | 7/500 [2:51:35<217:31:26, 1588.41s/trial, best loss: -0.7605509161949158]  2%|▏         | 8/500 [3:04:46<184:23:07, 1349.16s/trial, best loss: -0.7605509161949158]  2%|▏         | 9/500 [3:29:46<190:10:40, 1394.38s/trial, best loss: -0.7605509161949158]  2%|▏         | 10/500 [4:03:41<215:57:19, 1586.61s/trial, best loss: -0.7605509161949158]  2%|▏         | 11/500 [4:06:33<157:52:27, 1162.26s/trial, best loss: -0.7605509161949158]  2%|▏         | 12/500 [4:13:44<127:50:29, 943.09s/trial, best loss: -0.7605509161949158]   3%|▎         | 13/500 [4:47:38<171:48:50, 1270.08s/trial, best loss: -0.7605509161949158]  3%|▎         | 14/500 [5:01:47<154:24:27, 1143.76s/trial, best loss: -0.7605509161949158]  3%|▎         | 15/500 [5:16:23<143:17:02, 1063.55s/trial, best loss: -0.7605509161949158]  3%|▎         | 16/500 [5:40:28<158:21:30, 1177.87s/trial, best loss: -0.7605509161949158]  3%|▎         | 17/500 [5:43:32<118:02:08, 879.77s/trial, best loss: -0.7605509161949158]   4%|▎         | 18/500 [5:57:37<116:23:58, 869.37s/trial, best loss: -0.7605509161949158]  4%|▍         | 19/500 [6:09:22<109:34:58, 820.16s/trial, best loss: -0.7605509161949158]  4%|▍         | 20/500 [6:30:01<126:05:25, 945.68s/trial, best loss: -0.7611746191978455]  4%|▍         | 21/500 [7:16:14<198:45:54, 1493.85s/trial, best loss: -0.7611746191978455]  4%|▍         | 22/500 [7:17:07<140:58:19, 1061.71s/trial, best loss: -0.7611746191978455]  5%|▍         | 23/500 [7:18:48<102:28:39, 773.42s/trial, best loss: -0.7611746191978455]   5%|▍         | 24/500 [8:01:23<172:56:55, 1308.02s/trial, best loss: -0.7611746191978455]  5%|▌         | 25/500 [8:31:35<192:31:06, 1459.09s/trial, best loss: -0.7611746191978455]  5%|▌         | 26/500 [8:38:41<151:18:02, 1149.12s/trial, best loss: -0.7972972989082336]  5%|▌         | 27/500 [8:40:41<110:24:46, 840.35s/trial, best loss: -0.7972972989082336]   6%|▌         | 28/500 [8:50:54<101:14:31, 772.18s/trial, best loss: -0.7972972989082336]  6%|▌         | 29/500 [9:09:37<114:48:45, 877.55s/trial, best loss: -0.7972972989082336]  6%|▌         | 30/500 [10:02:43<204:58:08, 1569.98s/trial, best loss: -0.7972972989082336]  6%|▌         | 31/500 [10:10:20<161:02:34, 1236.15s/trial, best loss: -0.7972972989082336]  6%|▋         | 32/500 [10:15:29<124:32:54, 958.07s/trial, best loss: -0.7972972989082336]   7%|▋         | 33/500 [10:23:44<106:14:47, 819.03s/trial, best loss: -0.7972972989082336]  7%|▋         | 34/500 [10:57:02<151:47:45, 1172.67s/trial, best loss: -0.7972972989082336]  7%|▋         | 35/500 [11:00:25<113:55:00, 881.94s/trial, best loss: -0.7972972989082336]   7%|▋         | 36/500 [11:24:10<134:38:40, 1044.66s/trial, best loss: -0.7972972989082336]  7%|▋         | 37/500 [11:42:45<137:04:22, 1065.79s/trial, best loss: -0.7972972989082336]  8%|▊         | 38/500 [11:58:55<133:05:25, 1037.07s/trial, best loss: -0.7972972989082336]  8%|▊         | 39/500 [12:16:47<134:08:36, 1047.54s/trial, best loss: -0.7972972989082336]  8%|▊         | 40/500 [12:54:36<180:40:58, 1414.04s/trial, best loss: -0.7972972989082336]  8%|▊         | 41/500 [13:09:33<160:30:10, 1258.85s/trial, best loss: -0.7972972989082336]  8%|▊         | 42/500 [13:12:46<119:29:46, 939.27s/trial, best loss: -0.7972972989082336]   9%|▊         | 43/500 [13:45:50<159:01:14, 1252.68s/trial, best loss: -0.7972972989082336]  9%|▉         | 44/500 [13:50:34<121:52:07, 962.12s/trial, best loss: -0.7972972989082336]   9%|▉         | 45/500 [13:57:50<101:37:47, 804.10s/trial, best loss: -0.7972972989082336]  9%|▉         | 46/500 [14:07:58<94:00:46, 745.48s/trial, best loss: -0.7972972989082336]   9%|▉         | 47/500 [14:38:47<135:27:55, 1076.55s/trial, best loss: -0.7972972989082336] 10%|▉         | 48/500 [14:57:17<136:24:15, 1086.41s/trial, best loss: -0.7972972989082336] 10%|▉         | 49/500 [14:57:57<96:47:31, 772.62s/trial, best loss: -0.7972972989082336]   10%|█         | 50/500 [15:00:11<72:36:03, 580.81s/trial, best loss: -0.7972972989082336] 10%|█         | 51/500 [15:12:45<78:56:38, 632.96s/trial, best loss: -0.7972972989082336] 10%|█         | 52/500 [15:24:58<82:29:43, 662.91s/trial, best loss: -0.7972972989082336] 11%|█         | 53/500 [15:46:23<105:29:45, 849.63s/trial, best loss: -0.7972972989082336] 11%|█         | 54/500 [15:53:29<89:29:32, 722.36s/trial, best loss: -0.7972972989082336]  11%|█         | 55/500 [15:57:11<70:43:50, 572.20s/trial, best loss: -0.7972972989082336] 11%|█         | 56/500 [16:07:02<71:17:50, 578.09s/trial, best loss: -0.7972972989082336] 11%|█▏        | 57/500 [16:15:49<69:14:20, 562.66s/trial, best loss: -0.7972972989082336] 12%|█▏        | 58/500 [17:12:20<173:16:19, 1411.27s/trial, best loss: -0.7972972989082336] 12%|█▏        | 59/500 [17:12:57<122:21:13, 998.81s/trial, best loss: -0.7972972989082336]  12%|█▏        | 60/500 [17:29:18<121:25:31, 993.48s/trial, best loss: -0.7972972989082336] 12%|█▏        | 61/500 [18:02:44<158:12:52, 1297.43s/trial, best loss: -0.7972972989082336] 12%|█▏        | 62/500 [18:03:17<111:40:53, 917.93s/trial, best loss: -0.7972972989082336]  13%|█▎        | 63/500 [18:06:25<84:50:03, 698.86s/trial, best loss: -0.7972972989082336]  13%|█▎        | 64/500 [18:08:51<64:33:55, 533.11s/trial, best loss: -0.7972972989082336] 13%|█▎        | 65/500 [18:38:07<108:43:59, 899.86s/trial, best loss: -0.7972972989082336] 13%|█▎        | 66/500 [18:55:12<113:02:32, 937.68s/trial, best loss: -0.7972972989082336] 13%|█▎        | 67/500 [19:03:32<96:58:22, 806.24s/trial, best loss: -0.7972972989082336]  14%|█▎        | 68/500 [19:21:29<106:30:34, 887.58s/trial, best loss: -0.7972972989082336] 14%|█▍        | 69/500 [19:24:42<81:18:53, 679.20s/trial, best loss: -0.7972972989082336]  14%|█▍        | 70/500 [19:33:26<75:33:14, 632.54s/trial, best loss: -0.7972972989082336] 14%|█▍        | 71/500 [20:30:59<176:12:42, 1478.70s/trial, best loss: -0.7972972989082336] 14%|█▍        | 72/500 [20:34:33<130:41:07, 1099.22s/trial, best loss: -0.7972972989082336] 15%|█▍        | 73/500 [20:34:47<91:46:20, 773.72s/trial, best loss: -0.7972972989082336]   15%|█▍        | 74/500 [20:36:22<67:27:42, 570.10s/trial, best loss: -0.7972972989082336] 15%|█▌        | 75/500 [21:04:45<107:24:34, 909.82s/trial, best loss: -0.7972972989082336] 15%|█▌        | 76/500 [21:29:33<127:36:44, 1083.50s/trial, best loss: -0.7972972989082336] 15%|█▌        | 77/500 [21:46:17<124:30:26, 1059.64s/trial, best loss: -0.7972972989082336] 16%|█▌        | 78/500 [21:49:11<93:03:01, 793.80s/trial, best loss: -0.7972972989082336]   16%|█▌        | 79/500 [22:05:00<98:17:44, 840.53s/trial, best loss: -0.7972972989082336] 16%|█▌        | 80/500 [22:22:22<105:05:32, 900.79s/trial, best loss: -0.7972972989082336] 16%|█▌        | 81/500 [22:27:45<84:40:02, 727.45s/trial, best loss: -0.7972972989082336]  16%|█▋        | 82/500 [22:39:18<83:17:20, 717.32s/trial, best loss: -0.7972972989082336] 17%|█▋        | 83/500 [23:20:05<143:11:06, 1236.13s/trial, best loss: -0.7972972989082336] 17%|█▋        | 84/500 [23:27:53<116:12:29, 1005.65s/trial, best loss: -0.7972972989082336] 17%|█▋        | 85/500 [23:38:26<103:03:20, 893.98s/trial, best loss: -0.7972972989082336] tail: Crab64080opt1_log.txt: Invalid argument
tail: no files remaining
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m q
  JobNum  Status             Name      Job Name                              Cores used/reserved    GB        IO (r/w mbps)    Runtime/Q time    Comment     Nodes List
--------  -----------------  --------  ------------------------------------  ---------------------  --------  ---------------  ----------------  ----------  ------------
  201398  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  2.1 / 1x8              4.0 / 24  46.5/0           1.0 days          nocomment   gpu01(8)
  201399  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.9 / 1x8              4.5 / 24  34.9/0           1.0 days          nocomment   gpu02(8)
  201400  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.4 / 1x4              4.0 / 12  81.4/0           1.0 days          nocomment   gpu03(4)
  201401  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  0.9 / 1x4              2.8 / 12  46.5/0           1.0 days          nocomment   gpu04(4)
  201402  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  2.1 / 1x8              4.3 / 24  46.5/0           1.0 days          nocomment   gpu05(8)

╒═══════════════════════╤══════════╤═════════════╤══════════╤═══════════╤══════════╤═════════════╕
│ cores free in queue   │ NORMAL   │ BLACKHOLE   │ PLANET   │ CMB       │ BERG     │ GPULONG     │
╞═══════════════════════╪══════════╪═════════════╪══════════╪═══════════╪══════════╪═════════════╡
│                       │ 32 / 40  │ 80 / 80     │ 66 / 96  │ 104 / 488 │ 82 / 448 │ 0 / 5 nodes │
╘═══════════════════════╧══════════╧═════════════╧══════════╧═══════════╧══════════╧═════════════╛
You can use the command "n" ("n -t" for text-only) to list cores/GB availability on the compute nodes.
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m qtail -f Crab64080opt1_log.txt 
  69:     model.save('/users/exet4487/hypermodels/'+str(modelnumber)+str(modelcode)+'.h5')
  70:     # optionally store a dump of your model here so you can get it from the database later                                                                                                   
  71:     temp_name = tempfile.gettempdir()+'/'+modelnumber + '.h5'
  72:     model.save(temp_name)
  73:     #with open(temp_name, 'rb') as infile:
  74:     #model_bytes = infile.read()
  75:     #out['model_serial'] = model_bytes
  76:     return out
  77: 
  0%|          | 0/500 [00:00<?, ?trial/s, best loss=?]  0%|          | 1/500 [1:24:12<700:17:58, 5052.26s/trial, best loss: -0.7428793907165527]  0%|          | 2/500 [1:29:57<503:32:36, 3640.07s/trial, best loss: -0.7428793907165527]  1%|          | 3/500 [1:36:38<368:22:36, 2668.32s/trial, best loss: -0.7428793907165527]  1%|          | 4/500 [1:44:31<276:54:29, 2009.82s/trial, best loss: -0.7428793907165527]  1%|          | 5/500 [1:47:24<200:34:33, 1458.73s/trial, best loss: -0.7605509161949158]  1%|          | 6/500 [2:39:33<268:56:41, 1959.92s/trial, best loss: -0.7605509161949158]  1%|▏         | 7/500 [2:51:35<217:31:26, 1588.41s/trial, best loss: -0.7605509161949158]  2%|▏         | 8/500 [3:04:46<184:23:07, 1349.16s/trial, best loss: -0.7605509161949158]  2%|▏         | 9/500 [3:29:46<190:10:40, 1394.38s/trial, best loss: -0.7605509161949158]  2%|▏         | 10/500 [4:03:41<215:57:19, 1586.61s/trial, best loss: -0.7605509161949158]  2%|▏         | 11/500 [4:06:33<157:52:27, 1162.26s/trial, best loss: -0.7605509161949158]  2%|▏         | 12/500 [4:13:44<127:50:29, 943.09s/trial, best loss: -0.7605509161949158]   3%|▎         | 13/500 [4:47:38<171:48:50, 1270.08s/trial, best loss: -0.7605509161949158]  3%|▎         | 14/500 [5:01:47<154:24:27, 1143.76s/trial, best loss: -0.7605509161949158]  3%|▎         | 15/500 [5:16:23<143:17:02, 1063.55s/trial, best loss: -0.7605509161949158]  3%|▎         | 16/500 [5:40:28<158:21:30, 1177.87s/trial, best loss: -0.7605509161949158]  3%|▎         | 17/500 [5:43:32<118:02:08, 879.77s/trial, best loss: -0.7605509161949158]   4%|▎         | 18/500 [5:57:37<116:23:58, 869.37s/trial, best loss: -0.7605509161949158]  4%|▍         | 19/500 [6:09:22<109:34:58, 820.16s/trial, best loss: -0.7605509161949158]  4%|▍         | 20/500 [6:30:01<126:05:25, 945.68s/trial, best loss: -0.7611746191978455]  4%|▍         | 21/500 [7:16:14<198:45:54, 1493.85s/trial, best loss: -0.7611746191978455]  4%|▍         | 22/500 [7:17:07<140:58:19, 1061.71s/trial, best loss: -0.7611746191978455]  5%|▍         | 23/500 [7:18:48<102:28:39, 773.42s/trial, best loss: -0.7611746191978455]   5%|▍         | 24/500 [8:01:23<172:56:55, 1308.02s/trial, best loss: -0.7611746191978455]  5%|▌         | 25/500 [8:31:35<192:31:06, 1459.09s/trial, best loss: -0.7611746191978455]  5%|▌         | 26/500 [8:38:41<151:18:02, 1149.12s/trial, best loss: -0.7972972989082336]  5%|▌         | 27/500 [8:40:41<110:24:46, 840.35s/trial, best loss: -0.7972972989082336]   6%|▌         | 28/500 [8:50:54<101:14:31, 772.18s/trial, best loss: -0.7972972989082336]  6%|▌         | 29/500 [9:09:37<114:48:45, 877.55s/trial, best loss: -0.7972972989082336]  6%|▌         | 30/500 [10:02:43<204:58:08, 1569.98s/trial, best loss: -0.7972972989082336]  6%|▌         | 31/500 [10:10:20<161:02:34, 1236.15s/trial, best loss: -0.7972972989082336]  6%|▋         | 32/500 [10:15:29<124:32:54, 958.07s/trial, best loss: -0.7972972989082336]   7%|▋         | 33/500 [10:23:44<106:14:47, 819.03s/trial, best loss: -0.7972972989082336]  7%|▋         | 34/500 [10:57:02<151:47:45, 1172.67s/trial, best loss: -0.7972972989082336]  7%|▋         | 35/500 [11:00:25<113:55:00, 881.94s/trial, best loss: -0.7972972989082336]   7%|▋         | 36/500 [11:24:10<134:38:40, 1044.66s/trial, best loss: -0.7972972989082336]  7%|▋         | 37/500 [11:42:45<137:04:22, 1065.79s/trial, best loss: -0.7972972989082336]  8%|▊         | 38/500 [11:58:55<133:05:25, 1037.07s/trial, best loss: -0.7972972989082336]  8%|▊         | 39/500 [12:16:47<134:08:36, 1047.54s/trial, best loss: -0.7972972989082336]  8%|▊         | 40/500 [12:54:36<180:40:58, 1414.04s/trial, best loss: -0.7972972989082336]  8%|▊         | 41/500 [13:09:33<160:30:10, 1258.85s/trial, best loss: -0.7972972989082336]  8%|▊         | 42/500 [13:12:46<119:29:46, 939.27s/trial, best loss: -0.7972972989082336]   9%|▊         | 43/500 [13:45:50<159:01:14, 1252.68s/trial, best loss: -0.7972972989082336]  9%|▉         | 44/500 [13:50:34<121:52:07, 962.12s/trial, best loss: -0.7972972989082336]   9%|▉         | 45/500 [13:57:50<101:37:47, 804.10s/trial, best loss: -0.7972972989082336]  9%|▉         | 46/500 [14:07:58<94:00:46, 745.48s/trial, best loss: -0.7972972989082336]   9%|▉         | 47/500 [14:38:47<135:27:55, 1076.55s/trial, best loss: -0.7972972989082336] 10%|▉         | 48/500 [14:57:17<136:24:15, 1086.41s/trial, best loss: -0.7972972989082336] 10%|▉         | 49/500 [14:57:57<96:47:31, 772.62s/trial, best loss: -0.7972972989082336]   10%|█         | 50/500 [15:00:11<72:36:03, 580.81s/trial, best loss: -0.7972972989082336] 10%|█         | 51/500 [15:12:45<78:56:38, 632.96s/trial, best loss: -0.7972972989082336] 10%|█         | 52/500 [15:24:58<82:29:43, 662.91s/trial, best loss: -0.7972972989082336] 11%|█         | 53/500 [15:46:23<105:29:45, 849.63s/trial, best loss: -0.7972972989082336] 11%|█         | 54/500 [15:53:29<89:29:32, 722.36s/trial, best loss: -0.7972972989082336]  11%|█         | 55/500 [15:57:11<70:43:50, 572.20s/trial, best loss: -0.7972972989082336] 11%|█         | 56/500 [16:07:02<71:17:50, 578.09s/trial, best loss: -0.7972972989082336] 11%|█▏        | 57/500 [16:15:49<69:14:20, 562.66s/trial, best loss: -0.7972972989082336] 12%|█▏        | 58/500 [17:12:20<173:16:19, 1411.27s/trial, best loss: -0.7972972989082336] 12%|█▏        | 59/500 [17:12:57<122:21:13, 998.81s/trial, best loss: -0.7972972989082336]  12%|█▏        | 60/500 [17:29:18<121:25:31, 993.48s/trial, best loss: -0.7972972989082336] 12%|█▏        | 61/500 [18:02:44<158:12:52, 1297.43s/trial, best loss: -0.7972972989082336] 12%|█▏        | 62/500 [18:03:17<111:40:53, 917.93s/trial, best loss: -0.7972972989082336]  13%|█▎        | 63/500 [18:06:25<84:50:03, 698.86s/trial, best loss: -0.7972972989082336]  13%|█▎        | 64/500 [18:08:51<64:33:55, 533.11s/trial, best loss: -0.7972972989082336] 13%|█▎        | 65/500 [18:38:07<108:43:59, 899.86s/trial, best loss: -0.7972972989082336] 13%|█▎        | 66/500 [18:55:12<113:02:32, 937.68s/trial, best loss: -0.7972972989082336] 13%|█▎        | 67/500 [19:03:32<96:58:22, 806.24s/trial, best loss: -0.7972972989082336]  14%|█▎        | 68/500 [19:21:29<106:30:34, 887.58s/trial, best loss: -0.7972972989082336] 14%|█▍        | 69/500 [19:24:42<81:18:53, 679.20s/trial, best loss: -0.7972972989082336]  14%|█▍        | 70/500 [19:33:26<75:33:14, 632.54s/trial, best loss: -0.7972972989082336] 14%|█▍        | 71/500 [20:30:59<176:12:42, 1478.70s/trial, best loss: -0.7972972989082336] 14%|█▍        | 72/500 [20:34:33<130:41:07, 1099.22s/trial, best loss: -0.7972972989082336] 15%|█▍        | 73/500 [20:34:47<91:46:20, 773.72s/trial, best loss: -0.7972972989082336]   15%|█▍        | 74/500 [20:36:22<67:27:42, 570.10s/trial, best loss: -0.7972972989082336] 15%|█▌        | 75/500 [21:04:45<107:24:34, 909.82s/trial, best loss: -0.7972972989082336] 15%|█▌        | 76/500 [21:29:33<127:36:44, 1083.50s/trial, best loss: -0.7972972989082336] 15%|█▌        | 77/500 [21:46:17<124:30:26, 1059.64s/trial, best loss: -0.7972972989082336] 16%|█▌        | 78/500 [21:49:11<93:03:01, 793.80s/trial, best loss: -0.7972972989082336]   16%|█▌        | 79/500 [22:05:00<98:17:44, 840.53s/trial, best loss: -0.7972972989082336] 16%|█▌        | 80/500 [22:22:22<105:05:32, 900.79s/trial, best loss: -0.7972972989082336] 16%|█▌        | 81/500 [22:27:45<84:40:02, 727.45s/trial, best loss: -0.7972972989082336]  16%|█▋        | 82/500 [22:39:18<83:17:20, 717.32s/trial, best loss: -0.7972972989082336] 17%|█▋        | 83/500 [23:20:05<143:11:06, 1236.13s/trial, best loss: -0.7972972989082336] 17%|█▋        | 84/500 [23:27:53<116:12:29, 1005.65s/trial, best loss: -0.7972972989082336] 17%|█▋        | 85/500 [23:38:26<103:03:20, 893.98s/trial, best loss: -0.7972972989082336]  17%|█▋        | 86/500 [24:06:35<130:14:11, 1132.49s/trial, best loss: -0.7972972989082336] 17%|█▋        | 87/500 [24:15:54<110:10:34, 960.37s/trial, best loss: -0.8070166110992432] ^C
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m q
  JobNum  Status             Name      Job Name                              Cores used/reserved    GB        IO (r/w mbps)    Runtime/Q time    Comment     Nodes List
--------  -----------------  --------  ------------------------------------  ---------------------  --------  ---------------  ----------------  ----------  ------------
  201398  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  2.1 / 1x8              4.0 / 24  46.5/0           1.0 days          nocomment   gpu01(8)
  201399  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.9 / 1x8              4.5 / 24  34.9/0           1.0 days          nocomment   gpu02(8)
  201400  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.4 / 1x4              4.0 / 12  81.4/0           1.0 days          nocomment   gpu03(4)
  201401  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  0.9 / 1x4              2.8 / 12  46.5/0           1.0 days          nocomment   gpu04(4)
  201402  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  2.1 / 1x8              4.3 / 24  46.5/0           1.0 days          nocomment   gpu05(8)

╒═══════════════════════╤══════════╤═════════════╤══════════╤═══════════╤══════════╤═════════════╕
│ cores free in queue   │ NORMAL   │ BLACKHOLE   │ PLANET   │ CMB       │ BERG     │ GPULONG     │
╞═══════════════════════╪══════════╪═════════════╪══════════╪═══════════╪══════════╪═════════════╡
│                       │ 32 / 40  │ 80 / 80     │ 66 / 96  │ 104 / 488 │ 82 / 448 │ 0 / 5 nodes │
╘═══════════════════════╧══════════╧═════════════╧══════════╧═══════════╧══════════╧═════════════╛
You can use the command "n" ("n -t" for text-only) to list cores/GB availability on the compute nodes.
(venv) [1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m qtail -f Crab64080opt1_log.txt 
  69:     model.save('/users/exet4487/hypermodels/'+str(modelnumber)+str(modelcode)+'.h5')
  70:     # optionally store a dump of your model here so you can get it from the database later                                                                                                   
  71:     temp_name = tempfile.gettempdir()+'/'+modelnumber + '.h5'
  72:     model.save(temp_name)
  73:     #with open(temp_name, 'rb') as infile:
  74:     #model_bytes = infile.read()
  75:     #out['model_serial'] = model_bytes
  76:     return out
  77: 
  0%|          | 0/500 [00:00<?, ?trial/s, best loss=?]  0%|          | 1/500 [1:24:12<700:17:58, 5052.26s/trial, best loss: -0.7428793907165527]  0%|          | 2/500 [1:29:57<503:32:36, 3640.07s/trial, best loss: -0.7428793907165527]  1%|          | 3/500 [1:36:38<368:22:36, 2668.32s/trial, best loss: -0.7428793907165527]  1%|          | 4/500 [1:44:31<276:54:29, 2009.82s/trial, best loss: -0.7428793907165527]  1%|          | 5/500 [1:47:24<200:34:33, 1458.73s/trial, best loss: -0.7605509161949158]  1%|          | 6/500 [2:39:33<268:56:41, 1959.92s/trial, best loss: -0.7605509161949158]  1%|▏         | 7/500 [2:51:35<217:31:26, 1588.41s/trial, best loss: -0.7605509161949158]  2%|▏         | 8/500 [3:04:46<184:23:07, 1349.16s/trial, best loss: -0.7605509161949158]  2%|▏         | 9/500 [3:29:46<190:10:40, 1394.38s/trial, best loss: -0.7605509161949158]  2%|▏         | 10/500 [4:03:41<215:57:19, 1586.61s/trial, best loss: -0.7605509161949158]  2%|▏         | 11/500 [4:06:33<157:52:27, 1162.26s/trial, best loss: -0.7605509161949158]  2%|▏         | 12/500 [4:13:44<127:50:29, 943.09s/trial, best loss: -0.7605509161949158]   3%|▎         | 13/500 [4:47:38<171:48:50, 1270.08s/trial, best loss: -0.7605509161949158]  3%|▎         | 14/500 [5:01:47<154:24:27, 1143.76s/trial, best loss: -0.7605509161949158]  3%|▎         | 15/500 [5:16:23<143:17:02, 1063.55s/trial, best loss: -0.7605509161949158]  3%|▎         | 16/500 [5:40:28<158:21:30, 1177.87s/trial, best loss: -0.7605509161949158]  3%|▎         | 17/500 [5:43:32<118:02:08, 879.77s/trial, best loss: -0.7605509161949158]   4%|▎         | 18/500 [5:57:37<116:23:58, 869.37s/trial, best loss: -0.7605509161949158]  4%|▍         | 19/500 [6:09:22<109:34:58, 820.16s/trial, best loss: -0.7605509161949158]  4%|▍         | 20/500 [6:30:01<126:05:25, 945.68s/trial, best loss: -0.7611746191978455]  4%|▍         | 21/500 [7:16:14<198:45:54, 1493.85s/trial, best loss: -0.7611746191978455]  4%|▍         | 22/500 [7:17:07<140:58:19, 1061.71s/trial, best loss: -0.7611746191978455]  5%|▍         | 23/500 [7:18:48<102:28:39, 773.42s/trial, best loss: -0.7611746191978455]   5%|▍         | 24/500 [8:01:23<172:56:55, 1308.02s/trial, best loss: -0.7611746191978455]  5%|▌         | 25/500 [8:31:35<192:31:06, 1459.09s/trial, best loss: -0.7611746191978455]  5%|▌         | 26/500 [8:38:41<151:18:02, 1149.12s/trial, best loss: -0.7972972989082336]  5%|▌         | 27/500 [8:40:41<110:24:46, 840.35s/trial, best loss: -0.7972972989082336]   6%|▌         | 28/500 [8:50:54<101:14:31, 772.18s/trial, best loss: -0.7972972989082336]  6%|▌         | 29/500 [9:09:37<114:48:45, 877.55s/trial, best loss: -0.7972972989082336]  6%|▌         | 30/500 [10:02:43<204:58:08, 1569.98s/trial, best loss: -0.7972972989082336]  6%|▌         | 31/500 [10:10:20<161:02:34, 1236.15s/trial, best loss: -0.7972972989082336]  6%|▋         | 32/500 [10:15:29<124:32:54, 958.07s/trial, best loss: -0.7972972989082336]   7%|▋         | 33/500 [10:23:44<106:14:47, 819.03s/trial, best loss: -0.7972972989082336]  7%|▋         | 34/500 [10:57:02<151:47:45, 1172.67s/trial, best loss: -0.7972972989082336]  7%|▋         | 35/500 [11:00:25<113:55:00, 881.94s/trial, best loss: -0.7972972989082336]   7%|▋         | 36/500 [11:24:10<134:38:40, 1044.66s/trial, best loss: -0.7972972989082336]  7%|▋         | 37/500 [11:42:45<137:04:22, 1065.79s/trial, best loss: -0.7972972989082336]  8%|▊         | 38/500 [11:58:55<133:05:25, 1037.07s/trial, best loss: -0.7972972989082336]  8%|▊         | 39/500 [12:16:47<134:08:36, 1047.54s/trial, best loss: -0.7972972989082336]  8%|▊         | 40/500 [12:54:36<180:40:58, 1414.04s/trial, best loss: -0.7972972989082336]  8%|▊         | 41/500 [13:09:33<160:30:10, 1258.85s/trial, best loss: -0.7972972989082336]  8%|▊         | 42/500 [13:12:46<119:29:46, 939.27s/trial, best loss: -0.7972972989082336]   9%|▊         | 43/500 [13:45:50<159:01:14, 1252.68s/trial, best loss: -0.7972972989082336]  9%|▉         | 44/500 [13:50:34<121:52:07, 962.12s/trial, best loss: -0.7972972989082336]   9%|▉         | 45/500 [13:57:50<101:37:47, 804.10s/trial, best loss: -0.7972972989082336]  9%|▉         | 46/500 [14:07:58<94:00:46, 745.48s/trial, best loss: -0.7972972989082336]   9%|▉         | 47/500 [14:38:47<135:27:55, 1076.55s/trial, best loss: -0.7972972989082336] 10%|▉         | 48/500 [14:57:17<136:24:15, 1086.41s/trial, best loss: -0.7972972989082336] 10%|▉         | 49/500 [14:57:57<96:47:31, 772.62s/trial, best loss: -0.7972972989082336]   10%|█         | 50/500 [15:00:11<72:36:03, 580.81s/trial, best loss: -0.7972972989082336] 10%|█         | 51/500 [15:12:45<78:56:38, 632.96s/trial, best loss: -0.7972972989082336] 10%|█         | 52/500 [15:24:58<82:29:43, 662.91s/trial, best loss: -0.7972972989082336] 11%|█         | 53/500 [15:46:23<105:29:45, 849.63s/trial, best loss: -0.7972972989082336] 11%|█         | 54/500 [15:53:29<89:29:32, 722.36s/trial, best loss: -0.7972972989082336]  11%|█         | 55/500 [15:57:11<70:43:50, 572.20s/trial, best loss: -0.7972972989082336] 11%|█         | 56/500 [16:07:02<71:17:50, 578.09s/trial, best loss: -0.7972972989082336] 11%|█▏        | 57/500 [16:15:49<69:14:20, 562.66s/trial, best loss: -0.7972972989082336] 12%|█▏        | 58/500 [17:12:20<173:16:19, 1411.27s/trial, best loss: -0.7972972989082336] 12%|█▏        | 59/500 [17:12:57<122:21:13, 998.81s/trial, best loss: -0.7972972989082336]  12%|█▏        | 60/500 [17:29:18<121:25:31, 993.48s/trial, best loss: -0.7972972989082336] 12%|█▏        | 61/500 [18:02:44<158:12:52, 1297.43s/trial, best loss: -0.7972972989082336] 12%|█▏        | 62/500 [18:03:17<111:40:53, 917.93s/trial, best loss: -0.7972972989082336]  13%|█▎        | 63/500 [18:06:25<84:50:03, 698.86s/trial, best loss: -0.7972972989082336]  13%|█▎        | 64/500 [18:08:51<64:33:55, 533.11s/trial, best loss: -0.7972972989082336] 13%|█▎        | 65/500 [18:38:07<108:43:59, 899.86s/trial, best loss: -0.7972972989082336] 13%|█▎        | 66/500 [18:55:12<113:02:32, 937.68s/trial, best loss: -0.7972972989082336] 13%|█▎        | 67/500 [19:03:32<96:58:22, 806.24s/trial, best loss: -0.7972972989082336]  14%|█▎        | 68/500 [19:21:29<106:30:34, 887.58s/trial, best loss: -0.7972972989082336] 14%|█▍        | 69/500 [19:24:42<81:18:53, 679.20s/trial, best loss: -0.7972972989082336]  14%|█▍        | 70/500 [19:33:26<75:33:14, 632.54s/trial, best loss: -0.7972972989082336] 14%|█▍        | 71/500 [20:30:59<176:12:42, 1478.70s/trial, best loss: -0.7972972989082336] 14%|█▍        | 72/500 [20:34:33<130:41:07, 1099.22s/trial, best loss: -0.7972972989082336] 15%|█▍        | 73/500 [20:34:47<91:46:20, 773.72s/trial, best loss: -0.7972972989082336]   15%|█▍        | 74/500 [20:36:22<67:27:42, 570.10s/trial, best loss: -0.7972972989082336] 15%|█▌        | 75/500 [21:04:45<107:24:34, 909.82s/trial, best loss: -0.7972972989082336] 15%|█▌        | 76/500 [21:29:33<127:36:44, 1083.50s/trial, best loss: -0.7972972989082336] 15%|█▌        | 77/500 [21:46:17<124:30:26, 1059.64s/trial, best loss: -0.7972972989082336] 16%|█▌        | 78/500 [21:49:11<93:03:01, 793.80s/trial, best loss: -0.7972972989082336]   16%|█▌        | 79/500 [22:05:00<98:17:44, 840.53s/trial, best loss: -0.7972972989082336] 16%|█▌        | 80/500 [22:22:22<105:05:32, 900.79s/trial, best loss: -0.7972972989082336] 16%|█▌        | 81/500 [22:27:45<84:40:02, 727.45s/trial, best loss: -0.7972972989082336]  16%|█▋        | 82/500 [22:39:18<83:17:20, 717.32s/trial, best loss: -0.7972972989082336] 17%|█▋        | 83/500 [23:20:05<143:11:06, 1236.13s/trial, best loss: -0.7972972989082336] 17%|█▋        | 84/500 [23:27:53<116:12:29, 1005.65s/trial, best loss: -0.7972972989082336] 17%|█▋        | 85/500 [23:38:26<103:03:20, 893.98s/trial, best loss: -0.7972972989082336]  17%|█▋        | 86/500 [24:06:35<130:14:11, 1132.49s/trial, best loss: -0.7972972989082336] 17%|█▋        | 87/500 [24:15:54<110:10:34, 960.37s/trial, best loss: -0.8070166110992432]  18%|█▊        | 88/500 [24:37:43<121:52:33, 1064.93s/trial, best loss: -0.8070166110992432] 18%|█▊        | 89/500 [25:04:08<139:24:00, 1221.02s/trial, best loss: -0.8070166110992432] 18%|█▊        | 90/500 [25:29:35<149:31:08, 1312.85s/trial, best loss: -0.8070166110992432] 18%|█▊        | 91/500 [25:36:54<119:21:49, 1050.63s/trial, best loss: -0.8070166110992432] 18%|█▊        | 92/500 [25:52:42<115:35:04, 1019.86s/trial, best loss: -0.8070166110992432] 19%|█▊        | 93/500 [25:56:00<87:25:28, 773.29s/trial, best loss: -0.8070166110992432]   19%|█▉        | 94/500 [26:11:22<92:14:37, 817.93s/trial, best loss: -0.8070166110992432] 19%|█▉        | 95/500 [27:05:51<174:42:49, 1553.01s/trial, best loss: -0.8070166110992432] 19%|█▉        | 96/500 [27:07:33<125:25:55, 1117.71s/trial, best loss: -0.8070166110992432] 19%|█▉        | 97/500 [27:11:55<96:23:53, 861.13s/trial, best loss: -0.8070166110992432]   20%|█▉        | 98/500 [27:31:16<106:12:05, 951.06s/trial, best loss: -0.8070166110992432] 20%|█▉        | 99/500 [27:43:16<98:14:09, 881.92s/trial, best loss: -0.8070166110992432]  20%|██        | 100/500 [27:52:47<87:35:41, 788.35s/trial, best loss: -0.8070166110992432] 20%|██        | 101/500 [28:27:43<130:52:43, 1180.86s/trial, best loss: -0.8070166110992432] 20%|██        | 102/500 [28:43:29<122:45:08, 1110.32s/trial, best loss: -0.8070166110992432] 21%|██        | 103/500 [28:52:52<104:20:34, 946.18s/trial, best loss: -0.8070166110992432]  21%|██        | 104/500 [29:03:37<94:08:32, 855.84s/trial, best loss: -0.8070166110992432]  21%|██        | 105/500 [29:06:58<72:20:53, 659.38s/trial, best loss: -0.8070166110992432]^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B^[[B                                                                                    
 21%|██        | 106/500 [29:36:54<109:28:37, 1000.30s/trial, best loss: -0.8070166110992432] 21%|██▏       | 107/500 [30:03:55<129:32:04, 1186.58s/trial, best loss: -0.8070166110992432] 22%|██▏       | 108/500 [30:13:35<109:22:36, 1004.48s/trial, best loss: -0.8070166110992432] 22%|██▏       | 109/500 [30:37:32<123:12:21, 1134.38s/trial, best loss: -0.8070166110992432] 22%|██▏       | 110/500 [30:44:08<98:53:36, 912.86s/trial, best loss: -0.8070166110992432]   22%|██▏       | 111/500 [30:47:05<74:47:37, 692.18s/trial, best loss: -0.8070166110992432] 22%|██▏       | 112/500 [31:01:20<79:50:50, 740.85s/trial, best loss: -0.8070166110992432] 23%|██▎       | 113/500 [31:10:26<73:22:06, 682.50s/trial, best loss: -0.8070166110992432] 23%|██▎       | 114/500 [31:37:58<104:21:47, 973.34s/trial, best loss: -0.8070166110992432] 23%|██▎       | 115/500 [31:48:04<92:18:18, 863.11s/trial, best loss: -0.8070166110992432]  23%|██▎       | 116/500 [32:05:19<97:34:01, 914.69s/trial, best loss: -0.8070166110992432] 23%|██▎       | 117/500 [32:13:55<84:35:49, 795.17s/trial, best loss: -0.8070166110992432] 24%|██▎       | 118/500 [32:15:49<62:40:22, 590.63s/trial, best loss: -0.8070166110992432] 24%|██▍       | 119/500 [32:33:42<77:49:34, 735.37s/trial, best loss: -0.8070166110992432] 24%|██▍       | 120/500 [33:25:01<151:50:52, 1438.56s/trial, best loss: -0.8070166110992432] 24%|██▍       | 121/500 [33:30:15<115:54:45, 1101.02s/trial, best loss: -0.8070166110992432] 24%|██▍       | 122/500 [33:41:11<101:36:26, 967.69s/trial, best loss: -0.8070166110992432]  25%|██▍       | 123/500 [33:53:31<94:10:13, 899.24s/trial, best loss: -0.8070166110992432]  25%|██▍       | 124/500 [34:00:52<79:35:00, 761.97s/trial, best loss: -0.8070166110992432] 25%|██▌       | 125/500 [34:39:00<127:02:34, 1219.61s/trial, best loss: -0.8070166110992432] 25%|██▌       | 126/500 [34:42:33<95:20:29, 917.73s/trial, best loss: -0.8070166110992432]   25%|██▌       | 127/500 [35:15:01<127:05:21, 1226.60s/trial, best loss: -0.8070166110992432] 26%|██▌       | 128/500 [35:24:43<106:46:16, 1033.27s/trial, best loss: -0.8070166110992432] 26%|██▌       | 129/500 [35:25:22<75:45:58, 735.20s/trial, best loss: -0.8070166110992432]   26%|██▌       | 130/500 [35:48:14<95:11:34, 926.20s/trial, best loss: -0.8070166110992432] 26%|██▌       | 131/500 [36:15:26<116:38:37, 1137.99s/trial, best loss: -0.8070166110992432] 26%|██▋       | 132/500 [36:38:02<122:59:52, 1203.24s/trial, best loss: -0.8070166110992432] 27%|██▋       | 133/500 [36:48:44<105:29:56, 1034.87s/trial, best loss: -0.8070166110992432] 27%|██▋       | 134/500 [36:55:25<85:53:39, 844.86s/trial, best loss: -0.8070166110992432]   27%|██▋       | 135/500 [37:11:25<89:08:38, 879.23s/trial, best loss: -0.8070166110992432] 27%|██▋       | 136/500 [37:34:56<105:02:29, 1038.87s/trial, best loss: -0.8070166110992432] 27%|██▋       | 137/500 [37:36:02<75:19:06, 746.96s/trial, best loss: -0.8070166110992432]   28%|██▊       | 138/500 [37:59:47<95:32:59, 950.22s/trial, best loss: -0.8070166110992432] 28%|██▊       | 139/500 [38:16:18<96:30:42, 962.45s/trial, best loss: -0.8070166110992432] 28%|██▊       | 140/500 [38:47:30<123:33:02, 1235.51s/trial, best loss: -0.8070166110992432] 28%|██▊       | 141/500 [38:50:39<91:54:19, 921.62s/trial, best loss: -0.8070166110992432]   28%|██▊       | 142/500 [38:53:46<69:44:14, 701.27s/trial, best loss: -0.8070166110992432] 29%|██▊       | 143/500 [39:15:45<87:54:03, 886.39s/trial, best loss: -0.8070166110992432] 29%|██▉       | 144/500 [39:44:58<113:21:29, 1146.32s/trial, best loss: -0.8070166110992432] 29%|██▉       | 145/500 [40:00:34<106:50:01, 1083.38s/trial, best loss: -0.8070166110992432] 29%|██▉       | 146/500 [40:33:43<133:13:54, 1354.90s/trial, best loss: -0.8070166110992432] 29%|██▉       | 147/500 [40:40:05<104:14:40, 1063.12s/trial, best loss: -0.8070166110992432] 30%|██▉       | 148/500 [41:03:40<114:15:43, 1168.59s/trial, best loss: -0.8070166110992432] 30%|██▉       | 149/500 [41:44:21<151:09:59, 1550.43s/trial, best loss: -0.8070166110992432] 30%|███       | 150/500 [42:16:53<162:26:38, 1670.85s/trial, best loss: -0.8070166110992432] 30%|███       | 151/500 [42:23:19<124:37:30, 1285.53s/trial, best loss: -0.8070166110992432] 30%|███       | 152/500 [42:39:30<115:08:43, 1191.16s/trial, best loss: -0.8070166110992432] 31%|███       | 153/500 [43:20:51<152:05:43, 1577.93s/trial, best loss: -0.8070166110992432] 31%|███       | 154/500 [44:03:25<179:48:06, 1870.77s/trial, best loss: -0.8070166110992432] 31%|███       | 155/500 [44:14:53<145:16:55, 1515.99s/trial, best loss: -0.8070166110992432] 31%|███       | 156/500 [44:31:07<129:19:55, 1353.47s/trial, best loss: -0.8070166110992432] 31%|███▏      | 157/500 [44:31:59<91:44:58, 962.97s/trial, best loss: -0.8070166110992432]   32%|███▏      | 158/500 [45:46:53<192:06:42, 2022.23s/trial, best loss: -0.8070166110992432] 32%|███▏      | 159/500 [46:01:15<158:35:16, 1674.24s/trial, best loss: -0.8070166110992432] 32%|███▏      | 160/500 [46:15:41<135:13:56, 1431.87s/trial, best loss: -0.8070166110992432] 32%|███▏      | 161/500 [46:20:46<102:59:29, 1093.71s/trial, best loss: -0.8070166110992432] 32%|███▏      | 162/500 [46:24:09<77:36:26, 826.59s/trial, best loss: -0.8070166110992432]   33%|███▎      | 163/500 [47:10:32<132:19:14, 1413.52s/trial, best loss: -0.8070166110992432] 33%|███▎      | 164/500 [47:30:36<126:03:12, 1350.57s/trial, best loss: -0.8070166110992432] 33%|███▎      | 165/500 [47:40:01<103:44:28, 1114.83s/trial, best loss: -0.8070166110992432] 33%|███▎      | 166/500 [48:24:28<146:37:40, 1580.42s/trial, best loss: -0.8070166110992432] 33%|███▎      | 167/500 [48:27:23<107:11:46, 1158.88s/trial, best loss: -0.8070166110992432] 34%|███▎      | 168/500 [49:03:39<135:01:42, 1464.17s/trial, best loss: -0.8070166110992432] 34%|███▍      | 169/500 [49:05:47<97:45:47, 1063.29s/trial, best loss: -0.8070166110992432]  34%|███▍      | 170/500 [49:47:12<136:33:32, 1489.73s/trial, best loss: -0.8070166110992432] 34%|███▍      | 171/500 [50:10:34<133:44:25, 1463.42s/trial, best loss: -0.8070166110992432] 34%|███▍      | 172/500 [50:24:41<116:28:04, 1278.31s/trial, best loss: -0.8070166110992432] 35%|███▍      | 173/500 [50:38:05<103:12:42, 1136.28s/trial, best loss: -0.8070166110992432] 35%|███▍      | 174/500 [51:07:28<119:55:14, 1324.28s/trial, best loss: -0.8070166110992432] 35%|███▌      | 175/500 [51:25:41<113:17:13, 1254.87s/trial, best loss: -0.8070166110992432] 35%|███▌      | 176/500 [51:40:43<103:23:36, 1148.82s/trial, best loss: -0.8070166110992432] 35%|███▌      | 177/500 [52:39:16<166:43:16, 1858.19s/trial, best loss: -0.8070166110992432] 36%|███▌      | 178/500 [52:50:18<134:05:50, 1499.23s/trial, best loss: -0.8070166110992432] 36%|███▌      | 179/500 [53:02:56<113:52:23, 1277.08s/trial, best loss: -0.8070166110992432] 36%|███▌      | 180/500 [53:05:32<83:37:28, 940.78s/trial, best loss: -0.8070166110992432]   36%|███▌      | 181/500 [53:51:34<131:45:46, 1486.98s/trial, best loss: -0.8070166110992432] 36%|███▋      | 182/500 [54:25:26<145:47:06, 1650.40s/trial, best loss: -0.8070166110992432] 37%|███▋      | 183/500 [54:38:46<122:51:57, 1395.32s/trial, best loss: -0.8070166110992432] 37%|███▋      | 184/500 [54:55:34<112:16:45, 1279.13s/trial, best loss: -0.8070166110992432] 37%|███▋      | 185/500 [55:28:05<129:33:22, 1480.64s/trial, best loss: -0.8070166110992432] 37%|███▋      | 186/500 [56:00:19<141:01:49, 1616.91s/trial, best loss: -0.8070166110992432] 37%|███▋      | 187/500 [56:10:35<114:27:00, 1316.36s/trial, best loss: -0.8070166110992432] 38%|███▊      | 188/500 [56:15:31<87:33:26, 1010.28s/trial, best loss: -0.8070166110992432]  38%|███▊      | 189/500 [56:51:40<117:19:05, 1358.02s/trial, best loss: -0.8070166110992432] 38%|███▊      | 190/500 [57:31:23<143:25:42, 1665.62s/trial, best loss: -0.8070166110992432] 38%|███▊      | 191/500 [57:33:45<103:43:52, 1208.52s/trial, best loss: -0.8070166110992432] 38%|███▊      | 192/500 [58:07:22<124:08:49, 1451.07s/trial, best loss: -0.8070166110992432] 39%|███▊      | 193/500 [58:19:31<105:15:41, 1234.34s/trial, best loss: -0.8070166110992432] 39%|███▉      | 194/500 [58:55:00<127:44:07, 1502.77s/trial, best loss: -0.8070166110992432] 39%|███▉      | 195/500 [59:07:07<107:35:38, 1269.96s/trial, best loss: -0.8070166110992432] 39%|███▉      | 196/500 [59:11:42<82:01:49, 971.41s/trial, best loss: -0.8070166110992432]   39%|███▉      | 197/500 [59:39:12<98:54:08, 1175.08s/trial, best loss: -0.8070166110992432] 40%|███▉      | 198/500 [60:15:22<123:36:56, 1473.56s/trial, best loss: -0.8070166110992432] 40%|███▉      | 199/500 [60:40:56<124:42:54, 1491.61s/trial, best loss: -0.8070166110992432] 40%|████      | 200/500 [60:42:50<89:52:44, 1078.55s/trial, best loss: -0.8070166110992432]  40%|████      | 201/500 [60:59:48<88:02:56, 1060.12s/trial, best loss: -0.8070166110992432] 40%|████      | 202/500 [61:31:41<108:57:19, 1316.24s/trial, best loss: -0.8070166110992432] 41%|████      | 203/500 [61:42:30<92:04:15, 1116.01s/trial, best loss: -0.8070166110992432]  41%|████      | 204/500 [62:18:11<117:02:39, 1423.51s/trial, best loss: -0.8070166110992432] 41%|████      | 205/500 [62:26:49<94:23:27, 1151.89s/trial, best loss: -0.8070166110992432]  41%|████      | 206/500 [62:53:53<105:38:25, 1293.56s/trial, best loss: -0.8070166110992432] 41%|████▏     | 207/500 [63:02:35<86:25:29, 1061.88s/trial, best loss: -0.8070166110992432]  42%|████▏     | 208/500 [63:45:11<122:29:30, 1510.17s/trial, best loss: -0.8070166110992432] 42%|████▏     | 209/500 [64:04:30<113:33:48, 1404.91s/trial, best loss: -0.8070166110992432] 42%|████▏     | 210/500 [64:10:18<87:38:05, 1087.88s/trial, best loss: -0.8070166110992432]  42%|████▏     | 211/500 [64:45:33<112:03:31, 1395.89s/trial, best loss: -0.8070166110992432] 42%|████▏     | 212/500 [65:22:33<131:26:39, 1643.06s/trial, best loss: -0.8070166110992432] 43%|████▎     | 213/500 [65:37:53<113:42:09, 1426.23s/trial, best loss: -0.8070166110992432] 43%|████▎     | 214/500 [66:04:01<116:40:36, 1468.66s/trial, best loss: -0.8070166110992432] 43%|████▎     | 215/500 [66:05:57<84:08:30, 1062.84s/trial, best loss: -0.8070166110992432]  43%|████▎     | 216/500 [66:24:02<84:22:13, 1069.48s/trial, best loss: -0.8070166110992432] 43%|████▎     | 217/500 [66:58:42<107:54:05, 1372.60s/trial, best loss: -0.8070166110992432] 44%|████▎     | 218/500 [67:13:39<96:21:10, 1230.04s/trial, best loss: -0.8070166110992432]  44%|████▍     | 219/500 [67:45:12<111:32:24, 1428.98s/trial, best loss: -0.8070166110992432] 44%|████▍     | 220/500 [68:18:20<124:10:37, 1596.56s/trial, best loss: -0.8070166110992432] 44%|████▍     | 221/500 [68:29:46<102:33:50, 1323.41s/trial, best loss: -0.8070166110992432] 44%|████▍     | 222/500 [68:32:43<75:39:15, 979.70s/trial, best loss: -0.8070166110992432]   45%|████▍     | 223/500 [68:55:15<83:56:46, 1091.00s/trial, best loss: -0.8070166110992432][1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m cd ../a[Klaunchpad
[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m ./testhead.sh Crab64808[K[K[K080 [Kopt2
[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m watch -n0.1 ls ../getout_glamdring/[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K-trghl ../getout_glamdring/
[?1049h[22;0;0t[1;60r(B[m[4l[?7h[H[2JEvery 0.1s: ls -trghl ../getout_glamdring/[1;330Hglamdring: Thu Sep 24 10:17:19 2020[3;1Htotal 156K[4d-rw-rw-r-- 1 exet4487   98 Jul 22 12:45 README.md[5d-rw-rw-r-- 1 exet4487  16K Jul 28 10:30 net_utils.py[6ddrwxrwxr-x 2 exet4487    5 Aug  5 12:24 submit[7d-rw-rw-r-- 1 exet4487 1.1K Sep 21 12:24 best_model.py[8d-rw-rw-r-- 1 exet4487  15K Sep 21 12:46 temp_model.py[9ddrwxrwxr-x 2 exet4487    3 Sep 21 12:46 __pycache__[10d-rw-rw-r-- 1 exet4487  14K Sep 24 10:16 hypertrain.py[11d-rw-rw-r-- 1 exet4487 248K Sep 24 10:17 screenlog.0[60;364H[1;358H21[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[11;25H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[60;1H[?1049l[23;0;0t[?1l>[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m ls
Crab64080opt1_1.txt  crashtest1_3.txt  crashtest2_3.txt  crashtest3_5.txt  crashtest5_2.txt  crashtest6_4.txt	   crashtest8_1.txt  longtest5_3.txt  longtest7_5.txt  screentest10_1.txt  screentest11_3.txt	screentest13_1.txt  screentest14_3.txt	screentest5_5.txt  stresstest1_2.txt  stresstest4_4.txt  testhead.sh~
Crab64080opt1_2.txt  crashtest1_4.txt  crashtest2_4.txt  crashtest4_1.txt  crashtest5_3.txt  crashtest6_gpu03.txt  crashtest8_2.txt  longtest5_4.txt  longtest8_1.txt  screentest10_2.txt  screentest11_4.txt	screentest13_2.txt  screentest14_4.txt	screentest9_1.txt  stresstest1_3.txt  stresstest4_5.txt  testhead.sh.sh
Crab64080opt1_3.txt  crashtest1_5.txt  crashtest2_5.txt  crashtest4_2.txt  crashtest5_4.txt  crashtest7_1.txt	   crashtest8_3.txt  longtest5_5.txt  longtest8_2.txt  screentest10_3.txt  screentest11_8_.txt	screentest13_3.txt  screentest14_5.txt	screentest9_2.txt  stresstest1_4.txt  submitjobs.sh	 testlaunch.sh
Crab64080opt1_4.txt  crashtest1_6.txt  crashtest3_1.txt  crashtest4_3.txt  crashtest5_5.txt  crashtest7_2.txt	   crashtest8_4.txt  longtest7_1.txt  longtest8_3.txt  screentest10_4.txt  screentest12_1.txt	screentest13_4.txt  screentest5_1.txt	screentest9_3.txt  stresstest1_5.txt  submitjobs.sh~	 testlaunch.sh.sh
Crab64080opt1_5.txt  crashtest1_7.txt  crashtest3_2.txt  crashtest4_4.txt  crashtest6_1.txt  crashtest7_3.txt	   crashtest8_5.txt  longtest7_2.txt  longtest8_4.txt  screentest10_5.txt  screentest12_2.txt	screentest13_5.txt  screentest5_2.txt	screentest9_4.txt  stresstest4_1.txt  temp_model.py	 _.txt
crashtest1_1.txt     crashtest2_1.txt  crashtest3_3.txt  crashtest4_6.txt  crashtest6_2.txt  crashtest7_4.txt	   longtest5_1.txt   longtest7_3.txt  longtest8_5.txt  screentest11_1.txt  screentest12_3.txt	screentest14_1.txt  screentest5_3.txt	screentest9_5.txt  stresstest4_2.txt  testgpu.py	 venv
crashtest1_2.txt     crashtest2_2.txt  crashtest3_4.txt  crashtest5_1.txt  crashtest6_3.txt  crashtest7_5.txt	   longtest5_2.txt   longtest7_4.txt  screenlog.0      screentest11_2.txt  screentest12_4.txt	screentest14_2.txt  screentest5_4.txt	stresstest1_1.txt  stresstest4_3.txt  testhead.sh
[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m ls -trhgl
total 28M
drwxrwxr-x 6 exet4487     6 Jul 21 12:31 venv
-rw-rw-r-- 1 exet4487  1.9K Jul 21 18:32 testgpu.py
-rw-rw-r-- 1 exet4487  2.3K Jul 24 17:08 temp_model.py
-rwxrw-r-- 1 exet4487   462 Aug  5 12:14 testlaunch.sh
-rw-rw-r-- 1 exet4487  1.6K Aug 20 20:03 testhead.sh.sh
-rw-rw-r-- 1 exet4487  734K Aug 22 00:57 screentest9_2.txt
-rw-rw-r-- 1 exet4487  764K Aug 22 01:18 screentest9_3.txt
-rw-rw-r-- 1 exet4487  708K Aug 22 01:20 screentest9_4.txt
-rw-rw-r-- 1 exet4487  776K Aug 22 01:33 screentest9_1.txt
-rw-rw-r-- 1 exet4487   12K Aug 22 19:00 screentest9_5.txt
-rw-rw-r-- 1 exet4487   22K Aug 22 20:17 screentest10_5.txt
-rw-rw-r-- 1 exet4487  117K Aug 22 20:17 screentest10_2.txt
-rw-rw-r-- 1 exet4487  111K Aug 22 20:17 screentest10_4.txt
-rw-rw-r-- 1 exet4487  134K Aug 22 20:17 screentest10_1.txt
-rw-rw-r-- 1 exet4487  111K Aug 22 20:17 screentest10_3.txt
-rw-rw-r-- 1 exet4487   11K Aug 22 20:24 _.txt
-rw-rw-r-- 1 exet4487  701K Aug 23 02:29 screentest11_3.txt
-rw-rw-r-- 1 exet4487  652K Aug 23 02:44 screentest11_8_.txt
-rw-rw-r-- 1 exet4487  783K Aug 23 02:47 screentest11_1.txt
-rw-rw-r-- 1 exet4487  796K Aug 23 02:55 screentest11_2.txt
-rw-rw-r-- 1 exet4487   12K Aug 23 09:56 screentest11_4.txt
-rw-rw-r-- 1 exet4487   12K Aug 23 09:57 screentest12_1.txt
-rw-rw-r-- 1 exet4487   612 Aug 23 09:57 screentest12_3.txt
-rw-rw-r-- 1 exet4487    80 Aug 23 09:57 screentest12_4.txt
-rw-rw-r-- 1 exet4487   12K Aug 23 09:57 screentest12_2.txt
-rw-rw-r-- 1 exet4487  8.9K Aug 23 10:04 screentest13_1.txt
-rw-rw-r-- 1 exet4487   12K Aug 23 10:04 screentest13_4.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 10:04 screentest13_3.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 10:04 screentest13_2.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 10:04 screentest13_5.txt
-rw-rw-r-- 1 exet4487  297K Aug 23 12:32 screentest14_4.txt
-rw-rw-r-- 1 exet4487  649K Aug 23 15:36 screentest14_5.txt
-rw-rw-r-- 1 exet4487  598K Aug 23 15:42 screentest14_1.txt
-rw-rw-r-- 1 exet4487  653K Aug 23 15:51 screentest14_2.txt
-rw-rw-r-- 1 exet4487  683K Aug 23 15:53 screentest14_3.txt
-rw-rw-r-- 1 exet4487   22K Aug 23 22:46 stresstest1_1.txt
-rw-rw-r-- 1 exet4487   22K Aug 23 22:46 stresstest1_3.txt
-rw-rw-r-- 1 exet4487   22K Aug 23 22:46 stresstest1_2.txt
-rw-rw-r-- 1 exet4487   21K Aug 23 22:46 stresstest1_5.txt
-rw-rw-r-- 1 exet4487   20K Aug 23 22:46 stresstest1_4.txt
-rwxrw-r-- 1 exet4487   363 Aug 23 22:47 testhead.sh~
-rwxrw-r-- 1 exet4487   357 Aug 23 22:51 testhead.sh
-rw-rw-r-- 1 exet4487   13K Aug 23 23:02 stresstest4_3.txt
-rw-rw-r-- 1 exet4487  8.9K Aug 23 23:02 stresstest4_1.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 23:02 stresstest4_5.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 23:02 stresstest4_4.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 23:02 stresstest4_2.txt
-rw-rw-r-- 1 exet4487  483K Aug 25 09:55 screentest5_4.txt
-rw-rw-r-- 1 exet4487  515K Aug 25 10:40 screentest5_5.txt
-rw-rw-r-- 1 exet4487  573K Aug 25 11:12 screentest5_3.txt
-rw-rw-r-- 1 exet4487  495K Aug 25 12:23 screentest5_1.txt
-rw-rw-r-- 1 exet4487  589K Aug 25 12:45 screentest5_2.txt
-rw-rw-r-- 1 exet4487   62K Aug 27 20:13 crashtest1_3.txt
-rw-rw-r-- 1 exet4487  110K Aug 27 22:40 crashtest1_4.txt
-rw-rw-r-- 1 exet4487  116K Aug 28 14:52 crashtest1_6.txt
-rw-rw-r-- 1 exet4487  165K Aug 28 17:55 crashtest1_7.txt
-rw-rw-r-- 1 exet4487  813K Aug 29 04:44 crashtest1_5.txt
-rw-rw-r-- 1 exet4487  729K Aug 29 05:01 crashtest1_1.txt
-rw-rw-r-- 1 exet4487  830K Aug 29 06:44 crashtest1_2.txt
-rw-rw-r-- 1 exet4487   61K Aug 31 16:47 crashtest2_3.txt
-rw-rw-r-- 1 exet4487  110K Aug 31 19:11 crashtest2_4.txt
-rw-rw-r-- 1 exet4487  441K Sep  1 10:51 crashtest2_5.txt
-rw-rw-r-- 1 exet4487  402K Sep  1 10:58 crashtest2_1.txt
-rw-rw-r-- 1 exet4487  404K Sep  1 10:58 crashtest2_2.txt
-rw-rw-r-- 1 exet4487   61K Sep  1 14:23 crashtest3_3.txt
-rw-rw-r-- 1 exet4487  592K Sep  2 14:44 crashtest3_4.txt
-rw-rw-r-- 1 exet4487  606K Sep  2 21:34 crashtest3_1.txt
-rw-rw-r-- 1 exet4487  668K Sep  2 21:34 crashtest3_2.txt
-rw-rw-r-- 1 exet4487  682K Sep  2 21:34 crashtest3_5.txt
-rw-rw-r-- 1 exet4487   61K Sep  3 20:54 crashtest4_3.txt
-rw-rw-r-- 1 exet4487  654K Sep  5 01:52 crashtest4_6.txt
-rw-rw-r-- 1 exet4487  722K Sep  5 02:18 crashtest4_2.txt
-rw-rw-r-- 1 exet4487  618K Sep  5 02:42 crashtest4_1.txt
-rw-rw-r-- 1 exet4487  728K Sep  5 04:27 crashtest4_4.txt
-rw-rw-r-- 1 exet4487  621K Sep  6 16:12 crashtest5_3.txt
-rw-rw-r-- 1 exet4487  688K Sep  6 17:38 crashtest5_4.txt
-rw-rw-r-- 1 exet4487   53K Sep  6 17:46 crashtest5_5.txt
-rw-rw-r-- 1 exet4487  703K Sep  6 18:01 crashtest5_2.txt
-rw-rw-r-- 1 exet4487 1001K Sep  6 20:03 crashtest5_1.txt
-rw-rw-r-- 1 exet4487  707K Sep  9 00:26 crashtest6_2.txt
-rw-rw-r-- 1 exet4487  665K Sep  9 01:20 crashtest6_4.txt
-rw-rw-r-- 1 exet4487  257K Sep  9 01:34 crashtest6_gpu03.txt
-rw-rw-r-- 1 exet4487  674K Sep  9 02:59 crashtest6_3.txt
-rw-rw-r-- 1 exet4487  782K Sep  9 03:57 crashtest6_1.txt
-rw-rw-r-- 1 exet4487  117K Sep  9 15:27 crashtest7_2.txt
-rw-rw-r-- 1 exet4487   89K Sep  9 15:27 crashtest7_4.txt
-rw-rw-r-- 1 exet4487  110K Sep  9 15:27 crashtest7_1.txt
-rw-rw-r-- 1 exet4487  121K Sep  9 15:27 crashtest7_5.txt
-rw-rw-r-- 1 exet4487  110K Sep  9 15:27 crashtest7_3.txt
-rw-rw-r-- 1 exet4487  211K Sep 10 00:21 crashtest8_4.txt
-rw-rw-r-- 1 exet4487  247K Sep 10 01:35 crashtest8_2.txt
-rw-rw-r-- 1 exet4487  263K Sep 10 02:12 crashtest8_5.txt
-rw-rw-r-- 1 exet4487  247K Sep 10 02:25 crashtest8_3.txt
-rw-rw-r-- 1 exet4487  285K Sep 10 02:27 crashtest8_1.txt
-rw-rw-r-- 1 exet4487   13K Sep 10 10:15 longtest5_1.txt
-rw-rw-r-- 1 exet4487  8.9K Sep 10 10:15 longtest5_4.txt
-rw-rw-r-- 1 exet4487   13K Sep 10 10:15 longtest5_2.txt
-rw-rw-r-- 1 exet4487   13K Sep 10 10:15 longtest5_5.txt
-rw-rw-r-- 1 exet4487   13K Sep 10 10:15 longtest5_3.txt
-rwxrwxr-x 1 exet4487   998 Sep 10 10:20 submitjobs.sh~
-rw-rw-r-- 1 exet4487   61K Sep 10 12:59 longtest7_3.txt
-rw-rw-r-- 1 exet4487  2.0M Sep 14 11:47 longtest7_2.txt
-rw-rw-r-- 1 exet4487  2.0M Sep 14 11:47 longtest7_1.txt
-rw-rw-r-- 1 exet4487  2.0M Sep 14 11:47 longtest7_5.txt
-rw-rw-r-- 1 exet4487  1.7M Sep 14 11:47 longtest7_4.txt
-rwxrwxr-x 1 exet4487   998 Sep 14 11:48 submitjobs.sh
-rw-rw-r-- 1 exet4487  3.1M Sep 20 16:05 longtest8_1.txt
-rw-rw-r-- 1 exet4487  3.2M Sep 20 16:25 longtest8_2.txt
-rw-rw-r-- 1 exet4487  2.6M Sep 20 16:48 longtest8_4.txt
-rw-rw-r-- 1 exet4487  3.2M Sep 20 17:28 longtest8_3.txt
-rw-rw-r-- 1 exet4487  3.1M Sep 20 18:04 longtest8_5.txt
-rw-rw-r-- 1 exet4487  1.6K Sep 21 12:48 testlaunch.sh.sh
-rw-rw-r-- 1 exet4487   25M Sep 23 04:39 Crab64080opt1_4.txt
-rw-rw-r-- 1 exet4487  3.9M Sep 24 09:05 Crab64080opt1_3.txt
-rw-rw-r-- 1 exet4487  3.8M Sep 24 09:16 Crab64080opt1_5.txt
-rw-rw-r-- 1 exet4487  4.0M Sep 24 09:20 Crab64080opt1_1.txt
-rw-rw-r-- 1 exet4487  4.0M Sep 24 09:42 Crab64080opt1_2.txt
-rw-rw-r-- 1 exet4487   31M Sep 24 10:15 screenlog.0
[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m cd ..
[1;34m[exet4487@(NEW) glamdring:[0;37m~[1;34m]$[0m ls
 56tgamma3.png	   configmulti.psm   '#config.psm#'   config.psm~	       Desktop	 gammacut2.png	    Gettingthingsinandoutofeventdisplay   hyperopt_job	 launchpad   Models    oldhypermodels	  optimise_task.py~   PSM_5GHZ	   screenlog.0	    stsconfig.orig~   stsconfig.psm~   testsave2_models   trials    wavelearn_release
 chargehist2.png   configmulti.psm~   config.psm      convplot_longtest7.png   Figures	 getout_glamdring   hypermodels				  idsim		 logs	     myDIRAC   optimise_task.py   predictions	      PSM_OUTPUT   stsconfig.orig   stsconfig.psm     temp_model.py    testsave_models	  truesim
[1;34m[exet4487@(NEW) glamdring:[0;37m~[1;34m]$[0m ls -trhgl
total 1.4M
drwxrwxr-x 12 exet4487   17 Mar  7  2018  myDIRAC
drwxr-xr-x  2 exet4487    2 Mar 14  2018  Desktop
-rw-r--r--  1 exet4487  31K Mar 16  2018  stsconfig.psm~
-rw-r--r--  1 exet4487  31K Mar 16  2018  stsconfig.orig~
-rw-r--r--  1 exet4487  31K Mar 16  2018  stsconfig.orig
-rw-r--r--  1 exet4487  31K Mar 16  2018  stsconfig.psm
-rw-r--r--  1 exet4487  31K Mar 19  2018  config.psm~
drwxrwxr-x 10 exet4487   10 Mar 19  2018  PSM_5GHZ
-rw-r--r--  1 exet4487  31K Mar 19  2018  config.psm
-rw-r--r--  1 exet4487  31K Mar 21  2018  configmulti.psm~
drwxrwxr-x 10 exet4487   10 Mar 21  2018  PSM_OUTPUT
-rw-r--r--  1 exet4487  31K Mar 21  2018  configmulti.psm
-rw-r--r--  1 exet4487  31K Apr 25  2018 '#config.psm#'
drwxrwxr-x  2 exet4487    2 Jul 21 11:30  predictions
drwxrwxr-x  2 exet4487    2 Jul 21 11:30  Models
drwxrwxr-x  5 exet4487   55 Jul 21 11:50  Gettingthingsinandoutofeventdisplay
-rw-rw-r--  1 exet4487 2.6K Jul 24 18:52  optimise_task.py~
-rw-rw-r--  1 exet4487 2.6K Jul 24 19:03  optimise_task.py
-rw-rw-r--  1 exet4487  12K Jul 28 20:19  temp_model.py
drwxrwxr-x  2 exet4487    2 Aug 18 14:59  testsave_models
drwxrwxr-x  2 exet4487    2 Aug 18 15:03  testsave2_models
drwxrwxr-x  2 exet4487   44 Aug 23 10:03  truesim
drwxrwxr-x  2 exet4487   44 Aug 23 10:03  idsim
-rw-rw-r--  1 exet4487 107K Aug 23 22:33  screenlog.0
drwxrwxr-x  2 exet4487    5 Aug 24 10:57  hyperopt_job
-rw-rw-r--  1 exet4487  55K Sep 14 13:45  convplot_longtest7.png
drwxrwxr-x  2 exet4487    6 Sep 20 17:56  trials
drwxrwxr-x  2 exet4487  869 Sep 21 11:38  oldhypermodels
drwxrwxr-x  2 exet4487    5 Sep 21 11:49  Figures
drwxrwxr-x  3 exet4487  122 Sep 21 12:48  launchpad
-rw-rw-r--  1 exet4487  29K Sep 23 15:29  gammacut2.png
-rw-rw-r--  1 exet4487  99K Sep 23 16:40  56tgamma3.png
drwxrwxr-x  7 exet4487   18 Sep 23 17:14  wavelearn_release
-rw-rw-r--  1 exet4487  96K Sep 23 17:50  chargehist2.png
drwxrwxr-x  2 exet4487 1.1K Sep 24 09:42  hypermodels
drwxrwxr-x  5 exet4487   12 Sep 24 10:16  getout_glamdring
drwxrwxr-x  2 exet4487   30 Sep 24 10:17  logs
[1;34m[exet4487@(NEW) glamdring:[0;37m~[1;34m]$[0m cd hypermodels/
[1;34m[exet4487@(NEW) glamdring:[0;37mhypermodels[1;34m]$[0m mv * ../od[Kldhypermodels/
[1;34m[exet4487@(NEW) glamdring:[0;37mhypermodels[1;34m]$[0m cd ../getout_glamdring/
[1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m ls -trhgl
total 179K
-rw-rw-r-- 1 exet4487   98 Jul 22 12:45 README.md
-rw-rw-r-- 1 exet4487  16K Jul 28 10:30 net_utils.py
drwxrwxr-x 2 exet4487    5 Aug  5 12:24 submit
-rw-rw-r-- 1 exet4487 1.1K Sep 21 12:24 best_model.py
-rw-rw-r-- 1 exet4487  15K Sep 21 12:46 temp_model.py
drwxrwxr-x 2 exet4487    3 Sep 21 12:46 __pycache__
-rw-rw-r-- 1 exet4487  14K Sep 24 10:16 hypertrain.py
-rw-rw-r-- 1 exet4487 261K Sep 24 10:17 screenlog.0
[1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m ls -trhgl
total 179K
-rw-rw-r-- 1 exet4487   98 Jul 22 12:45 README.md
-rw-rw-r-- 1 exet4487  16K Jul 28 10:30 net_utils.py
drwxrwxr-x 2 exet4487    5 Aug  5 12:24 submit
-rw-rw-r-- 1 exet4487 1.1K Sep 21 12:24 best_model.py
-rw-rw-r-- 1 exet4487  15K Sep 21 12:46 temp_model.py
drwxrwxr-x 2 exet4487    3 Sep 21 12:46 __pycache__
-rw-rw-r-- 1 exet4487  14K Sep 24 10:16 hypertrain.py
-rw-rw-r-- 1 exet4487 261K Sep 24 10:17 screenlog.0
[1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m ls -trhgl
total 179K
-rw-rw-r-- 1 exet4487   98 Jul 22 12:45 README.md
-rw-rw-r-- 1 exet4487  16K Jul 28 10:30 net_utils.py
drwxrwxr-x 2 exet4487    5 Aug  5 12:24 submit
-rw-rw-r-- 1 exet4487 1.1K Sep 21 12:24 best_model.py
-rw-rw-r-- 1 exet4487  15K Sep 21 12:46 temp_model.py
drwxrwxr-x 2 exet4487    3 Sep 21 12:46 __pycache__
-rw-rw-r-- 1 exet4487  14K Sep 24 10:16 hypertrain.py
-rw-rw-r-- 1 exet4487 261K Sep 24 10:17 screenlog.0
[1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m ls -trhgl
total 179K
-rw-rw-r-- 1 exet4487   98 Jul 22 12:45 README.md
-rw-rw-r-- 1 exet4487  16K Jul 28 10:30 net_utils.py
drwxrwxr-x 2 exet4487    5 Aug  5 12:24 submit
-rw-rw-r-- 1 exet4487 1.1K Sep 21 12:24 best_model.py
-rw-rw-r-- 1 exet4487  15K Sep 21 12:46 temp_model.py
drwxrwxr-x 2 exet4487    3 Sep 21 12:46 __pycache__
-rw-rw-r-- 1 exet4487  14K Sep 24 10:16 hypertrain.py
-rw-rw-r-- 1 exet4487 261K Sep 24 10:17 screenlog.0
[1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m ls -trhgl
total 179K
-rw-rw-r-- 1 exet4487   98 Jul 22 12:45 README.md
-rw-rw-r-- 1 exet4487  16K Jul 28 10:30 net_utils.py
drwxrwxr-x 2 exet4487    5 Aug  5 12:24 submit
-rw-rw-r-- 1 exet4487 1.1K Sep 21 12:24 best_model.py
-rw-rw-r-- 1 exet4487  15K Sep 21 12:46 temp_model.py
drwxrwxr-x 2 exet4487    3 Sep 21 12:46 __pycache__
-rw-rw-r-- 1 exet4487  14K Sep 24 10:16 hypertrain.py
-rw-rw-r-- 1 exet4487 261K Sep 24 10:17 screenlog.0
[1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m ls -trhgl
total 179K
-rw-rw-r-- 1 exet4487   98 Jul 22 12:45 README.md
-rw-rw-r-- 1 exet4487  16K Jul 28 10:30 net_utils.py
drwxrwxr-x 2 exet4487    5 Aug  5 12:24 submit
-rw-rw-r-- 1 exet4487 1.1K Sep 21 12:24 best_model.py
-rw-rw-r-- 1 exet4487  15K Sep 21 12:46 temp_model.py
drwxrwxr-x 2 exet4487    3 Sep 21 12:46 __pycache__
-rw-rw-r-- 1 exet4487  14K Sep 24 10:16 hypertrain.py
-rw-rw-r-- 1 exet4487 261K Sep 24 10:17 screenlog.0
[1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m ls -trhgl
total 179K
-rw-rw-r-- 1 exet4487   98 Jul 22 12:45 README.md
-rw-rw-r-- 1 exet4487  16K Jul 28 10:30 net_utils.py
drwxrwxr-x 2 exet4487    5 Aug  5 12:24 submit
-rw-rw-r-- 1 exet4487 1.1K Sep 21 12:24 best_model.py
-rw-rw-r-- 1 exet4487  15K Sep 21 12:46 temp_model.py
drwxrwxr-x 2 exet4487    3 Sep 21 12:46 __pycache__
-rw-rw-r-- 1 exet4487  14K Sep 24 10:16 hypertrain.py
-rw-rw-r-- 1 exet4487 261K Sep 24 10:17 screenlog.0
[1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m ls -trhgl[K
[1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m watch [K[K[K[K[K[Kwatch -n0.1 ls -trghl .
[?1049h[22;0;0t[1;60r(B[m[4l[?7h[H[2JEvery 0.1s: ls -trghl .[1;330Hglamdring: Thu Sep 24 10:18:14 2020[3;1Htotal 179K[4d-rw-rw-r-- 1 exet4487   98 Jul 22 12:45 README.md[5d-rw-rw-r-- 1 exet4487  16K Jul 28 10:30 net_utils.py[6ddrwxrwxr-x 2 exet4487    5 Aug  5 12:24 submit[7d-rw-rw-r-- 1 exet4487 1.1K Sep 21 12:24 best_model.py[8d-rw-rw-r-- 1 exet4487  15K Sep 21 12:46 temp_model.py[9ddrwxrwxr-x 2 exet4487    3 Sep 21 12:46 __pycache__[10d-rw-rw-r-- 1 exet4487  14K Sep 24 10:16 hypertrain.py[11d-rw-rw-r-- 1 exet4487 265K Sep 24 10:18 screenlog.0[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[8d[2M[10d-rw-rw-r-- 1 exet4487  15K Sep 24 10:18 temp_model.py[11ddrwxrwxr-x 2 exet4487    3 Sep 24 10:18 __pycache__[60;364H[1;359H9[60;364H[9d[M[11d-rw-rw-r-- 1 exet4487 266K Sep 24 10:18 screenlog.0[60;364H[1;358H30[60;364H[60;1H[?1049l[23;0;0t[?1l>[1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m cd[Kd ../launchpad/
[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m ls -trghl
total 28M
drwxrwxr-x 6 exet4487     6 Jul 21 12:31 venv
-rw-rw-r-- 1 exet4487  1.9K Jul 21 18:32 testgpu.py
-rw-rw-r-- 1 exet4487  2.3K Jul 24 17:08 temp_model.py
-rwxrw-r-- 1 exet4487   462 Aug  5 12:14 testlaunch.sh
-rw-rw-r-- 1 exet4487  1.6K Aug 20 20:03 testhead.sh.sh
-rw-rw-r-- 1 exet4487  734K Aug 22 00:57 screentest9_2.txt
-rw-rw-r-- 1 exet4487  764K Aug 22 01:18 screentest9_3.txt
-rw-rw-r-- 1 exet4487  708K Aug 22 01:20 screentest9_4.txt
-rw-rw-r-- 1 exet4487  776K Aug 22 01:33 screentest9_1.txt
-rw-rw-r-- 1 exet4487   12K Aug 22 19:00 screentest9_5.txt
-rw-rw-r-- 1 exet4487   22K Aug 22 20:17 screentest10_5.txt
-rw-rw-r-- 1 exet4487  117K Aug 22 20:17 screentest10_2.txt
-rw-rw-r-- 1 exet4487  111K Aug 22 20:17 screentest10_4.txt
-rw-rw-r-- 1 exet4487  134K Aug 22 20:17 screentest10_1.txt
-rw-rw-r-- 1 exet4487  111K Aug 22 20:17 screentest10_3.txt
-rw-rw-r-- 1 exet4487   11K Aug 22 20:24 _.txt
-rw-rw-r-- 1 exet4487  701K Aug 23 02:29 screentest11_3.txt
-rw-rw-r-- 1 exet4487  652K Aug 23 02:44 screentest11_8_.txt
-rw-rw-r-- 1 exet4487  783K Aug 23 02:47 screentest11_1.txt
-rw-rw-r-- 1 exet4487  796K Aug 23 02:55 screentest11_2.txt
-rw-rw-r-- 1 exet4487   12K Aug 23 09:56 screentest11_4.txt
-rw-rw-r-- 1 exet4487   12K Aug 23 09:57 screentest12_1.txt
-rw-rw-r-- 1 exet4487   612 Aug 23 09:57 screentest12_3.txt
-rw-rw-r-- 1 exet4487    80 Aug 23 09:57 screentest12_4.txt
-rw-rw-r-- 1 exet4487   12K Aug 23 09:57 screentest12_2.txt
-rw-rw-r-- 1 exet4487  8.9K Aug 23 10:04 screentest13_1.txt
-rw-rw-r-- 1 exet4487   12K Aug 23 10:04 screentest13_4.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 10:04 screentest13_3.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 10:04 screentest13_2.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 10:04 screentest13_5.txt
-rw-rw-r-- 1 exet4487  297K Aug 23 12:32 screentest14_4.txt
-rw-rw-r-- 1 exet4487  649K Aug 23 15:36 screentest14_5.txt
-rw-rw-r-- 1 exet4487  598K Aug 23 15:42 screentest14_1.txt
-rw-rw-r-- 1 exet4487  653K Aug 23 15:51 screentest14_2.txt
-rw-rw-r-- 1 exet4487  683K Aug 23 15:53 screentest14_3.txt
-rw-rw-r-- 1 exet4487   22K Aug 23 22:46 stresstest1_1.txt
-rw-rw-r-- 1 exet4487   22K Aug 23 22:46 stresstest1_3.txt
-rw-rw-r-- 1 exet4487   22K Aug 23 22:46 stresstest1_2.txt
-rw-rw-r-- 1 exet4487   21K Aug 23 22:46 stresstest1_5.txt
-rw-rw-r-- 1 exet4487   20K Aug 23 22:46 stresstest1_4.txt
-rwxrw-r-- 1 exet4487   363 Aug 23 22:47 testhead.sh~
-rwxrw-r-- 1 exet4487   357 Aug 23 22:51 testhead.sh
-rw-rw-r-- 1 exet4487   13K Aug 23 23:02 stresstest4_3.txt
-rw-rw-r-- 1 exet4487  8.9K Aug 23 23:02 stresstest4_1.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 23:02 stresstest4_5.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 23:02 stresstest4_4.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 23:02 stresstest4_2.txt
-rw-rw-r-- 1 exet4487  483K Aug 25 09:55 screentest5_4.txt
-rw-rw-r-- 1 exet4487  515K Aug 25 10:40 screentest5_5.txt
-rw-rw-r-- 1 exet4487  573K Aug 25 11:12 screentest5_3.txt
-rw-rw-r-- 1 exet4487  495K Aug 25 12:23 screentest5_1.txt
-rw-rw-r-- 1 exet4487  589K Aug 25 12:45 screentest5_2.txt
-rw-rw-r-- 1 exet4487   62K Aug 27 20:13 crashtest1_3.txt
-rw-rw-r-- 1 exet4487  110K Aug 27 22:40 crashtest1_4.txt
-rw-rw-r-- 1 exet4487  116K Aug 28 14:52 crashtest1_6.txt
-rw-rw-r-- 1 exet4487  165K Aug 28 17:55 crashtest1_7.txt
-rw-rw-r-- 1 exet4487  813K Aug 29 04:44 crashtest1_5.txt
-rw-rw-r-- 1 exet4487  729K Aug 29 05:01 crashtest1_1.txt
-rw-rw-r-- 1 exet4487  830K Aug 29 06:44 crashtest1_2.txt
-rw-rw-r-- 1 exet4487   61K Aug 31 16:47 crashtest2_3.txt
-rw-rw-r-- 1 exet4487  110K Aug 31 19:11 crashtest2_4.txt
-rw-rw-r-- 1 exet4487  441K Sep  1 10:51 crashtest2_5.txt
-rw-rw-r-- 1 exet4487  402K Sep  1 10:58 crashtest2_1.txt
-rw-rw-r-- 1 exet4487  404K Sep  1 10:58 crashtest2_2.txt
-rw-rw-r-- 1 exet4487   61K Sep  1 14:23 crashtest3_3.txt
-rw-rw-r-- 1 exet4487  592K Sep  2 14:44 crashtest3_4.txt
-rw-rw-r-- 1 exet4487  606K Sep  2 21:34 crashtest3_1.txt
-rw-rw-r-- 1 exet4487  668K Sep  2 21:34 crashtest3_2.txt
-rw-rw-r-- 1 exet4487  682K Sep  2 21:34 crashtest3_5.txt
-rw-rw-r-- 1 exet4487   61K Sep  3 20:54 crashtest4_3.txt
-rw-rw-r-- 1 exet4487  654K Sep  5 01:52 crashtest4_6.txt
-rw-rw-r-- 1 exet4487  722K Sep  5 02:18 crashtest4_2.txt
-rw-rw-r-- 1 exet4487  618K Sep  5 02:42 crashtest4_1.txt
-rw-rw-r-- 1 exet4487  728K Sep  5 04:27 crashtest4_4.txt
-rw-rw-r-- 1 exet4487  621K Sep  6 16:12 crashtest5_3.txt
-rw-rw-r-- 1 exet4487  688K Sep  6 17:38 crashtest5_4.txt
-rw-rw-r-- 1 exet4487   53K Sep  6 17:46 crashtest5_5.txt
-rw-rw-r-- 1 exet4487  703K Sep  6 18:01 crashtest5_2.txt
-rw-rw-r-- 1 exet4487 1001K Sep  6 20:03 crashtest5_1.txt
-rw-rw-r-- 1 exet4487  707K Sep  9 00:26 crashtest6_2.txt
-rw-rw-r-- 1 exet4487  665K Sep  9 01:20 crashtest6_4.txt
-rw-rw-r-- 1 exet4487  257K Sep  9 01:34 crashtest6_gpu03.txt
-rw-rw-r-- 1 exet4487  674K Sep  9 02:59 crashtest6_3.txt
-rw-rw-r-- 1 exet4487  782K Sep  9 03:57 crashtest6_1.txt
-rw-rw-r-- 1 exet4487  117K Sep  9 15:27 crashtest7_2.txt
-rw-rw-r-- 1 exet4487   89K Sep  9 15:27 crashtest7_4.txt
-rw-rw-r-- 1 exet4487  110K Sep  9 15:27 crashtest7_1.txt
-rw-rw-r-- 1 exet4487  121K Sep  9 15:27 crashtest7_5.txt
-rw-rw-r-- 1 exet4487  110K Sep  9 15:27 crashtest7_3.txt
-rw-rw-r-- 1 exet4487  211K Sep 10 00:21 crashtest8_4.txt
-rw-rw-r-- 1 exet4487  247K Sep 10 01:35 crashtest8_2.txt
-rw-rw-r-- 1 exet4487  263K Sep 10 02:12 crashtest8_5.txt
-rw-rw-r-- 1 exet4487  247K Sep 10 02:25 crashtest8_3.txt
-rw-rw-r-- 1 exet4487  285K Sep 10 02:27 crashtest8_1.txt
-rw-rw-r-- 1 exet4487   13K Sep 10 10:15 longtest5_1.txt
-rw-rw-r-- 1 exet4487  8.9K Sep 10 10:15 longtest5_4.txt
-rw-rw-r-- 1 exet4487   13K Sep 10 10:15 longtest5_2.txt
-rw-rw-r-- 1 exet4487   13K Sep 10 10:15 longtest5_5.txt
-rw-rw-r-- 1 exet4487   13K Sep 10 10:15 longtest5_3.txt
-rwxrwxr-x 1 exet4487   998 Sep 10 10:20 submitjobs.sh~
-rw-rw-r-- 1 exet4487   61K Sep 10 12:59 longtest7_3.txt
-rw-rw-r-- 1 exet4487  2.0M Sep 14 11:47 longtest7_2.txt
-rw-rw-r-- 1 exet4487  2.0M Sep 14 11:47 longtest7_1.txt
-rw-rw-r-- 1 exet4487  2.0M Sep 14 11:47 longtest7_5.txt
-rw-rw-r-- 1 exet4487  1.7M Sep 14 11:47 longtest7_4.txt
-rwxrwxr-x 1 exet4487   998 Sep 14 11:48 submitjobs.sh
-rw-rw-r-- 1 exet4487  3.1M Sep 20 16:05 longtest8_1.txt
-rw-rw-r-- 1 exet4487  3.2M Sep 20 16:25 longtest8_2.txt
-rw-rw-r-- 1 exet4487  2.6M Sep 20 16:48 longtest8_4.txt
-rw-rw-r-- 1 exet4487  3.2M Sep 20 17:28 longtest8_3.txt
-rw-rw-r-- 1 exet4487  3.1M Sep 20 18:04 longtest8_5.txt
-rw-rw-r-- 1 exet4487  1.6K Sep 21 12:48 testlaunch.sh.sh
-rw-rw-r-- 1 exet4487   25M Sep 23 04:39 Crab64080opt1_4.txt
-rw-rw-r-- 1 exet4487  3.8M Sep 24 09:16 Crab64080opt1_5.txt
-rw-rw-r-- 1 exet4487  4.0M Sep 24 09:20 Crab64080opt1_1.txt
-rw-rw-r-- 1 exet4487  4.0M Sep 24 09:42 Crab64080opt1_2.txt
-rw-rw-r-- 1 exet4487   31M Sep 24 10:15 screenlog.0
-rw-rw-r-- 1 exet4487  4.0M Sep 24 10:18 Crab64080opt1_3.txt
[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m ./subt[Kmitjobs.sh Crab64080opt2
Disabling MPI - so only running 1 copy of your program.
Sending program's output to file: /users/exet4487/launchpad/testlaunch.sh-203019.out
Job submission complete.

Disabling MPI - so only running 1 copy of your program.
Sending program's output to file: /users/exet4487/launchpad/testlaunch.sh-203020.out
Job submission complete.

Disabling MPI - so only running 1 copy of your program.
Sending program's output to file: /users/exet4487/launchpad/testlaunch.sh-203022.out
Job submission complete.

Disabling MPI - so only running 1 copy of your program.
Sending program's output to file: /users/exet4487/launchpad/testlaunch.sh-203023.out
Job submission complete.

Disabling MPI - so only running 1 copy of your program.
Sending program's output to file: /users/exet4487/launchpad/testlaunch.sh-203025.out
Job submission complete.

[?1049h[22;0;0t[1;60r(B[m[4l[?7h[H[2JEvery 0.1s: q[1;330Hglamdring: Thu Sep 24 10:19:53 2020[3;3HJobNum  Status[3;30HName[40GJob Name[3;78HCores used/reserved    GB[3;111HIO (r/w mbps)    Runtime/Q time    Comment[3;170HNodes List[4d--------  -----------------  --------  ------------------------------------  ---------------------  --------  ---------------  ----------------  ----------------------  ------------[5;3H201398  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.9 / 1x8[5;101H4.3 / 24  23.3/0[5;128H2.9 days[5;146Hnocomment[5;170Hgpu01(8)[6;3H201399  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  2.1 / 1x8[6;101H4.1 / 24  81.4/0[6;128H2.9 days[6;146Hnocomment[6;170Hgpu02(8)[7;3H201400  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  0.9 / 1x4[7;101H8.4 / 12  5464.1/1.7[128G2.9 days[7;146Hnocomment[7;170Hgpu03(4)[8;3H201402  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt1  1.9 / 1x8[8;101H4.2 / 24  46.4/0[8;128H2.9 days[8;146Hnocomment[8;170Hgpu05(8)[9;3H203019  Q (# 1)(gpulong)   exet4487  launchpad/testlaunch.sh.sh[9;78H1x8[9;101H24.0[111G0.1 mins[9;128Hnocomment[9;146H[ 0 of 8 ] cores free[10;3H203020  Q (# 2)(gpulong)   exet4487  launchpad/testlaunch.sh.sh[10;78H1x8[10;101H24.0[111G0.1 mins[10;128Hnocomment[10;146H[ 0 of 8 ] cores free[11;3H203022  Q (# 3)(gpulong)   exet4487  launchpad/testlaunch.sh.sh[11;78H1x4[11;101H12.0[111G0.1 mins[11;128Hnocomment[13d╒═══════════════════════╤══════════╤═════════════╤══════════╤══════════╤══════════╤═════════════╕[14d│ cores free in queue   │ NORMAL   │ BLACKHOLE   │ PLANET   │ CMB[72G│ BERG     │ GPULONG     │[15d╞═══════════════════════╪══════════╪═════════════╪══════════╪══════════╪══════════╪═════════════╡[16d│[16;25H│ 32 / 32  │ 80 / 80     │ 23 / 96  │ 84 / 468 │ 94 / 448 │ 0 / 5 nodes │[17d╘═══════════════════════╧══════════╧═════════════╧══════════╧══════════╧══════════╧═════════════╛[18dYou can use the command "n" ("n -t" for text-only) to list cores/GB availability on the compute nodes.[60;364H[11d[2L[1;359H4[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9;7H22  RUNNING (gpulong)[9;40Hexet4487/testlaunch.sh Crab64080opt2  ?? / 1x4[9;101H?? / 12    ??     [9;128H0.0 mins [9;146Hnocomment   gpu04(4) [10;7H19[16G1[10;137H[K[11;3H203020  Q (# 2)(gpulong)   exet4487  launchpad/testlaunch.sh.sh[11;78H1x8[11;101H24.0[111G0.1 mins[11;128Hnocomment[12;3H203023  Q (# 3)(gpulong)   exet4487  launchpad/testlaunch.sh.sh[12;78H1x4[12;101H12.0[111G0.1 mins[12;128Hnocomment[13;8H5[16G4[13;80H8[13;101H24[60;364H[1;359H5[9;130H1[60;364H[1;359H6[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;113H2[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 4 ] cores free[13;146H[ 0 of 8 ] cores free[60;364H[1;359H7[11;113H2[60;364H[1;359H8[60;364H[1;355H20:00[12;113H2[13d2[60;364H[1;359H1[9;130H2[60;364H[1;359H2[10;113H3[60;364H[1;359H3[11;113H3[60;364H[1;359H4[60;364H[1;359H5[12;113H3[60;364H[1;359H6[9;130H3[13;113H3[60;364H[1;359H8[10;113H4[60;364H[1;359H9[11;113H4[60;364H[1;358H10[5;111H34.9[6;78H1.9[6;111H93.0[7;78H2.6[7;111H221.0/0   [8;111H58.1[60;364H[1;359H1[12;113H4[60;364H[1;359H2[13;113H4[60;364H[1;359H3[9;130H4[10;113H5[60;364H[1;359H5[11;113H5[60;364H[1;359H6[60;364H[1;359H7[12;113H5[60;364H[1;359H8[13;113H5[60;364H[1;359H9[9;130H5[60;364H[1;358H20[10;113H6[11d6[60;364H[1;359H2[60;364H[1;359H3[12;113H6[60;364H[1;359H4[13;113H6[60;364H[1;359H5[9;130H6[60;364H[1;359H6[10;113H7[60;364H[1;359H8[11;113H7[60;364H[1;359H9[12;113H7[60;364H[1;358H30[13;113H7[60;364H[1;359H1[9;130H7[60;364H[1;359H2[10;113H8[60;364H[1;359H3[11;113H8[60;364H[1;359H5[12;113H8[60;364H[1;359H6[13;113H8[60;364H[1;359H7[9;130H8[60;364H[1;359H8[10;113H9[60;364H[1;359H9[11;113H9[60;364H[1;358H40[60;364H[1;359H2[12;113H9[13d9[60;364H[1;359H3[9;130H9[60;364H[1;359H4[10;111H1.0[60;364H[1;359H5[11;111H1.0[60;364H[1;359H6[60;364H[1;359H7[12;111H1.0[60;364H[1;359H8[13;111H1.0[60;364H[1;358H50[9;128H1.0[10;113H1[60;364H[1;359H1[11;113H1[60;364H[1;359H2[60;364H[1;359H3[12;113H1[60;364H[1;359H4[13;113H1[60;364H[1;359H5[9;130H1[60;364H[1;359H7[10;113H2[11d2[60;364H[1;359H8[60;364H[1;359H9[12;113H2[60;364H[1;356H1:00[13;113H2[60;364H[1;359H1[9;130H2[60;364H[1;359H2[10;113H3[60;364H[1;359H4[11;113H3[60;364H[1;359H5[12;113H3[60;364H[1;359H6[13;113H3[60;364H[1;359H7[9;130H3[60;364H[1;359H8[10;113H4[60;364H[1;359H9[11;113H4[60;364H[1;358H11[5;111H23.3[6;80H6[6;111H127.9/0[7;78H1.7[7;101H4.1[111G34.9/0 [9;78H0.0 / 1x4[9;101H2.9 / 12  ~ 0[12d4[60;364H[1;359H2[13;113H4[60;364H[1;359H3[9;130H4[60;364H[1;359H4[10;113H5[60;364H[1;359H5[11;113H5[60;364H[1;359H6[60;364H[1;359H8[12;113H5[13d5[60;364H[1;359H9[9;130H5[60;364H[1;358H20[10;113H6[60;364H[1;359H1[11;113H6[60;364H[1;359H2[60;364H[1;359H3[12;113H6[60;364H[1;359H5[9;130H6[13;113H6[60;364H[1;359H6[10;113H7[60;364H[1;359H7[11;113H7[60;364H[1;359H8[60;364H[1;359H9[12;113H7[60;364H[1;358H30[9;130H7[13;113H7[60;364H[1;359H2[10;113H8[60;364H[1;359H3[11;113H8[60;364H[1;359H4[60;364H[1;359H5[12;113H8[60;364H[1;359H6[13;113H8[60;364H[1;359H7[9;130H8[10;113H9[60;364H[1;359H9[11;113H9[60;364H[1;358H40[60;364H[1;359H1[12;113H9[60;364H[1;359H2[13;113H9[60;364H[1;359H3[9;130H9[60;364H[1;359H5[10;111H2.0[11;111H2.0[60;364H[1;359H6[60;364H[1;359H7[12;111H2.0[60;364H[1;359H8[13;111H2.0[60;364H[1;359H9[9;128H2.0[60;364H[1;358H50[10;113H1[60;364H[1;359H2[11;113H1[60;364H[1;359H3[12;113H1[60;364H[1;359H4[13;113H1[60;364H[1;359H5[9;130H1[60;364H[1;359H6[10;113H2[60;364H[1;359H7[11;113H2[60;364H[1;359H9[12;113H2[60;364H[1;356H2:00[13;113H2[60;364H[1;359H1[9;130H2[60;364H[1;359H2[10;113H3[60;364H[1;359H3[11;113H3[60;364H[1;359H4[12;113H3[60;364H[1;359H6[13;113H3[60;364H[1;359H7[9;130H3[60;364H[1;359H8[10;113H4[60;364H[1;359H9[11;113H4[60;364H[1;358H10[60;364H[1;359H2[6;78H2.2[6;111H81.3/0 [7;111H46.5[8;80H2[8;111H139.6/0[9;101H5.7[111G11.6/0.1[12;113H4[13d4[60;364H[1;359H3[9;130H4[60;364H[1;359H4[10;113H5[60;364H[1;359H5[11;113H5[60;364H[1;359H6[60;364H[1;359H7[12;113H5[60;364H[1;359H8[9;130H5[13;113H5[60;364H[1;358H20[10;113H6[60;364H[1;359H1[11;113H6[60;364H[1;359H3[12;113H6[60;364H[1;359H4[13;113H6[60;364H[1;359H5[9;130H6[60;364H[1;359H6[10;113H7[60;364H[1;359H8[11;113H7[60;364H[1;359H9[12;113H7[60;364H[1;358H30[13;113H7[60;364H[1;359H1[9;130H7[60;364H[1;359H3[10;113H8[11d8[60;364H[1;359H4[60;364H[1;359H6[12;113H8[13d8[60;364H[1;359H7[9;130H8[60;364H[1;359H8[10;113H9[11d9[60;364H[1;358H40[60;364H[1;359H1[12;113H9[13d9[60;364H[1;359H3[9;130H9[60;364H[1;359H5[10;111H3.0[11;111H3.0[60;364H[1;359H6[60;364H[1;359H7[12;111H3.0[60;364H[1;359H9[9;128H3.0[13;111H3.0[60;364H[1;358H50[10;113H1[60;364H[1;359H1[11;113H1[60;364H[1;359H2[60;364H[1;359H3[12;113H1[60;364H[1;359H4[13;113H1[60;364H[1;359H6[9;130H1[10;113H2[60;364H[1;359H7[11;113H2[60;364H[1;359H8[60;364H[1;359H9[12;113H2[60;364H[1;356H3:00[13;113H2[60;364H[1;359H1[9;130H2[60;364H[1;359H3[10;113H3[11d3[60;364H[1;359H4[60;364H[1;359H5[12;113H3[60;364H[1;359H6[13;113H3[60;364H[1;359H7[9;130H3[60;364H[1;359H9[10;113H4[11d4[60;364H[1;358H10[60;364H[1;359H1[12;113H4[60;364H[1;359H2[13;113H4[60;364H[1;359H3[5;111H34.9[6;111H69.8[7;111H34.9[8;78H2.0[8;111H58.0/0 [9;101H2.9[111G0/0.1   [9;130H4[60;364H[1;359H4[10;113H5[60;364H[1;359H6[11;113H5[60;364H[1;359H7[12;113H5[15;73H[15;83H═╤[15;97H═╕[16;78H      │ GPULONG     │[17;73H[17;83H═╪[17;97H═╡[18;74H104 / 448 │ 0 / 5 nodes │[19;73H[19;83H═╧[19;97H═╛[60;364H[1;359H8[13;113H5[60;364H[1;359H9[9;130H5[15;73H[1P[16;78H[1P[17;73H[1P[18d 9[1P[19d[1P[60;364H[1;358H20[10;113H6[60;364H[1;359H1[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11;113H6[11;137H[K[12;146H[K[13d[K[60;364H[1;359H3[12;113H6[60;364H[1;359H4[13;113H6[60;364H[1;359H5[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;130H6[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 4 ] cores free[13;146H[ 0 of 8 ] cores free[60;364H[1;359H6[10;113H7[60;364H[1;359H7[11;113H7[60;364H[1;359H8[12;113H7[60;364H[1;358H30[13;113H7[60;364H[1;359H1[9;130H7[60;364H[1;359H2[10;113H8[60;364H[1;359H3[11;113H8[60;364H[1;359H4[60;364H[1;359H6[12;113H8[13d8[60;364H[1;359H7[9;130H8[60;364H[1;359H8[10;113H9[60;364H[1;359H9[11;113H9[60;364H[1;358H40[60;364H[1;359H1[12;113H9[60;364H[1;359H3[9;130H9[13;113H9[60;364H[1;359H4[10;111H4.0[60;364H[1;359H5[11;111H4.0[60;364H[1;359H6[60;364H[1;359H7[12;111H4.0[60;364H[1;359H8[13;111H4.0[60;364H[1;358H50[9;128H4.0[10;113H1[60;364H[1;359H1[11;113H1[60;364H[1;359H2[60;364H[1;359H3[12;113H1[60;364H[1;359H4[13;113H1[60;364H[1;359H5[9;130H1[60;364H[1;359H7[10;113H2[11d2[60;364H[1;359H8[60;364H[1;359H9[12;113H2[60;364H[1;356H4:00[13;113H2[60;364H[1;359H1[9;130H2[60;364H[1;359H2[10;113H3[60;364H[1;359H4[11;113H3[60;364H[1;359H5[12;113H3[60;364H[1;359H6[13;113H3[60;364H[2d[L[1;359H7[3dSomething wrong:  Ran out of input[10;130H3[11;113H4[60;364H[3d[M[1;359H9[11;113H4[60;364H[1;358H10[60;364H[1;359H2[12;113H4[13d4[60;364H[1;359H3[9;130H4[60;364H[1;359H4[5;80H5[5;111H69.8[6;78H1.6[6;111H162.8/0[8;78H1.9[8;114H1[9;101H4.5[111G11.5/0.4[10;113H5[60;364H[1;359H5[11;113H5[15;73H[15;83H═╤[15;97H═╕[16;78H      │ GPULONG     │[17;73H[17;83H═╪[17;97H═╡[18;74H104 / 448 │ 0 / 5 nodes │[19;73H[19;83H═╧[19;97H═╛[60;364H[1;359H6[15;73H[1P[16;78H[1P[17;73H[1P[18d 9[1P[19d[1P[60;364H[1;359H7[12;113H5[60;364H[1;359H9[9;130H5[13;113H5[60;364H[1;358H20[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;113H6[10;137H[K[11;146H[K[12d[K[13d[K[60;364H[1;359H1[11;113H6[60;364H[1;359H2[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 4 ] cores free[13;146H[ 0 of 8 ] cores free[60;364H[1;359H3[12;113H6[60;364H[1;359H4[13;113H6[60;364H[1;359H6[9;130H6[10;113H7[60;364H[1;359H7[11;113H7[60;364H[1;359H8[60;364H[1;359H9[12;113H7[60;364H[1;358H30[13;113H7[60;364H[1;359H1[9;130H7[60;364H[1;359H3[10;113H8[11d8[60;364H[1;359H4[60;364H[1;359H5[12;113H8[60;364H[1;359H6[13;113H8[60;364H[1;359H7[9;130H8[60;364H[1;359H8[10;113H9[60;364H[1;359H9[11;113H9[60;364H[1;358H41[12;113H9[60;364H[1;359H2[13;113H9[60;364H[1;359H3[9;130H9[60;364H[1;359H4[10;111H5.0[60;364H[1;359H5[11;111H5.0[60;364H[1;359H6[60;364H[1;359H8[12;111H5.0[13;111H5.0[60;364H[1;359H9[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9;128H5.0[9;155H[12P[10;16H2[10;137H[K[11;16H3[11;137H[K[12;16H4[12;137H[K[13;16H5[13;137H[K[60;364H[1;358H50[10;113H1[18;75H0[60;364H[1;359H1[11;113H1[60;364H[1;359H2[60;364H[1;359H3[12;113H1[60;364H[1;359H5[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;130H1[9;155H[15X[9;170Hgpu04(4)[10;16H3[10;146H[ 0 of 8 ] cores free[11;16H4[11;146H[ 0 of 8 ] cores free[12;16H5[12;146H[ 0 of 4 ] cores free[13;16H6[13;113H1[13;146H[ 0 of 8 ] cores free[60;364H[1;359H6[10;113H2[60;364H[1;359H7[10;16H5[11d6[11;113H2[12;16H7[13d8[60;364H[1;359H8[60;364H[1;359H9[12;113H2[60;364H[1;356H5:00[10;16H6[11d7[12d8[13d9[13;113H2[60;364H[1;359H2[9;130H2[10;113H3[60;364H[1;359H3[10;16H7[11d8[11;113H3[12;16H9[13d10)(gpulong)[60;364H[1;359H4[60;364H[1;359H5[12;113H3[60;364H[1;359H6[10;16H8[11d9[12d10)(gpulong)[13;17H1[13;113H3[60;364H[1;359H7[9;130H3[60;364H[1;359H9[10;16H9[10;113H4[11;16H10)(gpulong)[11;113H4[12;17H1[13d2[60;364H[1;358H10[60;364H[1;359H1[12;113H4[60;364H[1;359H2[10;16H11)(gpulong)[11;17H2[12d3[13d4[13;113H4[60;364H[1;359H3[9;130H4[60;364H[1;359H4[5;80H6[6;78H2.1[6;111H69.6/0 [7;80H5[7;111H46.5[8;111H46.5[9;80H1[9;101H2.9[111G~ 0     [10;17H2[10;113H5[11;17H3[12d4[13d5[18;75H4[60;364H[1;359H6[11;113H5[60;364H[1;359H7[12;113H5[60;364H[1;359H8[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;17H3[10;137H[K[11;17H4[11;137H[K[12;17H5[12;137H[K[13;17H6[13;113H5[13;137H[K[60;364H[1;359H9[9;130H5[60;364H[1;358H20[10;17H4[10;113H6[11;17H5[12d6[13d7[18;75H0[60;364H[1;359H1[11;113H6[60;364H[1;359H3[12;113H6[60;364H[1;359H4[10;17H5[11d6[12d7[13d8[13;113H6[60;364H[1;359H5[9;130H6[60;364H[1;359H6[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;17H6[10;113H7[10;146H[ 0 of 8 ] cores free[11;17H7[11;146H[ 0 of 8 ] cores free[12;17H8[12;146H[ 0 of 4 ] cores free[13;17H9[13;146H[ 0 of 8 ] cores free[60;364H[1;359H7[11;113H7[60;364H[1;359H8[60;364H[1;358H30[10;17H7[11d8[12d9[12;113H7[13;16H20[13;113H7[60;364H[1;359H1[9;130H7[60;364H[1;359H2[10;113H8[60;364H[1;359H3[10;17H8[11d9[11;113H8[12;16H20[13d1[60;364H[1;359H4[60;364H[1;359H5[10;17H9[11d20[12d1[12;113H8[13;17H2[13;113H8[15;73H[15;83H═╤[15;97H═╕[16;78H      │ GPULONG     │[17;73H[17;83H═╪[17;97H═╡[18;74H100 / 448 │ 0 / 5 nodes │[19;73H[19;83H═╧[19;97H═╛[60;364H[1;359H7[9;130H8[60;364H[1;359H8[10;113H9[60;364H[1;359H9[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11;113H9[11;137H[K[12;146H[K[13d[K[60;364H[1;358H40[15;73H[1P[16;78H[1P[17;73H[1P[18d 96[1P[19;73H[1P[60;364H[1;359H1[10;17H8[11d19[12d0[12;113H9[13;17H1[60;364H[1;359H3[9;130H9[13;113H9[60;364H[1;359H4[10;111H6.0[15;73H[15;83H═╤[15;97H═╕[16;78H      │ GPULONG     │[17;73H[17;83H═╪[17;97H═╡[18;74H100 / 448 │ 0 / 5 nodes │[19;73H[19;83H═╧[19;97H═╛[60;364H[1;359H5[11;111H6.0[15;73H[1P[16;78H[1P[17;73H[1P[18d 96[1P[19;73H[1P[60;364H[1;359H6[60;364H[1;359H7[10;17H7[11d8[12d19[12;111H6.0[13;17H0[60;364H[1;359H8[13;111H6.0[60;364H[1;358H50[9;128H6.0[10;113H1[60;364H[1;359H1[11;113H1[18;75H2[60;364H[1;359H2[18;85H1[60;364H[9d[M[1;359H3[9;17H6[10d7[11d8[11;113H1[12;16H19[60;364H[1;359H4[12;113H1[60;364H[1;359H5[9;113H2[60;364H[1;359H7[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;146H[ 0 of 8 ] cores free[10;113H2[10;146H[ 0 of 8 ] cores free[60;364H[1;359H8[17;85H0[60;364H[1;359H9[11;113H2[60;364H[1;356H6:00[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9;7H23  RUNNING [9;40Hexet4487/testlaunch.sh Crab64080opt2  ?? / 1x4[9;101H?? / 12    ??     [9;128H0.1 mins [9;146Hnocomment   gpu04(4) [10;7H19[10;17H6[10;137H[K[11;8H0[11;17H7[11;80H8[11;101H24[12;17H8[12;113H2[60;364H[1;359H1[60;364H[1;359H3[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;113H3[10;146H[ 0 of 8 ] cores free[11;113H3[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[17;75H6[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9;130H2[9;155H[12P[10;146H[K[11d[K[12;113H3[12;137H[K[60;364H[1;359H7[60;364H[1;359H8[10;17H5[10;113H4[11;17H6[12d7[60;364H[1;358H10[11;113H4[14;73H[14;83H═╤[14;97H═╕[15;78H      │ GPULONG     │[16;73H[16;83H═╪[16;97H═╡[17;74H110 / 448 │ 0 / 5 nodes │[18;73H[18;83H═╧[18;97H═╛[60;364H[1;359H1[60;364H[1;359H2[9;130H3[12;113H4[17;75H06[60;364H[1;359H3[17;75H10[60;364H[1;359H4[10;17H4[10;113H5[11;17H5[12d6[60;364H[1;359H5[5;80H9[5;111H23.1[6;111H81.4[7;80H1[7;111H116.2/0[8;80H8[8;111H69.8[11d5[17;76H4[60;364H[1;359H7[60;364H[1;359H8[9;130H4[12;113H5[17;75H20[60;364H[1;359H9[60;364H[1;358H20[10;17H3[10;113H6[11;17H4[12d5[60;364H[1;359H1[11;113H6[60;364H[1;359H3[60;364H[1;359H4[9;130H5[12;113H6[17;75H3[60;364H[1;359H5[60;364H[1;359H6[10;17H2[10;113H7[11;17H3[12d4[60;364H[1;359H7[11;113H7[60;364H[1;359H9[60;364H[1;358H30[9;130H6[12;113H7[17;75H26[60;364H[1;359H1[60;364H[1;359H2[10;17H1[10;113H8[11;17H2[12d3[17;75H30[60;364H[1;359H3[11;113H8[60;364H[1;359H4[17;76H4[60;364H[1;359H6[9;130H7[12;113H8[17;76H0[60;364H[1;359H7[60;364H[1;359H8[10;17H0[10;113H9[11;17H1[12d2[60;364H[1;359H9[11;113H9[60;364H[1;358H40[17;76H4[60;364H[1;359H2[9;130H8[12;113H9[17;76H0[60;364H[1;359H3[60;364H[1;359H4[10;16H9)(gpulong) [10;111H7.0[11;17H0[12d1[60;364H[1;359H5[11;111H7.0[60;364H[1;359H6[17;76H4[60;364H[1;359H7[9;130H9[12;111H7.0[60;364H[1;359H9[60;364H[1;358H50[10;113H1[17;76H0[60;364H[1;359H1[11;113H1[60;364H[1;359H2[60;364H[1;359H3[10;16H8[11d9)(gpulong) [12;17H0[60;364H[1;359H4[9;128H1.0[12;113H1[60;364H[1;359H6[10;113H2[60;364H[1;359H7[11;113H2[60;364H[1;359H8[60;364H[1;359H9[10;16H7[11d8[12d9)(gpulong) [60;364H[1;356H7:00[9;130H1[12;113H2[60;364H[1;359H2[10;113H3[60;364H[1;359H3[11;113H3[17;75H4[60;364H[1;359H4[60;364H[1;359H5[10;16H6[11d7[12d8[60;364H[1;359H6[9;130H2[12;113H3[60;364H[1;359H7[60;364H[1;359H9[10;113H4[11d4[60;364H[1;358H10[60;364H[1;359H1[10;16H5[11d6[12d7[60;364H[1;359H2[9;130H3[12;113H4[17;76H4[60;364H[1;359H3[17;76H0[60;364H[1;359H4[10;113H5[60;364H[1;359H6[11;113H5[60;364H[1;359H7[5;111H34.9[6;80H0[6;111H93.0[7;80H7[7;111H34.9/0 [8;78H0[8;111H186.1/0[9;78H0.0 / 1x4[9;101H2.8 / 12  ~ 0[10;16H4[11d5[12d6[60;364H[1;359H8[9;130H4[12;113H5[17;76H4[60;364H[1;359H9[60;364H[1;358H20[10;113H6[17;76H0[60;364H[1;359H1[11;113H6[60;364H[1;359H3[10;16H3[11d4[12d5[60;364H[1;359H4[9;130H5[12;113H6[17;76H4[60;364H[1;359H5[60;364H[1;359H6[10;113H7[17;76H0[60;364H[1;359H7[11;113H7[60;364H[1;359H8[10;16H2[11d3[12d4[60;364H[1;358H30[9;130H6[12;113H7[60;364H[1;359H1[60;364H[1;359H2[10;113H8[60;364H[1;359H3[11;113H8[60;364H[1;359H4[10;16H1[11d2[12d3[60;364H[1;359H6[9;130H7[12;113H8[17;76H4[60;364H[1;359H7[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[17;75H3[60;364H[1;359H8[10;113H9[60;364H[1;359H9[11;113H9[60;364H[1;358H40[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H1[9;130H8[12;113H9[60;364H[1;359H3[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H4[10;111H8.0[17;75H2[60;364H[1;359H5[11;111H8.0[60;364H[1;359H6[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H7[60;364H[1;359H8[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;130H9[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;111H8.0[12;146H[ 0 of 8 ] cores free[60;364H[1;358H50[10;113H1[60;364H[1;359H1[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11;113H1[11;137H[K[12;146H[K[60;364H[1;359H2[17;75H1[60;364H[1;359H3[60;364H[1;359H4[9;128H2.0[12;113H1[60;364H[1;359H5[10;113H2[60;364H[1;359H7[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;113H2[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H8[17;75H0[60;364H[1;359H9[60;364H[1;356H8:00[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9;130H1[9;155H[12P[10;146H[K[11d[K[12;113H2[12;137H[K[60;364H[1;359H1[60;364H[1;359H3[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;113H3[10;146H[ 0 of 8 ] cores free[11;113H3[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H4[14;73H[1P[15;78H[1P[16;73H[1P[17d 9[1P[18d[1P[60;364H[1;359H5[60;364H[1;359H6[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9;130H2[9;155H[12P[10;146H[K[11d[K[12;113H3[12;137H[K[60;364H[1;359H7[60;364H[1;359H8[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;113H4[10;146H[ 0 of 8 ] cores free[11;113H4[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[9;130H3[12;113H4[60;364H[1;359H3[60;364H[1;359H4[10;113H5[60;364H[1;359H5[11;113H5[60;364H[1;359H7[60;364H[1;359H8[5;111H23.3[6;78H1.8[6;111H139.6/0[7;111H46.5[8;101H8.0[111G5464.1/3.4[9;111H0/0.1[9;130H4[12;113H5[60;364H[1;359H9[60;364H[1;358H20[10;113H6[60;364H[1;359H1[11;113H6[60;364H[1;359H3[60;364H[1;359H4[9;130H5[12;113H6[60;364H[1;359H5[60;364H[1;359H6[10;113H7[60;364H[1;359H7[11;113H7[60;364H[1;359H8[60;364H[1;358H30[9;130H6[12;113H7[60;364H[1;359H1[60;364H[1;359H2[10;113H8[60;364H[1;359H3[11;113H8[60;364H[1;359H4[60;364H[1;359H5[9;130H7[12;113H8[14;73H[14;83H═╤[14;97H═╕[15;78H      │ GPULONG     │[16;73H[16;83H═╪[16;97H═╡[17;74H104 / 448 │ 0 / 5 nodes │[18;73H[18;83H═╧[18;97H═╛[60;364H[1;359H7[60;364H[1;359H8[10;113H9[14;73H[1P[15;78H[1P[16;73H[1P[17d 9[1P[18d[1P[60;364H[1;359H9[11;113H9[60;364H[1;358H40[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H1[60;364H[1;359H3[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;130H8[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;113H9[12;146H[ 0 of 8 ] cores free[60;364H[1;359H4[10;111H9.0[60;364H[1;359H5[11;111H9.0[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[9;130H9[12;111H9.0[60;364H[1;358H50[10;113H1[60;364H[1;359H1[11;113H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[9;128H3.0[12;113H1[60;364H[1;359H6[10;113H2[60;364H[1;359H7[11;113H2[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H9:00[9;130H1[12;113H2[60;364H[1;359H2[10;113H3[60;364H[1;359H3[11;113H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[9;130H2[12;113H3[60;364H[1;359H8[10;113H4[60;364H[1;359H9[11;113H4[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[9;130H3[12;113H4[60;364H[1;359H4[10;113H5[60;364H[1;359H5[11;113H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[5;111H34.9[6;78H2.2[6;111H69.6/0 [7;111H34.9[8;78H2.0[8;101H3.9[111G46.5/0    [9;101H5.6[111G11.5/0.3[9;130H4[12;113H5[60;364H[1;359H9[60;364H[1;358H21[10;113H6[11d6[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[9;130H5[12;113H6[60;364H[1;359H5[60;364H[1;359H7[10;113H7[11d7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[9;130H6[12;113H7[60;364H[1;359H1[60;364H[1;359H2[10;113H8[60;364H[1;359H4[11;113H8[60;364H[1;359H5[60;364H[1;359H6[9;130H7[12;113H8[60;364H[1;359H7[60;364H[1;359H8[10;113H9[60;364H[1;359H9[11;113H9[60;364H[1;358H41[60;364H[1;359H2[9;130H8[12;113H9[60;364H[1;359H3[60;364H[1;359H4[10;111H10.0 mins[60;364H[1;359H5[11;111H10.0 mins[60;364H[1;359H6[60;364H[1;359H8[9;130H9[12;111H10.0 mins[60;364H[1;359H9[60;364H[1;358H50[10;114H1[60;364H[1;359H1[11;114H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[9;128H4.0[12;114H1[60;364H[1;359H6[10;114H2[60;364H[1;359H7[11;114H2[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;355H30:01[9;130H1[12;114H2[60;364H[1;359H2[10;114H3[60;364H[1;359H3[11;114H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[9;130H2[12;114H3[60;364H[1;359H8[10;114H4[60;364H[1;359H9[11;114H4[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[9;130H3[12;114H4[60;364H[1;359H3[10;114H5[60;364H[1;359H5[11;114H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[9;130H4[12;114H5[60;364H[1;359H9[5;111H23.3[6;80H1[6;111H81.4[9;103H9[9;118H2[60;364H[1;358H21[10;114H6[11d6[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[9;130H5[12;114H6[60;364H[1;359H5[60;364H[1;359H7[10;114H7[11d7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[9;130H6[12;114H7[60;364H[1;359H1[60;364H[1;359H2[10;114H8[11d8[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[9;130H7[12;114H8[60;364H[1;359H7[60;364H[1;359H8[10;114H9[60;364H[1;358H40[11;114H9[60;364H[1;359H1[60;364H[1;359H2[9;130H8[12;114H9[60;364H[1;359H3[60;364H[1;359H4[10;112H1.0[60;364H[1;359H5[11;112H1.0[60;364H[1;359H7[60;364H[1;359H8[9;130H9[12;112H1.0[60;364H[1;359H9[60;364H[1;358H50[10;114H1[60;364H[1;359H1[11;114H1[60;364H[1;359H2[60;364H[1;359H4[9;128H5.0[12;114H1[60;364H[1;359H5[60;364H[1;359H6[10;114H2[60;364H[1;359H7[11;114H2[60;364H[1;359H8[60;364H[1;356H1:00[9;130H1[12;114H2[60;364H[1;359H1[60;364H[1;359H2[10;114H3[60;364H[1;359H3[11;114H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[9;130H2[12;114H3[60;364H[1;359H8[10;114H4[60;364H[1;359H9[11;114H4[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H3[9;130H3[12;114H4[60;364H[1;359H4[10;114H5[60;364H[1;359H5[11;114H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[9;130H4[12;114H5[60;364H[1;358H20[10;114H6[60;364H[1;359H1[6;78H1.3[6;111H139.6/0[7;80H6[8;78H1.9[9d2[9;101H2.8[9;118H1[11;114H6[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[9;130H5[12;114H6[60;364H[1;359H6[10;114H7[60;364H[1;359H7[11;114H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[9;130H6[12;114H7[60;364H[1;359H1[10;114H8[60;364H[1;359H3[11;114H8[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[9;130H7[12;114H8[60;364H[1;359H7[60;364H[1;359H9[10;114H9[11d9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[9;130H8[12;114H9[60;364H[1;359H3[60;364H[1;359H4[10;112H2.0[60;364H[1;359H6[11;112H2.0[60;364H[1;359H7[60;364H[1;359H8[9;130H9[12;112H2.0[60;364H[1;359H9[60;364H[1;358H50[10;114H1[60;364H[1;359H1[11;114H1[60;364H[1;359H3[60;364H[1;359H4[9;128H6.0[12;114H1[60;364H[1;359H5[60;364H[1;359H6[10;114H2[60;364H[1;359H7[11;114H2[60;364H[1;359H8[60;364H[1;356H2:00[9;130H1[12;114H2[60;364H[1;359H1[60;364H[1;359H2[10;114H3[60;364H[1;359H3[11;114H3[60;364H[1;359H4[60;364H[1;359H6[9;130H2[12;114H3[60;364H[1;359H7[60;364H[1;359H8[10;114H4[60;364H[1;359H9[11;114H4[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H3[9;130H3[12;114H4[60;364H[1;359H4[10;114H5[60;364H[1;359H5[11;114H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[9;130H4[12;114H5[60;364H[1;358H20[10;114H6[60;364H[1;359H1[11;114H6[60;364H[1;359H2[5;111H34.9[6;78H2.0[6;111H81.3/0 [7;80H4[7;111H69.8[8;80H8[9;101H5.6[111G23.1/0.2[60;364H[1;359H3[60;364H[1;359H4[9;130H5[12;114H6[60;364H[1;359H6[10;114H7[60;364H[1;359H7[11;114H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[9;130H6[12;114H7[60;364H[1;359H1[60;364H[1;359H3[10;114H8[11d8[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[9;130H7[12;114H8[60;364H[1;359H7[60;364H[1;359H8[10;114H9[60;364H[1;358H40[11;114H9[60;364H[1;359H1[60;364H[1;359H2[9;130H8[12;114H9[60;364H[1;359H3[60;364H[1;359H4[10;112H3.0[60;364H[1;359H5[11;112H3.0[60;364H[1;359H7[60;364H[1;359H8[9;130H9[12;112H3.0[60;364H[1;359H9[60;364H[1;358H50[10;114H1[60;364H[1;359H1[11;114H1[60;364H[1;359H2[60;364H[1;359H4[9;128H7.0[12;114H1[60;364H[1;359H5[60;364H[1;359H6[10;114H2[60;364H[1;359H7[11;114H2[60;364H[1;359H8[60;364H[1;359H9[9;130H1[12;114H2[60;364H[1;356H3:01[60;364H[1;359H2[10;114H3[60;364H[1;359H3[11;114H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[9;130H2[12;114H3[60;364H[1;359H8[10;114H4[60;364H[1;359H9[11;114H4[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[9;130H3[12;114H4[60;364H[1;359H4[10;114H5[60;364H[1;359H5[11;114H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[9;130H4[12;114H5[60;364H[1;359H9[60;364H[1;358H21[10;114H6[11d6[60;364H[1;359H2[60;364H[1;359H3[5;80H7[5;103H5[6;80H1[6;111H69.8[7;80H1[7;111H92.9[8;80H5[8;111H69.8[9;78H1 / 1x4  [9;101H2.9[111G46.5/0  [60;364H[1;359H4[9;130H5[12;114H6[60;364H[1;359H5[60;364H[1;359H6[10;114H7[60;364H[1;359H8[11;114H7[60;364H[1;359H9[60;364H[1;358H30[9;130H6[12;114H7[60;364H[1;359H1[60;364H[1;359H2[10;114H8[60;364H[1;359H3[11;114H8[60;364H[1;359H5[60;364H[1;359H6[9;130H7[12;114H8[60;364H[1;359H7[60;364H[1;359H8[10;114H9[60;364H[1;359H9[11;114H9[60;364H[1;358H41[60;364H[1;359H2[9;130H8[12;114H9[60;364H[1;359H3[60;364H[1;359H4[10;112H4.0[60;364H[1;359H5[11;112H4.0[60;364H[1;359H7[60;364H[1;359H8[9;130H9[12;112H4.0[60;364H[1;359H9[60;364H[1;358H50[10;114H1[11d1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[9;128H8.0[12;114H1[60;364H[1;359H6[10;114H2[60;364H[1;359H7[11;114H2[60;364H[1;359H8[60;364H[1;356H4:00[9;130H1[12;114H2[60;364H[1;359H1[60;364H[1;359H2[10;114H3[60;364H[1;359H3[11;114H3[60;364H[1;359H5[60;364H[1;359H6[9;130H2[12;114H3[60;364H[1;359H7[60;364H[1;359H9[10;114H4[11d4[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[9;130H3[12;114H4[60;364H[1;359H4[10;114H5[60;364H[1;359H5[11;114H5[60;364H[1;359H6[60;364H[1;359H8[9;130H4[12;114H5[60;364H[1;359H9[60;364H[1;358H20[10;114H6[11d6[60;364H[1;359H2[60;364H[1;359H3[5;80H4[5;111H93.0[6;80H2[7d7[7;111H34[8;80H4[8;111H92.9[60;364H[1;359H4[9;130H5[12;114H6[60;364H[1;359H6[10;114H7[60;364H[1;359H7[11;114H7[60;364H[1;359H8[60;364H[1;358H30[9;130H6[12;114H7[60;364H[1;359H1[60;364H[1;359H2[10;114H8[60;364H[1;359H3[11;114H8[60;364H[1;359H5[60;364H[1;359H6[9;130H7[12;114H8[60;364H[1;359H7[60;364H[1;359H9[10;114H9[11d9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[9;130H8[12;114H9[60;364H[1;359H4[10;112H5.0[60;364H[1;359H5[11;112H5.0[60;364H[1;359H6[60;364H[1;359H8[9;130H9[12;112H5.0[60;364H[1;359H9[60;364H[1;358H50[10;114H1[60;364H[1;359H1[11;114H1[60;364H[1;359H3[60;364H[1;359H4[9;128H9.0[12;114H1[14;73H[14;83H═╤[14;97H═╕[15;78H      │ GPULONG     │[16;73H[16;83H═╪[16;97H═╡[17;74H104 / 448 │ 0 / 5 nodes │[18;73H[18;83H═╧[18;97H═╛[60;364H[1;359H5[60;364H[1;359H6[10;114H2[60;364H[1;359H7[11;114H2[14;73H[1P[15;78H[1P[16;73H[1P[17d 9[1P[18d[1P[60;364H[1;359H8[60;364H[1;359H9[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;356H5:01[9;130H1[12;114H2[60;364H[1;359H2[10;114H3[60;364H[1;359H3[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;114H3[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[9;130H2[12;114H3[60;364H[1;359H8[10;114H4[60;364H[1;359H9[11;114H4[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[9;130H3[12;114H4[60;364H[1;359H4[10;114H5[60;364H[1;359H5[11;114H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[9;130H4[12;114H5[60;364H[1;359H9[60;364H[1;358H21[10;114H6[11d6[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[5;80H9[5;111H23.3[6;78H0.9[6;111H232.6/0[8;80H9[8;111H46.5[9;111H58.1[9;130H5[12;114H6[60;364H[1;359H5[60;364H[1;359H6[10;114H7[60;364H[1;359H8[11;114H7[60;364H[1;359H9[60;364H[1;358H30[9;130H6[12;114H7[60;364H[1;359H1[60;364H[1;359H2[10;114H8[60;364H[1;359H3[11;114H8[60;364H[1;359H5[60;364H[1;359H6[9;130H7[12;114H8[60;364H[1;359H7[60;364H[1;359H8[10;114H9[14;73H[14;83H═╤[14;97H═╕[15;78H      │ GPULONG     │[16;73H[16;83H═╪[16;97H═╡[17;74H104 / 448 │ 0 / 5 nodes │[18;73H[18;83H═╧[18;97H═╛[60;364H[1;359H9[11;114H9[60;364H[1;358H41[14;73H[1P[15;78H[1P[16;73H[1P[17d 9[1P[18d[1P[60;364H[1;359H2[9;130H8[12;114H9[60;364H[1;359H3[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H4[10;112H6.0[14;73H[14;83H═╤[14;97H═╕[15;78H      │ GPULONG     │[16;73H[16;83H═╪[16;97H═╡[17;74H104 / 448 │ 0 / 5 nodes │[18;73H[18;83H═╧[18;97H═╛[60;364H[1;359H5[11;112H6.0[60;364H[1;359H6[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[14;73H[1P[15;78H[1P[16;73H[1P[17d 9[1P[18d[1P[60;364H[1;359H8[9;130H9[12;112H6.0[60;364H[1;359H9[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;358H50[10;114H1[60;364H[1;359H1[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;114H1[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[9;128H10.0 mins[12;114H1[60;364H[1;359H6[10;114H2[60;364H[1;359H7[11;114H2[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H6:00[9;131H1[12;114H2[60;364H[1;359H1[60;364H[1;359H3[10;114H3[11d3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[9;131H2[12;114H3[60;364H[1;359H7[60;364H[1;359H8[10;114H4[60;364H[1;358H10[11;114H4[60;364H[1;359H1[60;364H[1;359H2[9;131H3[12;114H4[60;364H[1;359H3[60;364H[1;359H4[10;114H5[60;364H[1;359H5[11;114H5[60;364H[1;359H7[60;364H[1;359H8[9;131H4[12;114H5[60;364H[1;359H9[60;364H[1;358H20[10;114H6[60;364H[1;359H1[11;114H6[60;364H[1;359H2[60;364H[1;359H4[9;131H5[12;114H6[60;364H[1;359H5[60;364H[1;359H6[5;111H34.7[6;101H8.0[111G5510.6/1.5[7;111H46.5[9;111H46.5[10d7[60;364H[1;359H7[11;114H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H31[9;131H6[12;114H7[60;364H[1;359H2[10;114H8[60;364H[1;359H3[11;114H8[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[9;131H7[12;114H8[60;364H[1;359H8[10;114H9[60;364H[1;359H9[11;114H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[9;131H8[12;114H9[60;364H[1;359H4[10;112H7.0[60;364H[1;359H5[11;112H7.0[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[9;131H9[12;112H7.0[60;364H[1;359H9[60;364H[1;358H51[10;114H1[11d1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[9;129H1.0[12;114H1[60;364H[1;359H5[60;364H[1;359H6[10;114H2[60;364H[1;359H7[11;114H2[14;73H[14;83H═╤[14;97H═╕[15;78H      │ GPULONG     │[16;73H[16;83H═╪[16;97H═╡[17;74H104 / 448 │ 0 / 5 nodes │[18;73H[18;83H═╧[18;97H═╛[60;364H[1;359H9[60;364H[1;356H7:00[9;131H1[12;114H2[14;73H[1P[15;78H[1P[16;73H[1P[17d 9[1P[18d[1P[60;364H[1;359H1[60;364H[1;359H2[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;114H3[10;137H[K[11;146H[K[12d[K[60;364H[1;359H3[11;114H3[60;364H[1;359H5[60;364H[1;359H6[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;131H2[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;114H3[12;146H[ 0 of 8 ] cores free[14;73H[14;83H═╤[14;97H═╕[15;78H      │ GPULONG     │[16;73H[16;83H═╪[16;97H═╡[17;74H104 / 448 │ 0 / 5 nodes │[18;73H[18;83H═╧[18;97H═╛[60;364H[1;359H7[60;364H[1;359H8[10;114H4[60;364H[1;359H9[11;114H4[14;73H[1P[15;78H[1P[16;73H[1P[17d 9[1P[18d[1P[60;364H[1;358H10[60;364H[1;359H2[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9;131H3[9;155H[12P[10;146H[K[11d[K[12;114H4[12;137H[K[60;364H[1;359H3[60;364H[1;359H4[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;114H5[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H5[11;114H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[9;131H4[12;114H5[60;364H[1;358H20[10;114H6[60;364H[1;359H1[11;114H6[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[9;131H5[12;114H6[60;364H[1;359H6[10;114H7[60;364H[1;359H7[5;111H23.3[6;78H2.0[6;101H3.9[6;112H8.1/0    [7;111H34.9[9;78H0.8 / 1x4[9;111H104.7/0[11;114H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[9;131H6[12;114H7[60;364H[1;359H1[60;364H[1;359H3[10;114H8[11d8[60;364H[1;359H4[60;364H[1;359H5[9;131H7[12;114H8[60;364H[1;359H7[10;114H9[60;364H[1;359H9[11;114H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H3[9;131H8[12;114H9[60;364H[1;359H4[10;112H8.0[60;364H[1;359H5[11;112H8.0[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[9;131H9[12;112H8.0[60;364H[1;358H50[10;114H1[60;364H[1;359H1[11;114H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[9;129H2.0[12;114H1[60;364H[1;359H5[60;364H[1;359H7[10;114H2[11d2[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H8:00[9;131H1[12;114H2[60;364H[1;359H1[60;364H[1;359H2[10;114H3[60;364H[1;359H4[11;114H3[60;364H[1;359H5[60;364H[1;359H6[9;131H2[12;114H3[60;364H[1;359H7[60;364H[1;359H8[10;114H4[60;364H[1;359H9[11;114H4[60;364H[1;358H11[60;364H[1;359H2[9;131H3[12;114H4[60;364H[1;359H3[60;364H[1;359H4[10;114H5[60;364H[1;359H5[11;114H5[60;364H[1;359H6[60;364H[1;359H8[9;131H4[12;114H5[60;364H[1;359H9[60;364H[1;358H20[10;114H6[60;364H[1;359H1[11;114H6[60;364H[1;359H2[60;364H[1;359H4[9;131H5[12;114H6[60;364H[1;359H5[60;364H[1;359H6[10;114H7[60;364H[1;359H7[11;114H7[60;364H[1;359H8[6;80H1[6;111H69.8[8;80H8[9d9[9;111H81.3/0 [60;364H[1;359H9[60;364H[1;358H31[9;131H6[12;114H7[60;364H[1;359H2[10;114H8[60;364H[1;359H3[11;114H8[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[9;131H7[12;114H8[60;364H[1;359H8[10;114H9[60;364H[1;359H9[11;114H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[9;131H8[12;114H9[60;364H[1;359H3[60;364H[1;359H5[10;112H9.0[11;112H9.0[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[9;131H9[12;112H9.0[60;364H[1;359H9[60;364H[1;358H50[10;114H1[60;364H[1;359H2[11;114H1[60;364H[1;359H3[60;364H[1;359H4[9;129H3.0[12;114H1[60;364H[1;359H5[60;364H[1;359H6[10;114H2[60;364H[1;359H7[11;114H2[60;364H[1;359H9[60;364H[1;356H9:00[9;131H1[12;114H2[60;364H[1;359H1[60;364H[1;359H2[10;114H3[60;364H[1;359H3[11;114H3[60;364H[1;359H4[60;364H[1;359H6[9;131H2[12;114H3[60;364H[1;359H7[60;364H[1;359H8[10;114H4[60;364H[1;359H9[11;114H4[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H3[9;131H3[12;114H4[60;364H[1;359H4[10;114H5[60;364H[1;359H5[11;114H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[9;131H4[12;114H5[60;364H[1;358H20[10;114H6[60;364H[1;359H1[11;114H6[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[9;131H5[12;114H6[60;364H[1;359H5[10;114H7[60;364H[1;359H7[11;114H7[60;364H[1;359H8[60;364H[1;359H9[5;111H34.9[6;80H0[6;111H58.1[7;80H3[7;111H69.8[8;80H3[8;111H81.4[9;78H1 / 1x4  [9;111H46.5[60;364H[1;358H30[9;131H6[12;114H7[60;364H[1;359H1[60;364H[1;359H3[10;114H8[11d8[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[9;131H7[12;114H8[60;364H[1;359H7[60;364H[1;359H8[10;114H9[60;364H[1;358H40[11;114H9[60;364H[1;359H1[60;364H[1;359H2[9;131H8[12;114H9[60;364H[1;359H3[60;364H[1;359H4[10;111H20.0[60;364H[1;359H5[11;111H20.0[60;364H[1;359H6[60;364H[1;359H8[9;131H9[10;111H0.3 hrs  [11;111H0.3 hrs  [12;111H20.0[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[12;111H0.3 hrs  [60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[9;129H4.0[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[14;73H[14;83H═╤[14;97H═╕[15;78H      │ GPULONG     │[16;73H[16;83H═╪[16;97H═╡[17;74H104 / 448 │ 0 / 5 nodes │[18;73H[18;83H═╧[18;97H═╛[60;364H[1;355H40:00[9;131H1[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[17;75H1[60;364H[1;359H5[60;364H[1;359H6[9;131H2[60;364H[1;359H7[17;75H0[60;364H[1;359H8[60;364H[1;359H9[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;358H11[60;364H[1;359H2[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;131H3[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[9;131H4[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[9;131H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[5;111H23.3[6;78H1.2[6;111H139.4/0[7;111H92.9[8;80H4[8;114H3[60;364H[1;358H30[9;131H6[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[9;131H7[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[9;131H8[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[10;113H4[60;364H[1;359H8[9;131H9[11;113H4[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H2[12;113H4[60;364H[1;359H3[60;364H[1;359H4[9;129H5.0[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;356H1:00[9;131H1[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[9;131H2[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H2[9;131H3[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[9;131H4[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[9;131H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[5;111H34.9[6;78H2.1[6;111H69.8/0 [7;80H7[7;111H34[8;80H9[8;111H46.5[9;131H6[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[17;75H1[60;364H[1;359H6[9;131H7[60;364H[1;359H8[17;75H0[60;364H[1;359H9[60;364H[1;358H40[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H1[60;364H[1;359H2[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;131H8[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[9;131H9[60;364H[1;359H9[60;364H[1;358H51[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[9;129H6.0[60;364H[1;359H5[17;75H1[60;364H[1;359H6[60;364H[1;359H8[17;75H0[60;364H[1;359H9[60;364H[1;356H2:00[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9;131H1[9;155H[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H1[60;364H[1;359H2[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[9;131H2[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H11[60;364H[1;359H2[9;131H3[60;364H[1;359H3[17;75H1[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[17;75H0[60;364H[1;359H8[9;131H4[60;364H[1;359H9[60;364H[1;358H20[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H1[17;75H1[60;364H[1;359H2[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H3[17;75H0[60;364H[1;359H5[9;131H5[60;364H[1;359H6[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H7[60;364H[1;359H8[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H9[60;364H[1;358H30[9;131H6[60;364H[1;359H2[5;80H8[7;111H46.5[9;78H0.9 / 1x4[9;111H81.4[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[9;131H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[9;131H8[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[9;131H9[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[9;129H7.0[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;356H3:00[9;131H1[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[9;131H2[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[9;131H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[9;131H4[60;364H[1;359H9[60;364H[1;358H21[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[9;131H5[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[9;131H6[60;364H[1;359H1[60;364H[1;359H2[5;80H2[5;111H104.7/0[6;111H58.1[7;111H34.9[8;80H8[9d7[9;111H104.5/0[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[9;131H7[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H2[9;131H8[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[9;131H9[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[9;129H8.0[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H4:00[9;131H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[9;131H2[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[9;131H3[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[9;131H4[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[9;131H5[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H30[9;131H6[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[5;80H9[5;111H23.3/0 [6;78H1.4[6;111H139.6/0[8;80H9[9;78H1 / 1x4  [9;111H46.5/0 [60;364H[1;359H5[60;364H[1;359H6[9;131H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[9;131H8[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[9;131H9[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[9;129H9.0[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;356H5:00[9;131H1[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[9;131H2[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[9;131H3[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[9;131H4[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[9;131H5[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[9;131H6[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[5;111H34.7[6;78H2.1[6;111H69.6/0 [7;111H46.5[8;80H2[8;111H93.0[60;364H[1;359H6[9;131H7[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H41[60;364H[1;359H2[9;131H8[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[9;131H9[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[9;128H20.0[60;364H[1;359H6[60;364H[1;359H7[9;128H0.3 hrs  [60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H6:00[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H2[60;364H[1;359H3[17;75H1[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[17;75H0[60;364H[1;358H20[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H1[60;364H[1;359H4[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[5;111H23.3[6d8[7;80H2[7;111H93.0[8;80H6[8;111H69.6[9;111H58.1[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[10;113H5[60;364H[1;359H8[11;113H5[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[12;113H5[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[9;130H4[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H7:01[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[6;111H58.1[7;80H5[7;111H58[8;80H9[8;111H46.5[9;111H46.5[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H8:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H11[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[5;111H34.9[6;78H1.3[6;111H139.6/0[7;80H7[7;111H46.5[9;78H0.7 / 1x4[9;111H127.9/0[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H9:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H31[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[5;111H23.3[6;78H2.0[6;111H69.6/0 [7;111H34.9[8;80H8[9;78H1 / 1x4  [9;111H46.4/0 [60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;355H50:00[60;364H[1;359H1[17;75H1[60;364H[1;359H2[60;364H[1;359H3[17;75H0[60;364H[1;359H4[60;364H[1;359H5[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H7[60;364H[1;359H8[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[17;75H1[60;364H[1;359H9[17;75H0[60;364H[1;358H21[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H6[60;364H[1;359H8[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[5;111H34.9[6;80H1[6;111H58.1[8;80H9[9;111H58.1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H1:00[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[5;111H23.3[6;111H69.8[7;111H46.5[8;80H1[8;111H116.3/0[9;111H46.5[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;356H2:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[17;75H1[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[17;75H0[60;364H[1;359H9[17;75H1[60;364H[1;358H11[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H2[60;364H[1;359H4[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[17;75H0[60;364H[1;359H5[60;364H[1;359H6[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H8[60;364H[1;359H9[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[5;80H3[5;111H93.0[6;78H1.6[6;111H104.7/0[7;111H34.9[8;80H8[8;101H4.2[111G46.4/0 [60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[10;113H6[60;364H[1;359H8[11;113H6[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[12;113H6[60;364H[1;359H3[60;364H[1;359H4[17;75H1[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[9;130H5[17;75H0[60;364H[1;359H9[60;364H[1;356H3:01[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H40[60;364H[1;359H1[17;27H24[60;364H[1;359H2[60;364H[1;359H3[3;153H[12P[4;146H[12P[5;80H7[5;111H46.5[5;155H[12P[6;80H8[6;111H92.9/0 [6;155H[12P[7;79H / 1x4  [7;111H116.3/0[7;155H[12P[8;114H5[8;155H[12P[9;78H0.7 / 1x4[9;111H116.3/0[9;155H[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H4[60;364H[1;359H5[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H4:01[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H21[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[5;80H9[5;111H34.7[6;78H2.0[6;111H69.8[7;79H.6 / 1x4[7;111H46.4/0 [8;80H9[9d9[9;101H3.0[111G58.0/0 [60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;356H5:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[5;111H23.3[6;80H1[6;111H58.1[7;80H7[7;111H34.9[8;80H8[9;78H1 / 1x4  [9;114H1[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;356H6:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[6;78H1.8[6;111H81.4[9;111H46.5[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H7:00[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[5;111H34.9[6;80H5[6;111H127.8/0[8;79H / 1x8  [8;111H127.9/0[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H51[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[17;27H16[60;364H[1;356H8:00[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[17;75H1[60;364H[1;359H9[60;364H[1;358H21[17;75H0[60;364H[1;359H2[60;364H[1;359H3[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H4[60;364H[1;359H5[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[10;113H7[60;364H[1;359H8[5;111H23.3[6;78H2.1[6;111H58.1/0 [7;111H46.5[8;79H.9 / 1x8[8;111H46.4/0 [9;78H0.9 / 1x4[9;111H93.0[11d7[60;364H[1;359H9[60;364H[1;358H50[12;113H7[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[9;130H6[60;364H[1;359H9[60;364H[1;356H9:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H11[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[17;75H1[60;364H[1;359H9[5;111H34.9[6;111H69.8[7;111H34.9[8;111H34.9[9;80H8[9;112H2.9[60;364H[1;358H50[17;75H0[60;364H[1;359H2[60;364H[1;359H3[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H4[60;364H[1;359H5[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;353H1:00:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H11[60;364H[1;359H2[17;75H1[60;364H[1;359H3[17;75H0[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H8[60;364H[1;359H9[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;358H21[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[5;111H23.3[6;80H0[6;111H58.1[7;79H / 1x4  [7;103H4[111G116.3/0[8;111H46.5[9;78H1 / 1x4  [9;111H46.5[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;356H1:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H8[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[17;27H8 / 32 [60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H50[60;364H[1;359H1[5;80H5[5;111H69.8[6;78H1.4[6;111H151.0/0[7;79H.7 / 1x4[7;111H46.4/0 [60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;356H2:00[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H31[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H2[60;364H[1;359H3[5;80H4[6;78H2.1[6;111H69.8/0 [7;111H34.9[8;79H / 1x8  [8;111H127.9/0[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H3:01[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[17;75H1[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[17;75H0[60;364H[1;359H2[60;364H[1;359H3[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H4[60;364H[1;359H5[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H51[60;364H[1;359H2[60;364H[1;359H3[5;80H9[5;111H23.3[6;80H0[6;111H58.1[8;79H.9 / 1x8[8;111H46.4/0 [9;78H0.7 / 1x4[9;111H127.9/0[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[17;75H1[60;364H[1;359H8[60;364H[1;359H9[17;75H0[60;364H[1;356H4:00[60;364H[1;359H1[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H11[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H30[17;75H1[60;364H[1;359H1[60;364H[1;359H2[17;75H0[60;364H[1;359H3[60;364H[1;359H4[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[10;113H8[11d8[60;364H[1;358H50[60;364H[1;359H1[12;113H8[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[5;111H34.7[6;78H1.4[6;111H139.6/0[8;114H5[9;78H1 / 1x4  [9;111H46.4/0 [60;364H[1;359H6[60;364H[1;359H7[9;130H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H5:01[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[5;111H23.3[6;78H2.1[6;111H69.6/0 [7;80H6[7;111H46.5[9;78H0.9 / 1x4[9;111H58.1[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;356H6:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[5;111H34.9[6;111H58.1[7;80H1[7;111H116.3/0[8;80H8[8;111H34.9[9;78H1 / 1x4  [9;111H46.5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;356H7:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[17;75H1[60;364H[1;359H1[17;75H0[60;364H[1;359H2[60;364H[1;359H3[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[5;111H23.3[6;80H0[6;111H69.8[7;80H7[7;111H34.7/0 [8;80H7[8;111H58.1[60;364H[1;359H9[60;364H[1;356H8:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H51[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[5;111H34.9[6;78H1.4[6;111H127.9/0[7;114H9[8;80H1[8;111H116.3/0[9;78H0.7 / 1x4[9;111H116.3/0[60;364H[1;356H9:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;355H10:00[5;80H7[5;111H46.5[6;78H2.0[6;111H69.6/0 [7;111H46.5[8;80H8[8;111H46.4/0 [9;80H9[9;111H58.0/0 [60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[17;75H1[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[17;75H0[60;364H[1;359H2[60;364H[1;359H4[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H8[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[10;113H9[60;364H[1;359H8[11;113H9[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[12;113H9[17;75H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[17;75H0[60;364H[1;359H7[9;130H8[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H1:01[5;80H3[5;111H93.0[6;80H1[6;111H58.1[7;111H34.9[8;80H9[8;114H5[9d1[60;364H[1;359H2[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;356H2:00[60;364H[1;359H1[60;364H[1;359H2[5;80H9[5;111H23.3[6;80H0[6;101H4.2[8;80H8[9;78H1 / 1x4  [9;111H46.5[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[2d[L[1;359H5[3dSomething wrong:  Ran out of input[60;364H[3d[M[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[17;75H1[60;364H[1;358H31[60;364H[1;359H2[17;75H0[60;364H[1;359H3[60;364H[1;359H4[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H5[60;364H[1;359H6[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;356H3:00[60;364H[1;359H1[60;364H[1;359H2[5;111H34.7[6;78H1.4[6;111H139.6/0[7;80H4[7;111H69.8[8;80H9[8;111H34.9[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H21[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H51[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H4:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[5;111H23.3[6;80H9[6;111H69.6/0 [7;80H3[7;111H81.4[8;80H6[8;111H58.1[9;78H0.8 / 1x4[9;111H69.8[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H21[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H5:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[5;111H34.9[6;78H2.0[6;111H58.1[7;80H7[7;111H34.7[8;80H1[8;111H104.7/0[9;80H7[9;111H104.7/0[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H11[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H6:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[5;111H23.3[6;111H69.8[7d9[8;80H9[8;111H46.4/0 [9;78H1 / 1x4  [9;111H46.4/0 [60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[17;75H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H41[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[17;75H0[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H5[60;364H[1;359H6[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[14;73H[1P[15;78H[1P[16;73H[1P[17d 9[1P[18d[1P[60;364H[1;359H8[10;111H1.0[11;111H1.0[60;364H[1;359H9[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;358H50[60;364H[1;359H1[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;111H1.0[12;146H[ 0 of 8 ] cores free[14;73H[14;83H═╤[14;97H═╕[15;78H      │ GPULONG     │[16;73H[16;83H═╪[16;97H═╡[17;74H104 / 448 │ 0 / 5 nodes │[18;73H[18;83H═╧[18;97H═╛[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[14;73H[1P[15;78H[1P[16;73H[1P[17d 9[1P[18d[1P[60;364H[1;359H6[60;364H[1;359H7[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9;130H9[9;155H[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H8[60;364H[1;356H7:00[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[14;73H[14;83H═╤[14;97H═╕[15;78H      │ GPULONG     │[16;73H[16;83H═╪[16;97H═╡[17;74H104 / 448 │ 0 / 5 nodes │[18;73H[18;83H═╧[18;97H═╛[60;364H[1;359H6[14;73H[1P[15;78H[1P[16;73H[1P[17d 9[1P[18d[1P[60;364H[1;359H7[6;78H1.7[6;111H116.3/0[7;111H46.5[8d5[9d5[60;364H[1;359H8[60;364H[1;359H9[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;358H10[60;364H[1;359H1[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H21[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H8:01[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[5;111H34.9[6;111H92.9/0 [7;111H34.9[8;111H34.9[60;364H[1;359H9[60;364H[1;358H10[14;73H[14;83H═╤[14;97H═╕[15;78H      │ GPULONG     │[16;73H[16;83H═╪[16;97H═╡[17;74H104 / 448 │ 0 / 5 nodes │[18;73H[18;83H═╧[18;97H═╛[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[14;73H[1P[15;78H[1P[16;73H[1P[17d 9[1P[18d[1P[60;364H[1;359H9[60;364H[1;358H21[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H2[60;364H[1;359H4[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H31[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H41[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[14;73H[14;83H═╤[14;97H═╕[15;78H      │ GPULONG     │[16;73H[16;83H═╪[16;97H═╡[17;74H104 / 448 │ 0 / 5 nodes │[18;73H[18;83H═╧[18;97H═╛[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H9:00[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[5;111H23.3[6;78H2.0[6;111H58.1[8;111H46.5[9;111H58.1[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[14;73H[1P[15;78H[1P[16;73H[1P[17d 9[1P[18d[1P[60;364H[1;359H7[60;364H[1;359H8[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H9[60;364H[1;358H20[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H51[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;355H20:00[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[5;80H2[5;111H93.0[6;80H1[7d2[7;111H93.0[8;80H5[8;111H81.4[9;78H0.7 / 1x4[9;111H127.9/0[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H31[60;364H[1;359H2[60;364H[1;359H3[17;64H3[60;364H[1;359H4[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H5[60;364H[1;359H7[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;356H1:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[17;64H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[5;80H7[5;111H46.5[6;78H1.9[6;111H81.4[7;80H4[7;111H69.8[8;80H3[8;111H93.0[9;80H9[9;111H46.4/0 [60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H41[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;356H2:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[5;80H9[5;111H34.9[6;80H5[6;111H127.9/0[7;80H7[7;111H34.7[8;80H8[8;111H46.4[9;78H1 / 1x4  [9;114H5[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[17;74H48[60;364H[1;358H30[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H2[60;364H[1;359H3[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[10;113H1[11d1[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[12;113H1[60;364H[1;359H3[17;74H64[60;364H[1;359H4[17;74H48[60;364H[1;359H5[60;364H[1;359H7[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9;128H1.0[9;155H[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H8[60;364H[1;359H9[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;356H3:00[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[5;111H23.1[6;78H2.1[6;111H69.6/0 [7;111H46.5[8;80H9[8;114H5[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[17;74H64[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[17;74H48[60;364H[1;356H4:00[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[5;114H3[6;111H58.1[7;111H34.9[8;80H8[8;111H34.9[9;111H58.1[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H21[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H31[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[17;74H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H51[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H5:00[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[5;111H34.9[6;80H0[8d9[8;111H46.5[9;78H0.7 / 1x4[9;111H116.3/0[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[17;74H6[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[17;74H5[60;364H[1;359H1[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H6:00[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[5;111H23.3[6;78H1.3[6;111H151.2/0[7;111H46.5[8;80H4[8;111H93.0[9;80H9[9;111H58.1/0 [60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H31[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H7:01[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[5;111H34.9[6;78H2.0[6;111H58.0/0 [7;80H1[7;111H104.7/0[8;111H81.4[9;78H1 / 1x4  [9;111H46.4[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H31[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;356H8:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[5;111H23.3[6d1[7;80H5[7;111H46.5/0 [8;80H8[8;111H46[9d58.1[60;364H[1;359H9[60;364H[1;358H21[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[10;113H2[11d2[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[12;113H2[60;364H[1;359H3[17;74H6[60;364H[1;359H4[17;74H5[60;364H[1;359H5[60;364H[1;359H6[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H8[9;130H1[60;364H[1;359H9[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;356H9:00[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[17;38H79[60;364H[1;358H10[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;146H[K[11d[K[12d[K[60;364H[1;359H1[60;364H[1;359H2[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[5;80H5[5;111H69.8[6;111H69.8[7;80H7[7;111H34.7[8;111H34.9[9;111H46.5[60;364H[1;358H21[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H41[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;355H30:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[5;80H6[6;78H1.4[6;111H139.6/0[7;111H46.5[8;111H46.5[9;78H0.9 / 1x4[9;111H69.8[60;364H[1;358H21[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H1:01[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[5;80H9[5;111H23.3[6;78H2.0[6;111H69.6/0 [7;111H34.9[9;80H8[9;111H104.7/0[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H51[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;356H2:00[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H11[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[5;111H34.7[6;80H1[6;111H58.1[8;80H3[8;111H93.0[9;78H1 / 1x4  [9;111H58.0/0 [60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H3:01[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[5;111H23.3[6;111H69.8[7;111H46.5[8;80H5[8;111H81.4[9;111H46.5[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H51[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;356H4:00[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H11[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[5;111H34.9[6;78H1.4[6;111H139.6/0[7;79H / 1x4  [7;111H116.3/0[8;80H9[8;111H46[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[10;113H3[60;364H[1;359H8[11;113H3[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[12;113H3[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[9;130H2[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H5:00[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[5;111H23.3[6;78H2.0[6;111H69.6/0 [7;79H.7 / 1x4[7;111H34.9/0 [8;114H5[9;111H58.1[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;356H6:00[60;364H[1;359H1[60;364H[1;359H2[5;128H3.0[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[6;128H3.0[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[7;128H3.0[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[5;111H34.9[6;80H1[6;111H58.1[7;111H46.4[8;80H8[8;111H34.9[9;78H0.7 / 1x4[9;111H127.9/0[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[8;128H3.0[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;356H7:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[5;111H23.3[6;111H69.8[7;111H34.9[8;111H46.5[9;78H1 / 1x4  [9;111H46.4/0 [60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H8:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[5;80H6[5;111H58.1[6;78H1.5[6;111H139.6/0[8;80H1[8;111H116.3/0[9;111H58.1[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H41[60;364H[1;359H2[17;38H80[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H51[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H9:01[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H11[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[5;80H3[5;111H104.7/0[6;78H2.0[6;111H69.8/0 [7;111H46.5[8;80H7[8;111H58.1/0 [9;111H46.5[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H41[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;355H40:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H21[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[5;103H8[111G5382.7/8.9[6;80H1[6;111H58.0[7;80H6[8d9[8;111H46.4[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[10;113H4[60;364H[1;359H9[11;113H4[60;364H[1;358H50[60;364H[1;359H1[12;113H4[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[9;130H3[60;364H[1;359H9[60;364H[1;356H1:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H31[5;78H2.7[5;101H8.6[111G127.8/0   [6;111H69.8[7;80H1[7;111H116.3/0[8;114H5[9;78H0.7 / 1x4[9;111H139.6/0[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H41[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H2:00[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H2[60;364H[1;359H3[5;78H1.9[5;101H4.2[111G34.9/0 [6;78H1.6[6;111H127.9/0[7;80H7[7;111H34.9/0 [9;78H1 / 1x4  [9;111H46.5/0 [60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H3:01[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H21[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H2[60;364H[1;359H3[6;78H2.0[6;111H69.8/0 [7;114H7[8;80H8[9;114H4[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H4:01[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[3;153H[12P[4;146H[12P[5;155H[12P[6d[12P[7d[12P[8d[12P[9d[12P[10;16H2[10;137H[K[11;16H3[11;137H[K[12;16H4[12;137H[K[60;364H[1;358H20[17;63H6[60;364H[1;359H2[10;16H1[11d2[12d3[60;364H[1;359H3[60;364H[1;359H4[3;153H[17X[3;170HNodes List[4;146H[4;156H--[4;168H  ------------[5;155H[15X[5;170Hgpu01(8)[6;155H[15X[6;170Hgpu02(8)[7;155H[15X[7;170Hgpu03(4)[8;155H[15X[8;170Hgpu05(8)[9;155H[15X[9;170Hgpu04(4)[10;146H[ 0 of 8 ] cores free[11;146H[ 0 of 8 ] cores free[12;146H[ 0 of 8 ] cores free[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[6;80H1[6;114H6[7;111H46.5[8;79H / 1x8  [8;111H127.9/0[9;111H58.1[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H5:00[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[2d[L[1;359H3[3dSomething wrong:  Ran out of input[60;364H[3d[M[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[6;111H58.1[7;111H34.9[8;79H.9 / 1x8[8;111H34.9/0 [9;111H46.5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H6:01[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H31[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[6;78H1.6[6;111H127.9/0[8;111H46.4[9;78H0.8 / 1x4[9;111H116.3/0[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[10;113H5[11d5[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[12;113H5[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[9;130H4[60;364H[1;359H8[60;364H[1;356H7:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[6;80H9[6;111H93.0/0 [7;80H4[7;111H81.4[8;80H8[8;114H5[9;80H9[9;111H69.8/0 [60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H41[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H8:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[5;80H1[5;111H116.3/0[6;78H2.1[6;111H58[9;78H1 / 1x4  [9;111H46.4[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H9:01[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H40[5;80H9[5;111H34.7/0 [6;111H69.8[7;80H7[7;111H46[8;80H9[9;114H5[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;355H50:01[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H40[60;364H[1;359H1[5;114H9[6;78H1.7[6;111H116.3/0[7;111H34.9[8;80H1[8;111H127.9/0[9;111H58.1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H51[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H1:00[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H41[60;364H[1;359H2[6;80H9[6;111H93.0/0 [8;80H9[8;111H46.5/0 [9;78H0.9 / 1x4[9;111H93.0[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;356H2:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H11[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[6;78H2.1[6;111H58[7d46.5[8d4[9;80H8[9;111H81.4[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[10;113H6[60;364H[1;359H8[11;113H6[60;364H[1;359H9[60;364H[1;358H50[12;113H6[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[9;130H5[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H3:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H11[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[6;111H69.8[7;111H34.9[8;80H8[8;114H5[9;78H1 / 1x4  [9;111H58.0[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;356H4:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[6;78H1.7[6;111H116.3/0[7;80H2[7;111H104.7/0[9;111H46.5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H5:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[5;80H4[5;111H93.0[6;80H8[6;111H93.0/0 [7;80H6[7;111H58.1/0 [8;80H6[8;111H69.8[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H6:00[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[5;80H6[5;111H69.6[6;78H2.1[6;111H69.6[7;80H7[7;111H34.7[8;80H3[8;111H93.0[9;78H0.9 / 1x4[9;111H69.8[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;356H7:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H31[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[5;80H9[5;111H34.9[6;111H58.1[7;111H46.5[8;80H8[8;111H46.5[9;80H8[9;111H104.7/0[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H8:00[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[10;113H7[60;364H[1;359H8[6;78H1.8[6;111H116.3/0[7;111H34.9[8d4[9;78H1 / 1x4  [9;111H58.0/0 [11;113H7[60;364H[1;359H9[60;364H[1;358H51[12;113H7[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[9;130H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H9:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H11[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[2d[L[1;359H9[3dSomething wrong:  Ran out of input[60;364H[3d[M[1;358H41[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[6;80H7[6;111H93.0/0 [8;80H9[8;114H5[9;111H46.5[60;364H[1;358H50[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;353H2:00:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H11[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[6;78H2.1[6;111H69.6[7;111H46.5[8;80H8[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H1:00[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[6;114H8[7;78H0.9[7;111H139.6/0[8;80H6[8;111H81.4[9;78H0.7 / 1x4[9;111H127.9/0[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;356H2:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H21[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[5;80H8[5;111H46.5[6;78H1.7[6;111H116.3/0[7;101H6.6[111G5417.6/3.3[8;80H8[8;111H46[9;78H1 / 1x4  [9;111H46.5/0 [60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H3:01[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[5;80H3[5;111H104.7/0[6;78H2.1[6;111H58.0/0 [7;78H1.5[7;101H3.9[7;112H8.1/0    [8;114H5[9;111H58.0[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H4:00[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H21[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[10;113H8[60;364H[1;359H8[11;113H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[12;113H8[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[5;80H9[5;111H34.7/0 [6;111H69.8[7;80H6[7;111H69.8[9;111H46.5[60;364H[1;359H6[60;364H[1;359H7[9;130H7[60;364H[1;359H8[10;16H47)(gpulong)[11;16H48)(gpulong)[12;16H49)(gpulong)[60;364H[1;359H9[60;364H[1;356H5:01[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H31[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[5;114H9[6;78H1.9[6;111H93.0[7;80H2[7;111H139.6/0[8;111H34.9[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H6:00[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H51[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[6;80H6[6;111H116.3/0[7;80H6[7;111H69.6/0 [8;80H1[8;111H127.9/0[9;78H0.7 / 1x4[9;111H139.6/0[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H7:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H51[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[6;78H2.1[6;111H69.6/0 [7;114H8[8;80H8[8;111H46.5/0 [9;78H1 / 1x4  [9;111H46.5/0 [60;364H[1;359H9[60;364H[1;356H8:00[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H21[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[6;111H58.1[8d4[9;111H58.0[60;364H[1;356H9:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H11[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H41[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;355H10:00[5;80H3[5;111H104.7/0[6;80H0[6;111H81.4[7;80H2[7;111H151.0/0[8;114H5[9;111H46.5[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[10;113H9[60;364H[1;359H8[11;113H9[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[12;113H9[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[9;130H8[60;364H[1;359H8[60;364H[1;356H1:00[60;364H[1;359H1[5;80H8[5;111H58.0/0 [6;78H1.5[6;111H127.9/0[7;80H6[7;111H69.8/0 [8;80H9[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H31[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H2:01[60;364H[1;359H2[5;80H9[5;111H34.9[6;78H2.1[6;111H69.8/0 [8;80H8[9;78H0.7 / 1x4[9;111H127.9/0[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H51[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H3:00[60;364H[1;359H1[60;364H[1;359H3[6;114H6[8;79H / 1x8  [8;111H127.9/0[9;80H9[9;111H58.1/0 [60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H21[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;356H4:00[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[6;111H58.1[7;80H2[7;111H151.0/0[8;79H.8 / 1x8[8;111H46.5/0 [9;78H1 / 1x4  [9;111H46.4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H11[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H41[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H5:01[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[6;78H1.5[6;111H139.6/0[7;80H6[7;111H69.8/0 [8;114H4[9;111H58.1[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H30[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H50[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;356H6:00[60;364H[1;359H1[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[6;78H2.1[6;111H58.1/0 [8;111H34.9[9;111H46.5[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;358H10[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H20[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H31[60;364H[1;359H2[60;364H[1;359H3[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H8[60;364H[1;359H9[60;364H[1;358H40[60;364H[1;359H1[60;364H[1;359H2[60;364H[1;359H4[60;364H[1;359H5[60;364H[1;359H6[60;364H[1;359H7[10;111H2.0[60;364H[60;1H[?1049l[23;0;0t[?1l>[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m scancel 201398 201399 21[K01400 201402 
[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m q
  JobNum  Status             Name      Job Name                              Cores used/reserved    GB        IO (r/w mbps)    Runtime/Q time    Comment                 Nodes List
--------  -----------------  --------  ------------------------------------  ---------------------  --------  ---------------  ----------------  ----------------------  ------------
  201398  COMPLETING         exet4487  exet4487/testlaunch.sh Crab64080opt1  1x8                    3.0       34.9/0           3.0 days          nocomment               gpu01(8)
  201399  COMPLETING         exet4487  exet4487/testlaunch.sh Crab64080opt1  1x8                    3.0       58.1/0           3.0 days          nocomment               gpu02(8)
  201400  COMPLETING         exet4487  exet4487/testlaunch.sh Crab64080opt1  1x4                    3.0       69.8/0           3.0 days          nocomment               gpu03(4)
  201402  COMPLETING         exet4487  exet4487/testlaunch.sh Crab64080opt1  1x8                    3.0       34.9/0           3.0 days          nocomment               gpu05(8)
  203023  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt2  1 / 1x4                3.0 / 12  46.5/0           1.9 hrs           nocomment               gpu04(4)
  203019  Q (# 47)(gpulong)  exet4487  launchpad/testlaunch.sh.sh            1x8                    24.0      2.0 hrs          nocomment         [ 0 of 8 ] cores free
  203020  Q (# 48)(gpulong)  exet4487  launchpad/testlaunch.sh.sh            1x8                    24.0      2.0 hrs          nocomment         [ 0 of 8 ] cores free
  203025  Q (# 49)(gpulong)  exet4487  launchpad/testlaunch.sh.sh            1x8                    24.0      2.0 hrs          nocomment         [ 0 of 8 ] cores free

╒═══════════════════════╤══════════╤═════════════╤══════════╤══════════╤══════════╤═════════════╕
│ cores free in queue   │ NORMAL   │ BLACKHOLE   │ PLANET   │ CMB      │ BERG     │ GPULONG     │
╞═══════════════════════╪══════════╪═════════════╪══════════╪══════════╪══════════╪═════════════╡
│                       │ 8 / 32   │ 80 / 80     │ 23 / 96  │ 64 / 468 │ 58 / 448 │ 0 / 5 nodes │
╘═══════════════════════╧══════════╧═════════════╧══════════╧══════════╧══════════╧═════════════╛
You can use the command "n" ("n -t" for text-only) to list cores/GB availability on the compute nodes.
[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m ^C
[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m ^C
[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m ^C
[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m ^C
[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m scancel 2013[K[K3023 203109 203020 203025
[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m q
  JobNum  Status             Name      Job Name                              Cores used/reserved    GB        IO (r/w mbps)    Runtime/Q time    Comment     Nodes List
--------  -----------------  --------  ------------------------------------  ---------------------  --------  ---------------  ----------------  ----------  ------------
  203019  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt2  ?? / 1x8               ?? / 24    ??              0.4 mins          nocomment   gpu01(8)
  203020  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt2  ?? / 1x8               ?? / 24    ??              0.3 mins          nocomment   gpu02(8)
  203023  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt2  0.8 / 1x4              3.0 / 12  104.7/0          1.9 hrs           nocomment   gpu04(4)
  203025  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt2  ?? / 1x8               ?? / 24    ??              0.2 mins          nocomment   gpu05(8)

╒═══════════════════════╤══════════╤═════════════╤══════════╤══════════╤══════════╤═════════════╕
│ cores free in queue   │ NORMAL   │ BLACKHOLE   │ PLANET   │ CMB      │ BERG     │ GPULONG     │
╞═══════════════════════╪══════════╪═════════════╪══════════╪══════════╪══════════╪═════════════╡
│                       │ 8 / 32   │ 80 / 80     │ 23 / 96  │ 64 / 468 │ 58 / 448 │ 1 / 5 nodes │
╘═══════════════════════╧══════════╧═════════════╧══════════╧══════════╧══════════╧═════════════╛
You can use the command "n" ("n -t" for text-only) to list cores/GB availability on the compute nodes.
[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m q
  JobNum  Status             Name      Job Name                              Cores used/reserved    GB       IO (r/w mbps)    Runtime/Q time    Comment     Nodes List
--------  -----------------  --------  ------------------------------------  ---------------------  -------  ---------------  ----------------  ----------  ------------
  203019  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt2  ?? / 1x8               ?? / 24   ??              0.5 mins          nocomment   gpu01(8)
  203020  COMPLETING         exet4487  exet4487/testlaunch.sh Crab64080opt2  1x8                    3.0       ??              2.0 hrs           nocomment   gpu02(8)
  203023  COMPLETING         exet4487  exet4487/testlaunch.sh Crab64080opt2  1x4                    3.0      104.7/0          2.0 hrs           nocomment   gpu04(4)
  203025  COMPLETING         exet4487  exet4487/testlaunch.sh Crab64080opt2  1x8                    3.0       ??              2.0 hrs           nocomment   gpu05(8)

╒═══════════════════════╤══════════╤═════════════╤══════════╤══════════╤══════════╤═════════════╕
│ cores free in queue   │ NORMAL   │ BLACKHOLE   │ PLANET   │ CMB      │ BERG     │ GPULONG     │
╞═══════════════════════╪══════════╪═════════════╪══════════╪══════════╪══════════╪═════════════╡
│                       │ 8 / 32   │ 80 / 80     │ 23 / 96  │ 64 / 468 │ 58 / 448 │ 4 / 5 nodes │
╘═══════════════════════╧══════════╧═════════════╧══════════╧══════════╧══════════╧═════════════╛
You can use the command "n" ("n -t" for text-only) to list cores/GB availability on the compute nodes.
[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m sacncel 20319[K[K0190[K

Command 'sacncel' not found, did you mean:

  command 'scancel' from snap slurm (20.02.1)
  command 'scancel' from deb slurm-client

See 'snap info <snapname>' for additional versions.

[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m q
  JobNum  Status             Name      Job Name                              Cores used/reserved    GB       IO (r/w mbps)    Runtime/Q time    Comment     Nodes List
--------  -----------------  --------  ------------------------------------  ---------------------  -------  ---------------  ----------------  ----------  ------------
  203019  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt2  ?? / 1x8               ?? / 24   ??              0.6 mins          nocomment   gpu01(8)

╒═══════════════════════╤══════════╤═════════════╤══════════╤══════════╤══════════╤═════════════╕
│ cores free in queue   │ NORMAL   │ BLACKHOLE   │ PLANET   │ CMB      │ BERG     │ GPULONG     │
╞═══════════════════════╪══════════╪═════════════╪══════════╪══════════╪══════════╪═════════════╡
│                       │ 8 / 32   │ 80 / 80     │ 23 / 96  │ 64 / 468 │ 58 / 448 │ 4 / 5 nodes │
╘═══════════════════════╧══════════╧═════════════╧══════════╧══════════╧══════════╧═════════════╛
You can use the command "n" ("n -t" for text-only) to list cores/GB availability on the compute nodes.
[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m qsacncel 203019[1P[1P[1@c[1@a
[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m q
  JobNum  Status             Name      Job Name                              Cores used/reserved    GB       IO (r/w mbps)    Runtime/Q time    Comment     Nodes List
--------  -----------------  --------  ------------------------------------  ---------------------  -------  ---------------  ----------------  ----------  ------------
  203019  RUNNING (gpulong)  exet4487  exet4487/testlaunch.sh Crab64080opt2  ?? / 1x8               ?? / 24   ??              0.7 mins          nocomment   gpu01(8)

╒═══════════════════════╤══════════╤═════════════╤══════════╤══════════╤══════════╤═════════════╕
│ cores free in queue   │ NORMAL   │ BLACKHOLE   │ PLANET   │ CMB      │ BERG     │ GPULONG     │
╞═══════════════════════╪══════════╪═════════════╪══════════╪══════════╪══════════╪═════════════╡
│                       │ 8 / 32   │ 80 / 80     │ 23 / 96  │ 64 / 468 │ 58 / 448 │ 5 / 5 nodes │
╘═══════════════════════╧══════════╧═════════════╧══════════╧══════════╧══════════╧═════════════╛
You can use the command "n" ("n -t" for text-only) to list cores/GB availability on the compute nodes.
[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m q
JobNum    Status    Name    Job Name    Cores used/reserved    GB    IO (r/w mbps)    Runtime/Q time    Comment    Nodes List
--------  --------  ------  ----------  ---------------------  ----  ---------------  ----------------  ---------  ------------

╒═══════════════════════╤══════════╤═════════════╤══════════╤══════════╤══════════╤═════════════╕
│ cores free in queue   │ NORMAL   │ BLACKHOLE   │ PLANET   │ CMB      │ BERG     │ GPULONG     │
╞═══════════════════════╪══════════╪═════════════╪══════════╪══════════╪══════════╪═════════════╡
│                       │ 8 / 32   │ 80 / 80     │ 23 / 96  │ 64 / 468 │ 58 / 448 │ 5 / 5 nodes │
╘═══════════════════════╧══════════╧═════════════╧══════════╧══════════╧══════════╧═════════════╛
You can use the command "n" ("n -t" for text-only) to list cores/GB availability on the compute nodes.
[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m killall screen
[1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m emacs hypertrain.py 
[?1049h[22;0;0t[?12;25h[?1h=[H[2J[99d[K[?1l>[?12l[?25h[?1049l[23;0;0t[39;49m[?1049h[22;0;0t[?12;25h[?1h=[H[2J[98d[?25l[30m[47m-UUU:----F1  [39;49m[1m[30m[47m*scratch*   [0m[39;49m[30m[47m   All L1     (Fundamental) ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------[39;49m
[A[2d[?12l[?25h[?12;25h[99d[?25lLoading 00debian-vars...done[K[H
[?12l[?25h[?12;25h[99;9H[?25l/etc/emacs/site-start.d/50a2ps.el (source)...[H
[?12l[?25h[?12;25h[99;54H[?25ldone[H
[?12l[?25h[?12;25h[99;36H[?25lsymptote.el (source)...[H
[?12l[?25h[?12;25h[99;59H[?25ldone[H
[?12l[?25h[?12;25h[99;36H[?25lutoconf.el (source)...[K[H
[?12l[?25h[?12;25h[99;58H[?25ldone[H
[?12l[?25h[?12;25h[99;35H[?25lcmake-data.el (source)...[K[H
[?12l[?25h[?12;25h[99;60H[?25ldone[H
[?12l[?25h[?12;25h[99;35H[?25ldictionaries-common.el (source)...[H
[?12l[?25h[?12;25h[99;9H[?25ldebian-ispell...[K[H
[?12l[?25h[?12;25h[99;9H[?25l/var/cache/dictionaries-common/emacsen-ispell-default.el (source)...[H
[?12l[?25h[?12;25h[99;77H[?25ldone[H
[?12l[?25h[?12;25h[99;9H[?25ldebian-ispell...done[K[H
[?12l[?25h[?12;25h[99;9H[?25l/var/cache/dictionaries-common/emacsen-ispell-dicts.el (source)...[H
[?12l[?25h[?12;25h[99;75H[?25ldone[H
[?12l[?25h[?12;25h[99;10H[?25letc/emacs/site-start.d/50dictionaries-common[6P[H
[?12l[?25h[?12;25h[99;35H[?25llatex-cjk-common.el (source)...[K[H
[?12l[?25h[?12;25h[99;9H[?25lcjk-enc...[K[H
[?12l[?25h[?12;25h[99;19H[?25ldone[H
[?12l[?25h[?12;25h[99;9H[?25l/etc/emacs/site-start.d/50latex-cjk-common.el (source)...done[H
[?12l[?25h[?12;25h[99;45H[?25lthai.el (source)...[K[H
[?12l[?25h[?12;25h[99;64H[?25ldone[H
[?12l[?25h[?12;25h[99;35H[?25ltcsh.el (source)...[K[H
[?12l[?25h[?12;25h[99;54H[?25ldone[H
[?12l[?25h[?12;25h[99;36H[?25lexlive-lang-english.el (source)...[H
[?12l[?25h[?12;25h[99;70H[?25ldone[H
[?12l[?25h[?12;25h[99;35H[?25lyorick-auto.el (source)...[K[H
[?12l[?25h[?12;25h[99;61H[?25ldone[H
[?12l[?25h[?12;25h[99d[?25lFor information about GNU Emacs and the GNU system, type C-h C-a.[H
[?12l[?25h[?12;25h[99d[?25lFor information about GNU Emacs and the GNU system, type C-h C-a.[K[H[7mFile Edit Options Buffers Tools Python Help                                                                                                                                                                                                                                                                                                                [0m[39;49m[27m
[A
[33m'''Uses Keras to train and test a 2dconvlstm on parameterized VERITAS data.                                                                                                                                                                                                                                                                                [39;49m
[A
[33mWritten by S.T. Spencer 27/6/2019'''[39;49m[K
[36mimport[39;49m os[K
[36mimport[39;49m matplotlib [36mas[39;49m mpl[K
mpl.use([33m'Agg'[39;49m)[K
[36mimport[39;49m numpy [36mas[39;49m np[K
[36mimport[39;49m h5py[K
[36mimport[39;49m keras[K
[36mimport[39;49m tempfile[K
[36mimport[39;49m sys[K
[36mimport[39;49m tensorflow [36mas[39;49m tf[K
tf.compat.v1.disable_eager_execution()[K
[36mfrom[39;49m tensorflow.compat.v1 [36mimport[39;49m ConfigProto[K
[36mfrom[39;49m tensorflow.compat.v1 [36mimport[39;49m Session[K
[K
[36mfrom[39;49m keras.utils [36mimport[39;49m HDF5Matrix[K
[36mfrom[39;49m keras.models [36mimport[39;49m Sequential[K
[36mfrom[39;49m keras.layers [36mimport[39;49m Conv2D, MaxPooling2D, Dense, Flatten, Dropout, Conv2D, ConvLSTM2D, MaxPooling2D, BatchNormalization, Conv3D, GlobalAveragePooling3D[K
[36mfrom[39;49m keras.layers.normalization [36mimport[39;49m BatchNormalization[K
[36mfrom[39;49m keras.layers.convolutional [36mimport[39;49m AveragePooling2D[K
[36mfrom[39;49m keras.layers.core [36mimport[39;49m Activation[K
[36mfrom[39;49m keras.layers.core [36mimport[39;49m Dropout[K
[36mfrom[39;49m keras.layers [36mimport[39;49m Input, GaussianNoise[K
[36mfrom[39;49m keras.models [36mimport[39;49m Model[K
[36mfrom[39;49m keras.layers [36mimport[39;49m concatenate[K
[36mimport[39;49m tensorflow.python.keras.backend [36mas[39;49m K[K
[36mfrom[39;49m keras.utils [36mimport[39;49m plot_model[K
[36mimport[39;49m matplotlib.pyplot [36mas[39;49m plt[K
[36mimport[39;49m glob[K
[36mfrom[39;49m sklearn.preprocessing [36mimport[39;49m StandardScaler[K
[36mfrom[39;49m keras.callbacks [36mimport[39;49m EarlyStopping[K
[36mfrom[39;49m keras [36mimport[39;49m regularizers[K
[36mfrom[39;49m mpl_toolkits.axes_grid1 [36mimport[39;49m make_axes_locatable[K
[36mimport[39;49m numpy.ma [36mas[39;49m ma[K
[36mfrom[39;49m matplotlib.pyplot [36mimport[39;49m cm[K
[36mfrom[39;49m sklearn.preprocessing [36mimport[39;49m scale[K
[36mfrom[39;49m mpl_toolkits.axes_grid1 [36mimport[39;49m make_axes_locatable[K
[36mimport[39;49m numpy.ma [36mas[39;49m ma[K
[36mfrom[39;49m matplotlib.pyplot [36mimport[39;49m cm[K
[36mfrom[39;49m mlxtend.evaluate [36mimport[39;49m confusion_matrix[K
[36mfrom[39;49m mlxtend.plotting [36mimport[39;49m plot_confusion_matrix[K
[36mfrom[39;49m keras.metrics [36mimport[39;49m binary_accuracy[K
[36mfrom[39;49m sklearn.metrics [36mimport[39;49m roc_curve, auc[K
[K
[36mimport[39;49m hyperas[K
[36mfrom[39;49m hyperas [36mimport[39;49m optim[K
[36mfrom[39;49m hyperas.distributions [36mimport[39;49m choice, uniform[K
[36mfrom[39;49m hyperopt [36mimport[39;49m Trials, STATUS_OK, tpe, mongoexp[K
[36mimport[39;49m pickle[K
[36mimport[39;49m tempfile[K
[36mfrom[39;49m os [36mimport[39;49m path[K
plt.ioff()[K
[K
[31m# Finds all the hdf5 files in a given directory                                                                                                                                                                                                                                                                                                            [39;49m
[A
[36mglobal[39;49m onlyfiles[K
[33monlyfiles[39;49m = [36msorted[39;49m(glob.glob([33m'/mnt/extraspace/exet4487/Crab64080point/*.hdf5'[39;49m))[K
[33mrunname[39;49m = [36mstr[39;49m(sys.argv[1])[K
[33mhexmethod[39;49m=[33m'oversampling'[39;49m[K
[33mhomedir[39;49m=[33m'/users/exet4487/'[39;49m[K
[33mtrialsfile[39;49m=homedir+[33m'trials/'[39;49m+runname+[33m'.npy'[39;49m[K
[K
[31m# Define model architecture.                                                                                                                                                                                                                                                                                                                               [39;49m
[A
[36mif[39;49m hexmethod [36min[39;49m [[33m'axial_addressing'[39;49m,[33m'image_shifting'[39;49m]:[K
    [33minpshape[39;49m=([36mNone[39;49m,27,27,1)[K
[36melif[39;49m hexmethod [36min[39;49m [[33m'bicubic_interpolation'[39;49m,[33m'nearest_interpolation'[39;49m,[33m'oversampling'[39;49m,[33m'rebinning'[39;49m]:[K
    [33minpshape[39;49m=([36mNone[39;49m,54,54,1)[K
[36melse[39;49m:[K
    [36mprint[39;49m([33m'Invalid Hexmethod'[39;49m)[K
    [36mraise[39;49m [33mKeyboardInterrupt[39;49m[K
[K
[36mdef[39;49m [36mdata[39;49m():[K
    [36mdef[39;49m [36mhardcode_valid[39;49m():[K
        [33mhexmethod[39;49m=[33m'oversampling'[39;49m[K
        [33monlyfiles[39;49m = [36msorted[39;49m(glob.glob([33m'/mnt/extraspace/exet4487/Crab64080/*.hdf5'[39;49m))[K
        [33mbatch_size[39;49m=50[K
        [33m""" Generates training/test sequences on demand                                                                                                                                                                                                                                                                                                    [39;49m
[A
[33m        """[39;49m[K
[K
        [33mnofiles[39;49m = 0[K
        [33mi[39;49m = 0  [31m# No. events loaded in total                                                                                                                                                                                                                                                                                                                [39;49m
[A
        [33mfilelist[39;49m = onlyfiles[-10:][K
        [36mglobal[39;49m validevents[K
        [36mglobal[39;49m valid2[K
        [33mvalidevents[39;49m=[][K
        [33mvalid2[39;49m=[][K
        [36mfor[39;49m [36mfile[39;49m [36min[39;49m filelist:[K
            [33minputdata[39;49m = h5py.File([36mfile[39;49m, [33m'r'[39;49m)[K
            [33mvalidevents[39;49m = validevents + inputdata[[33m'isGamma'[39;49m][:].tolist()[K
            [33mvalid2[39;49m = valid2 + inputdata[[33m'id'[39;49m][:].tolist()[K
            inputdata.close()[K
[K
        [36mwhile[39;49m [36mTrue[39;49m:[K
            [36mfor[39;49m [36mfile[39;49m [36min[39;49m filelist:[K
                [36mtry[39;49m:[K
                    [33minputdata[39;49m = h5py.File([36mfile[39;49m, [33m'r'[39;49m)[K
                [36mexcept[39;49m [33mOSError[39;49m:[K
[30m[47m-UU-:----F1  [39;49m[1m[30m[47mhypertrain.py[0m[39;49m[30m[47m   Top L1    Git:master  (Python) -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------[39;49m
[A[2d[?12l[?25h[?12;25h[99d[K[98;35H[?25l[30m[47m2[39;49m[H

[?12l[?25h[?12;25h[98;35H[?25l[30m[47m3[39;49m[4;1H[?12l[?25h[?12;25h[98;35H[?25l[30m[47m4[39;49m[5;1H[?12l[?25h[?12;25h[98;35H[?25l[30m[47m5[39;49m[6;1H[?12l[?25h[?12;25h[98;35H[?25l[30m[47m6[39;49m[7;1H[?12l[?25h[?12;25h[98;35H[?25l[30m[47m7[39;49m[8;1H[?12l[?25h[?12;25h[98;35H[?25l[30m[47m8[39;49m[9;1H[?12l[?25h[?12;25h[98;35H[?25l[30m[47m9[39;49m[10;1H[?12l[?25h[?12;25h[98;35H[?25l[30m[47m10[39;49m[11;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m1[39;49m[12;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m2[39;49m[13;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m3[39;49m[14;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m4[39;49m[15;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m5[39;49m[16;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m6[39;49m[17;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m7[39;49m[18;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m8[39;49m[19;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m9[39;49m[20;1H[?12l[?25h[?12;25h[98;35H[?25l[30m[47m20[39;49m[21;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m1[39;49m[22;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m2[39;49m[23;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m3[39;49m[24;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m4[39;49m[25;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m5[39;49m[26;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m6[39;49m[27;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m7[39;49m[28;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m8[39;49m[29;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m9[39;49m[30;1H[?12l[?25h[?12;25h[98;35H[?25l[30m[47m30[39;49m[31;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m1[39;49m[32;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m2[39;49m[33;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m3[39;49m[34;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m4[39;49m[35;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m5[39;49m[36;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m6[39;49m[37;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m7[39;49m[38;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m8[39;49m[39;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m9[39;49m[40;1H[?12l[?25h[?12;25h[98;35H[?25l[30m[47m40[39;49m[41;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m1[39;49m[42;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m2[39;49m[43;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m3[39;49m[44;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m4[39;49m[45;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m5[39;49m[46;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m6[39;49m[47;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m7[39;49m[48;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m8[39;49m[49;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m9[39;49m[50;1H[?12l[?25h[?12;25h[98;35H[?25l[30m[47m50[39;49m[51;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m1[39;49m[52;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m2[39;49m[53;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m3[39;49m[54;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m4[39;49m[55;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m5[39;49m[56;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m6[39;49m[57;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m7[39;49m[58;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m8[39;49m[59;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m9[39;49m[60;1H[?12l[?25h[?12;25h[98;35H[?25l[30m[47m60[39;49m[61;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m1[39;49m[62;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m2[39;49m[63;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m3[39;49m[64;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m4[39;49m[65;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m5[39;49m[66;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m6[39;49m[67;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m7[39;49m[68;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m8[39;49m[69;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m9[39;49m[70;1H[?12l[?25h[?12;25h[98;35H[?25l[30m[47m70[39;49m[71;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m1[39;49m[72;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m2[39;49m[73;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m3[39;49m[74;1H[?12l[?25h[?12;25h[98;36H[?25l[30m[47m4[39;49m[75;1H[?12l[?25h[?12;25h[75;83H[?25l[1@[33mp[39;49m[98;6H[30m[47m**[39;49m[75;74H[?12l[?25h[?12;25h[?25l[1@[33mo[39;49m[?12l[?25h[?12;25h[?25l[1@[33mi[39;49m[?12l[?25h[?12;25h[?25l[1@[33mn[39;49m[?12l[?25h[?12;25h[?25l[1@[33mt[39;49m[?12l[?25h[?12;25h[99;1H[?25l[36mI-search: [39;49m[75;78H[?12l[?25h[?12;25h[98;59H[?25l[30m[47m Isearch) [39;49m[75;78H[?12l[?25h[?12;25h[99;11H[?25l6[?12l[?25h[?12;25h[75;78H[1;81r[51;1H[25M[1;97r[69;1H[22M[1;99r[2;1H[?25l            inputdata.close()[K
[K
        [36mwhile[39;49m [36mTrue[39;49m:
            [36mfor[39;49m [36mfile[39;49m [36min[39;49m filelist:
                [36mtry[39;49m:
                    [33minputdata[39;49m = h5py.File([36mfile[39;49m, [33m'r'[39;49m)
                [36mexcept[39;49m [33mOSError[39;49m:
                    [36mcontinue[39;49m
                [33mtrainarr[39;49m = np.asarray(inputdata[hexmethod][:, :, :, :])
                [33mlabelsarr[39;49m = np.asarray(inputdata[[33m'isGamma'[39;49m][:])
                [33midarr[39;49m = np.asarray(inputdata[[33m'id'[39;49m][:])
                [33mnofiles[39;49m = nofiles + 1[K
                inputdata.close()[K
                [33mnotrigs[39;49m=np.shape(trainarr)[0]

                [36mfor[39;49m x [36min[39;49m np.arange(np.shape(trainarr)[0]):
                    [33mchargevals[39;49m = []
                    [36mfor[39;49m y [36min[39;49m np.arange(4):[K
                        chargevals.append(np.[36msum[39;49m(trainarr[x,y,:,:]))
[K
                    [33mchargevals[39;49m = np.argsort(chargevals)
                    [33mchargevals[39;49m = np.flip(chargevals,axis=0) [31m#Flip to descending order.                                                                                                                                                                                                                                                                     [39;49m
                    [33mtrainarr[39;49m[x, :, :, :] = trainarr[x, chargevals, :, :]
                [33mtraining_sample_count[39;49m = [36mlen[39;49m(trainarr)
                [33mbatches[39;49m = [36mint[39;49m(training_sample_count / batch_size)
                [33mremainder_samples[39;49m = training_sample_count % batch_size
                [33mi[39;49m = i + 1000[K
                [33mcountarr[39;49m = np.arange(0, [36mlen[39;49m(labelsarr))
                [31m#trainarr = (trainarr-np.amin(trainarr,axis=0))/(np.amax(trainarr,axis=0)-np.amin(trainarr,axis=0))                                                                                                                                                                                                                                        [39;49m
                [36mif[39;49m remainder_samples:[K
                    [33mbatches[39;49m = batches + 1
                        [31m# generate batches of samples                                                                                                                                                                                                                                                                                                      [39;49m
                [36mfor[39;49m idx [36min[39;49m [36mlist[39;49m([36mrange[39;49m(0, batches)):[K
                    [36mif[39;49m idx == batches - 1:
                        [33mbatch_idxs[39;49m = countarr[idx * batch_size:]
                    [36melse[39;49m:[K
                        [33mbatch_idxs[39;49m = countarr[idx *[K
                                              batch_size:idx *
                                              batch_size +
                                              batch_size]
                    [33mX[39;49m = trainarr[batch_idxs][K
                    [33mX[39;49m = np.nan_to_num(X)[K
                    [33mY[39;49m = keras.utils.to_categorical(
			labelsarr[batch_idxs], num_classes=2)
                    [36myield[39;49m (np.array(X), np.array(Y))
[K
    [36mdef[39;49m [36mhardcode_train[39;49m():[K
        [33mhexmethod[39;49m=[33m'oversampling'[39;49m[K
        [33monlyfiles[39;49m = [36msorted[39;49m(glob.glob([33m'/mnt/extraspace/exet4487/Crab[39;49m[31m[45m6[39;49m[33m4080/*.hdf5'[39;49m))[57;1H        [36mglobal[39;49m trainevents[K
        [36mglobal[39;49m train2[K
        [33mtrainevents[39;49m=[][K
        [33mtrain2[39;49m=[][K
        [33mfilelist[39;49m = onlyfiles[:20][K
        [36mfor[39;49m [36mfile[39;49m [36min[39;49m filelist:[K
            [36mtry[39;49m:[K
                [33minputdata[39;49m = h5py.File([36mfile[39;49m, [33m'r'[39;49m)[K
            [36mexcept[39;49m [33mOSError[39;49m:[K
                [36mcontinue[39;49m[K
            [33mtrainevents[39;49m = trainevents + inputdata[[33m'isGamma'[39;49m][:].tolist()[K
            [33mtrain2[39;49m = train2 + inputdata[[33m'id'[39;49m][:].tolist()[K[76;1H                    [36mcontinue[39;49m[K
                [33mtrainarr[39;49m = np.asarray(inputdata[hexmethod][:, :, :, :])[K
                [33mlabelsarr[39;49m = np.asarray(inputdata[[33m'isGamma'[39;49m][:])[K
                [33midarr[39;49m = np.asarray(inputdata[[33m'id'[39;49m][:])[K
                [33mnofiles[39;49m = nofiles + 1[K
                inputdata.close()[K
                [33mnotrigs[39;49m=np.shape(trainarr)[0][K
[K
                [36mfor[39;49m x [36min[39;49m np.arange(np.shape(trainarr)[0]):[K
                    [33mchargevals[39;49m = [][K
                    [36mfor[39;49m y [36min[39;49m np.arange(4):[K
                        chargevals.append(np.[36msum[39;49m(trainarr[x,y,:,:]))[K
[K
                    [33mchargevals[39;49m = np.argsort(chargevals)[K
                    [33mchargevals[39;49m = np.flip(chargevals,axis=0) [31m#Flip to descending order.                                                                                                                                                                                                                                                                     [39;49m
[A
                    [33mtrainarr[39;49m[x, :, :, :] = trainarr[x, chargevals, :, :][K
[K
                [33mtraining_sample_count[39;49m = [36mlen[39;49m(trainarr)[K
                [33mbatches[39;49m = [36mint[39;49m(training_sample_count / batch_size)[K
                [33mremainder_samples[39;49m = training_sample_count % batch_size[K
                [33mi[39;49m = i + 1000[K
                [33mcountarr[39;49m = np.arange(0, [36mlen[39;49m(labelsarr))[K[98;30H[30m[47m23% L138[39;49m[50;69H[?12l[?25h[?12;25h[99;12H[?25l4[?12l[?25h[?12;25h[50;69H[?25l[31m[45m4[39;49m[?12l[?25h[?12;25h[99;13H[?25l0[?12l[?25h[?12;25h[50;70H[?25l[31m[45m0[39;49m[?12l[?25h[?12;25h[99;14H[?25l8[?12l[?25h[?12;25h[50;71H[?25l[31m[45m8[39;49m[?12l[?25h[?12;25h[99;15H[?25l0[?12l[?25h[?12;25h[50;72H[?25l[31m[45m0[39;49m[?12l[?25h[?12;25h[99;1H[?25lMark saved where search started[50;73H[?12l[?25h[?12;25h[?25l[33m64080[39;49m[98;59H[30m[47m) --------[39;49m[50;74H[?12l[?25h[?12;25h[99;1H[K[50;73H[?25l[1@[33mp[39;49m[?12l[?25h[?12;25h[?25l[1@[33mo[39;49m[?12l[?25h[?12;25h[?25l[1@[33mi[39;49m[?12l[?25h[?12;25h[?25l[1@[33mn[39;49m[?12l[?25h[?12;25h[?25l[1@[33mt[39;49m[?12l[?25h[?12;25h[99;1H[?25l[36mI-search: [39;49m[50;78H[?12l[?25h[?12;25h[98;59H[?25l[30m[47m Isearch) [39;49m[50;78H[?12l[?25h[?12;25h[99;11H[?25l6[?12l[?25h[?12;25h[50;78H[1;24r[2;1H[12M[1;29r[14;1H[11M[1;46r[25;1H[9M[1;99r[13;1H[K[19d[K
[?25l                [31m#            trainarr = (trainarr-np.amin(trainarr,axis=0))/(np.amax(trainarr,axis=0)-np.amin(trainarr,axis=0))                                                                                                                                                                                                                            [39;49m
[A
                [36mif[39;49m remainder_samples:[K
                    [33mbatches[39;49m = batches + 1[K
[K
                [31m# generate batches of samples                                                                                                                                                                                                                                                                                                              [39;49m
[A[38d[K
[K
    [33mtrain_generator[39;49m=hardcode_train()[K
    [33mvalidation_generator[39;49m=hardcode_valid()[K
    [36mreturn[39;49m train_generator, validation_generator[K
[K
[36mdef[39;49m [36mcreate_model[39;49m(train_generator,validation_generator):[K
    [33minpshape[39;49m=([36mNone[39;49m,54,54,1)[K
    [33mstrategy[39;49m=tf.distribute.MirroredStrategy()[K[47;5H[36mprint[39;49m([33m'Number of devices: {}'[39;49m.[36mformat[39;49m(strategy.num_replicas_in_sync))[48;5H[36mwith[39;49m strategy.scope():
	[33mmodel[39;49m = Sequential()[K
	model.add(ConvLSTM2D(filters={{choice([10,20,30,40,50,[31m[45m6[39;49m0])}}, kernel_size={{choice([(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)])}},
	                     input_shape=inpshape,
	                     padding=[33m'same'[39;49m, return_sequences=[36mTrue[39;49m,kernel_regularizer=keras.regularizers.l2({{uniform(0,1)}}),dropout={{uniform(0,1)}},recurrent_dropout={{uniform(0,1)}}))[K
        model.add(BatchNormalization())

	model.add(ConvLSTM2D(filters={{choice([10,20,30,40,50,60])}}, kernel_size={{choice([(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)])}},
	                     padding=[33m'same'[39;49m, return_sequences=[36mTrue[39;49m,kernel_regularizer=keras.regularizers.l2({{uniform(0,1)}}),dropout={{uniform(0,1)}},recurrent_dropout={{uniform(0,1)}}))[K
	model.add(BatchNormalization())
[K
	model.add(ConvLSTM2D(filters={{choice([10,20,30,40,50,60])}}, kernel_size={{choice([(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)])}},
	                     padding=[33m'same'[39;49m, return_sequences=[36mTrue[39;49m,kernel_regularizer=keras.regularizers.l2({{uniform(0,1)}}),dropout={{uniform(0,1)}},recurrent_dropout={{uniform(0,1)}}))
	model.add(BatchNormalization())
	model.add(ConvLSTM2D(filters={{choice([10,20,30,40,50,60])}}, kernel_size={{choice([(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)])}},[63;13H                 padding=[33m'same'[39;49m, return_sequences=[36mTrue[39;49m,kernel_regularizer=keras.regularizers.l2({{uniform(0,1)}}),dropout={{uniform(0,1)}},recurrent_dropout={{uniform(0,1)}}))
	model.add(BatchNormalization())[K
	[36mif[39;49m {{choice([[33m'four'[39;49m,[33m'five'[39;49m,[33m'six'[39;49m])}}==[33m'five'[39;49m:[66;13Hmodel.add(ConvLSTM2D(filters={{choice([10,20,30,40,50,60])}}, kernel_size={{choice([(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)])}},[67;13H                     padding=[33m'same'[39;49m, return_sequences=[36mTrue[39;49m,kernel_regularizer=keras.regularizers.l2({{uniform(0,1)}}),dropout={{uniform(0,1)}},recurrent_dropout={{uniform(0,1)}}))[68;13Hmodel.add(BatchNormalization())[K
	[36mif[39;49m {{choice([[33m'four'[39;49m,[33m'five'[39;49m,[33m'six'[39;49m])}}==[33m'six'[39;49m:[70;13Hmodel.add(ConvLSTM2D(filters={{choice([10,20,30,40,50,60])}}, kernel_size={{choice([(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)])}},
	                         padding=[33m'same'[39;49m, return_sequences=[36mTrue[39;49m,kernel_regularizer=keras.regularizers.l2({{uniform(0,1)}}),dropout={{uniform(0,1)}},recurrent_dropout={{uniform(0,1)}}))[72;13Hmodel.add(BatchNormalization())[73;13Hmodel.add(ConvLSTM2D(filters={{choice([10,20,30,40,50,60])}}, kernel_size={{choice([(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)])}},[74;21H             padding=[33m'same'[39;49m, return_sequences=[36mTrue[39;49m,kernel_regularizer=keras.regularizers.l2({{uniform(0,1)}}),dropout={{uniform(0,1)}},recurrent_dropout={{uniform(0,1)}}))[75;13Hmodel.add(BatchNormalization())
	model.add(GlobalAveragePooling3D())
	model.add(Dense({{choice([10,50,100,200])}},activation=[33m'relu'[39;49m)
	model.add(Dense(2, activation=[33m'softmax'[39;49m))[K
	[31m# Compile the model                                                                                                                                                                                                                                                                                                                                [39;49m
	model.[36mcompile[39;49m(loss=[33m'binary_crossentropy'[39;49m,
		      optimizer=[33m'Adam'[39;49m,
		      metrics=[[33m'binary_accuracy'[39;49m])
	[33m'''early_stop = EarlyStopping(                                                                                                                                                                                                                                                                                                                     [39;49m
[33m        monitor='val_loss',                                                                                                                                                                                                                                                                                                                                [39;49m
[33m        min_delta=0,                                                                                                                                                                                                                                                                                                                                       [39;49m
[33m        patience=10,                                                                                                                                                                                                                                                                                                                                       [39;49m
[33m        verbose=1,                                                                                                                                                                                                                                                                                                                                         [39;49m
[33m        mode='auto')'''[39;49m
[K[90;5H[31m# Code for ensuring no contamination between training and test data.              [39;49m[91;5H[33mlentrain[39;49m=19574*2[K[92;5H[33mlentruth[39;49m=19600
[31m# Train the network                                                                                                                                                                                                                                                                                                                                        [39;49m
[94;5H[33mhistory[39;49m = model.fit([K
	train_generator,[K
	steps_per_epoch=lentrain/50.0,
	epochs=30,[K[98;30H[30m[47m47% L217[39;49m[50;64H[?12l[?25h[?12;25h[99;12H[?25l4[?12l[?25h[?12;25h[?25l[36mFailing I-search: [39;49m6[41m4[39;49m[50;64H[?12l[?25h[?12;25h[99;21H[?25l[41m0[39;49m[50;64H[?12l[?25h[?12;25h[99;22H[?25l[41m8[39;49m[50;64H[?12l[?25h[?12;25h[99;23H[?25l[41m0[39;49m[50;64H[?12l[?25h[?12;25h[99;1H[?25l[36mWrapped I-search: [39;49m64080[50;64H[?12l[?25h[?12;25h[H
[?25l[36mimport[39;49m keras[K
[36mimport[39;49m tempfile[K
[36mimport[39;49m sys
[36mimport[39;49m tensorflow [36mas[39;49m tf[K
tf.compat.v1.disable_eager_execution()
[36mfrom[39;49m tensorflow.compat.v1 [36mimport[39;49m ConfigProto
[36mfrom[39;49m tensorflow.compat.v1 [36mimport[39;49m Session[K

[36mfrom[39;49m keras.utils [36mimport[39;49m HDF5Matrix[K
[36mfrom[39;49m keras.models [36mimport[39;49m Sequential[K
[36mfrom[39;49m keras.layers [36mimport[39;49m Conv2D, MaxPooling2D, Dense, Flatten, Dropout, Conv2D, ConvLSTM2D, MaxPooling2D, BatchNormalization, Conv3D, GlobalAveragePooling3D
[36mfrom[39;49m keras.layers.normalization [36mimport[39;49m BatchNormalization
[36mfrom[39;49m keras.layers.convolutional [36mimport[39;49m AveragePooling2D
[36mfrom[39;49m keras.layers.core [36mimport[39;49m Activation[K
[36mfrom[39;49m keras.layers.core [36mimport[39;49m Dropout[K
[36mfrom[39;49m keras.layers [36mimport[39;49m Input, GaussianNoise
[36mfrom[39;49m keras.models [36mimport[39;49m Model[K
[36mfrom[39;49m keras.layers [36mimport[39;49m concatenate
[36mimport[39;49m tensorflow.python.keras.backend [36mas[39;49m K[K
[36mfrom[39;49m keras.utils [36mimport[39;49m plot_model[K
[36mimport[39;49m matplotlib.pyplot [36mas[39;49m plt[K
[36mimport[39;49m glob
[36mfrom[39;49m sklearn.preprocessing [36mimport[39;49m StandardScaler[K
[36mfrom[39;49m keras.callbacks [36mimport[39;49m EarlyStopping[K
[36mfrom[39;49m keras [36mimport[39;49m regularizers[K
[36mfrom[39;49m mpl_toolkits.axes_grid1 [36mimport[39;49m make_axes_locatable[K
[36mimport[39;49m numpy.ma [36mas[39;49m ma[K
[36mfrom[39;49m matplotlib.pyplot [36mimport[39;49m cm[K
[36mfrom[39;49m sklearn.preprocessing [36mimport[39;49m scale[K
[36mfrom[39;49m mpl_toolkits.axes_grid1 [36mimport[39;49m make_axes_locatable[K
[36mimport[39;49m numpy.ma [36mas[39;49m ma[K
[36mfrom[39;49m matplotlib.pyplot [36mimport[39;49m cm[K
[36mfrom[39;49m mlxtend.evaluate [36mimport[39;49m confusion_matrix
[36mfrom[39;49m mlxtend.plotting [36mimport[39;49m plot_confusion_matrix[K
[36mfrom[39;49m keras.metrics [36mimport[39;49m binary_accuracy[K
[36mfrom[39;49m sklearn.metrics [36mimport[39;49m roc_curve, auc[K

[36mimport[39;49m hyperas
[36mfrom[39;49m hyperas [36mimport[39;49m optim[K
[36mfrom[39;49m hyperas.distributions [36mimport[39;49m choice, uniform
[36mfrom[39;49m hyperopt [36mimport[39;49m Trials, STATUS_OK, tpe, mongoexp
[36mimport[39;49m pickle
[36mimport[39;49m tempfile[K
[36mfrom[39;49m os [36mimport[39;49m path[K
plt.ioff()[K
[K
[31m# Finds all the hdf5 files in a given directory                                                                                                                                                                                                                                                                                                            [39;49m
[36mglobal[39;49m onlyfiles[K
[33monlyfiles[39;49m = [36msorted[39;49m(glob.glob([33m'/mnt/extraspace/exet4487/Crab[39;49m[31m[45m64080[39;49m[33mpoint/*.hdf5'[39;49m))[K
[33mrunname[39;49m = [36mstr[39;49m(sys.argv[1])[K
[33mhexmethod[39;49m=[33m'oversampling'[39;49m[K
[33mhomedir[39;49m=[33m'/users/exet4487/'[39;49m[K
[33mtrialsfile[39;49m=homedir+[33m'trials/'[39;49m+runname+[33m'.npy'[39;49m
[K
[31m# Define model architecture.                                                                                                                                                                                                                                                                                                                               [39;49m
[36mif[39;49m hexmethod [36min[39;49m [[33m'axial_addressing'[39;49m,[33m'image_shifting'[39;49m]:[58;5H[33minpshape[39;49m=([36mNone[39;49m,27,27,1)
[36melif[39;49m hexmethod [36min[39;49m [[33m'bicubic_interpolation'[39;49m,[33m'nearest_interpolation'[39;49m,[33m'oversampling'[39;49m,[33m'rebinning'[39;49m]:[K[60;5H[33minpshape[39;49m=([36mNone[39;49m,54,54,1)[K
[36melse[39;49m:[K
[36mprint[39;49m([33m'Invalid Hexmethod'[39;49m)[K[63;5H[36mraise[39;49m [33mKeyboardInterrupt[39;49m[K
[K
[36mdef[39;49m [36mdata[39;49m():[K[66;5H[36mdef[39;49m [36mhardcode_valid[39;49m():[K
	[33mhexmethod[39;49m=[33m'oversampling'[39;49m[K
	[33monlyfiles[39;49m = [36msorted[39;49m(glob.glob([33m'/mnt/extraspace/exet4487/Crab64080point/*.hdf5'[39;49m))
	[33mbatch_size[39;49m=50[K
	[33m""" Generates training/test sequences on demand                                                                                                                                                                                                                                                                                                    [39;49m
[33m        """[39;49m[K
[K
	[33mnofiles[39;49m = 0[K
	[33mi[39;49m = 0  [31m# No. events loaded in total                                                                                                                                                                                                                                                                                                                [39;49m
	[33mfilelist[39;49m = onlyfiles[-10:][K
	[36mglobal[39;49m validevents[K
	[36mglobal[39;49m valid2[K
	[33mvalidevents[39;49m=[][K
	[33mvalid2[39;49m=[][K
	[36mfor[39;49m [36mfile[39;49m [36min[39;49m filelist:[K[81;13H[33minputdata[39;49m = h5py.File([36mfile[39;49m, [33m'r'[39;49m)[82;13H[33mvalidevents[39;49m = validevents + inputdata[[33m'isGamma'[39;49m][:].tolist()
	    [33mvalid2[39;49m = valid2 + inputdata[[33m'id'[39;49m][:].tolist()[K
            inputdata.close()[K
[K
        [36mwhile[39;49m [36mTrue[39;49m:[K
            [36mfor[39;49m [36mfile[39;49m [36min[39;49m filelist:[K
                [36mtry[39;49m:[K
[33minputdata[39;49m = h5py.File([36mfile[39;49m, [33m'r'[39;49m)[90;5H            [36mexcept[39;49m [33mOSError[39;49m:[K[91;5H                [36mcontinue[39;49m[92;5H            [33mtrainarr[39;49m = np.asarray(inputdata[hexmethod][:, :, :, :])
                [33mlabelsarr[39;49m = np.asarray(inputdata[[33m'isGamma'[39;49m][:])[K[94;5H            [33midarr[39;49m = np.asarray(inputdata[[33m'id'[39;49m][:])
	        [33mnofiles[39;49m = nofiles + 1
	        inputdata.close()[K
	        [33mnotrigs[39;49m=np.shape(trainarr)[0][98;30H[30m[47m 2% L56 [39;49m[50;65H[?12l[?25h[?12;25h[68;68H[?25l[33m[46m64080[39;49m[50;65H[?12l[?25h[?12;25h[?25l[33m[46m64080[39;49m[68;68H[31m[45m64080[39;49m[98;35H[30m[47m74[39;49m[68;73H[?12l[?25h[?12;25h[1;74r[49;1H[18M[1;97r[69;1H[15M[1;99r[2;1H[?25l            inputdata.close()
[K
        [36mwhile[39;49m [36mTrue[39;49m:
            [36mfor[39;49m [36mfile[39;49m [36min[39;49m filelist:
                [36mtry[39;49m:[K
                    [33minputdata[39;49m = h5py.File([36mfile[39;49m, [33m'r'[39;49m)
                [36mexcept[39;49m [33mOSError[39;49m:[K[9;21H[36mcontinue[39;49m
                [33mtrainarr[39;49m = np.asarray(inputdata[hexmethod][:, :, :, :])
                [33mlabelsarr[39;49m = np.asarray(inputdata[[33m'isGamma'[39;49m][:])
                [33midarr[39;49m = np.asarray(inputdata[[33m'id'[39;49m][:])[K
                [33mnofiles[39;49m = nofiles + 1[K
                inputdata.close()[K
                [33mnotrigs[39;49m=np.shape(trainarr)[0]
[K
                [36mfor[39;49m x [36min[39;49m np.arange(np.shape(trainarr)[0]):
                    [33mchargevals[39;49m = []
                    [36mfor[39;49m y [36min[39;49m np.arange(4):
                        chargevals.append(np.[36msum[39;49m(trainarr[x,y,:,:]))
[K
                    [33mchargevals[39;49m = np.argsort(chargevals)
                    [33mchargevals[39;49m = np.flip(chargevals,axis=0) [31m#Flip to descending order.                                                                                                                                                                                                                                                                     [39;49m
                    [33mtrainarr[39;49m[x, :, :, :] = trainarr[x, chargevals, :, :]
                [33mtraining_sample_count[39;49m = [36mlen[39;49m(trainarr)
                [33mbatches[39;49m = [36mint[39;49m(training_sample_count / batch_size)
                [33mremainder_samples[39;49m = training_sample_count % batch_size
                [33mi[39;49m = i + 1000
                [33mcountarr[39;49m = np.arange(0, [36mlen[39;49m(labelsarr))
                [31m#trainarr = (trainarr-np.amin(trainarr,axis=0))/(np.amax(trainarr,axis=0)-np.amin(trainarr,axis=0))                                                                                                                                                                                                                                        [39;49m
                [36mif[39;49m remainder_samples:[K
                    [33mbatches[39;49m = batches + 1
                        [31m# generate batches of samples                                                                                                                                                                                                                                                                                                      [39;49m
                [36mfor[39;49m idx [36min[39;49m [36mlist[39;49m([36mrange[39;49m(0, batches)):
                    [36mif[39;49m idx == batches - 1:[K
                        [33mbatch_idxs[39;49m = countarr[idx * batch_size:]
                    [36melse[39;49m:[K
[33mbatch_idxs[39;49m = countarr[idx *
                                              batch_size:idx *
                                              batch_size +
                                              batch_size]
                    [33mX[39;49m = trainarr[batch_idxs][K
                    [33mX[39;49m = np.nan_to_num(X)
                    [33mY[39;49m = keras.utils.to_categorical(
                        labelsarr[batch_idxs], num_classes=2)
                    [36myield[39;49m (np.array(X), np.array(Y))

    [36mdef[39;49m [36mhardcode_train[39;49m():[K[57;1H        [36mglobal[39;49m trainevents[K
        [36mglobal[39;49m train2[K
        [33mtrainevents[39;49m=[][K
        [33mtrain2[39;49m=[][K
        [33mfilelist[39;49m = onlyfiles[:20][K
        [36mfor[39;49m [36mfile[39;49m [36min[39;49m filelist:[K
            [36mtry[39;49m:[K
                [33minputdata[39;49m = h5py.File([36mfile[39;49m, [33m'r'[39;49m)[K
            [36mexcept[39;49m [33mOSError[39;49m:[K
                [36mcontinue[39;49m[K
            [33mtrainevents[39;49m = trainevents + inputdata[[33m'isGamma'[39;49m][:].tolist()[K
            [33mtrain2[39;49m = train2 + inputdata[[33m'id'[39;49m][:].tolist()[K[83;1H[K
                [36mfor[39;49m x [36min[39;49m np.arange(np.shape(trainarr)[0]):[K
                    [33mchargevals[39;49m = [][K
                    [36mfor[39;49m y [36min[39;49m np.arange(4):[K
                        chargevals.append(np.[36msum[39;49m(trainarr[x,y,:,:]))[K
[K
                    [33mchargevals[39;49m = np.argsort(chargevals)[K
                    [33mchargevals[39;49m = np.flip(chargevals,axis=0) [31m#Flip to descending order.                                                                                                                                                                                                                                                                     [39;49m
[A
                    [33mtrainarr[39;49m[x, :, :, :] = trainarr[x, chargevals, :, :][K
[K
                [33mtraining_sample_count[39;49m = [36mlen[39;49m(trainarr)[K
                [33mbatches[39;49m = [36mint[39;49m(training_sample_count / batch_size)[K
                [33mremainder_samples[39;49m = training_sample_count % batch_size[K
                [33mi[39;49m = i + 1000[K
                [33mcountarr[39;49m = np.arange(0, [36mlen[39;49m(labelsarr))[K[98;30H[30m[47m23% L138[39;49m[50;73H[?12l[?25h[?12;25h[99;1H[?25l[36mFailing wrapped I-search: [39;49m[41m64080[39;49m[50;73H[?12l[?25h[?12;25h[99;1H[?25l[36mWrapped I-search: [39;49m64080[K[50;73H[?12l[?25h[?12;25h[1;97r[69;1H[15L[1;74r[51;1H[18L[1;99r[2;1H[?25l[36mimport[39;49m keras[K
[36mimport[39;49m tempfile
[36mimport[39;49m sys[K
[36mimport[39;49m tensorflow [36mas[39;49m tf[K
tf.compat.v1.disable_eager_execution()
[36mfrom[39;49m tensorflow.compat.v1 [36mimport[39;49m ConfigProto[K
[36mfrom[39;49m tensorflow.compat.v1 [36mimport[39;49m Session
[K
[36mfrom[39;49m keras.utils [36mimport[39;49m HDF5Matrix[K
[36mfrom[39;49m keras.models [36mimport[39;49m Sequential[K
[36mfrom[39;49m keras.layers [36mimport[39;49m Conv2D, MaxPooling2D, Dense, Flatten, Dropout, Conv2D, ConvLSTM2D, MaxPooling2D, BatchNormalization, Conv3D, GlobalAveragePooling3D
[36mfrom[39;49m keras.layers.normalization [36mimport[39;49m BatchNormalization
[36mfrom[39;49m keras.layers.convolutional [36mimport[39;49m AveragePooling2D
[36mfrom[39;49m keras.layers.core [36mimport[39;49m Activation[K
[36mfrom[39;49m keras.layers.core [36mimport[39;49m Dropout
[36mfrom[39;49m keras.layers [36mimport[39;49m Input, GaussianNoise[K
[36mfrom[39;49m keras.models [36mimport[39;49m Model[K
[36mfrom[39;49m keras.layers [36mimport[39;49m concatenate[K
[36mimport[39;49m tensorflow.python.keras.backend [36mas[39;49m K[K
[36mfrom[39;49m keras.utils [36mimport[39;49m plot_model
[36mimport[39;49m matplotlib.pyplot [36mas[39;49m plt[K
[36mimport[39;49m glob[K
[36mfrom[39;49m sklearn.preprocessing [36mimport[39;49m StandardScaler[K
[36mfrom[39;49m keras.callbacks [36mimport[39;49m EarlyStopping[K
[36mfrom[39;49m keras [36mimport[39;49m regularizers[K
[36mfrom[39;49m mpl_toolkits.axes_grid1 [36mimport[39;49m make_axes_locatable[K
[36mimport[39;49m numpy.ma [36mas[39;49m ma[K
[36mfrom[39;49m matplotlib.pyplot [36mimport[39;49m cm[K
[36mfrom[39;49m sklearn.preprocessing [36mimport[39;49m scale[K
[36mfrom[39;49m mpl_toolkits.axes_grid1 [36mimport[39;49m make_axes_locatable
[36mimport[39;49m numpy.ma [36mas[39;49m ma[K
[36mfrom[39;49m matplotlib.pyplot [36mimport[39;49m cm[K
[36mfrom[39;49m mlxtend.evaluate [36mimport[39;49m confusion_matrix[K
[36mfrom[39;49m mlxtend.plotting [36mimport[39;49m plot_confusion_matrix
[36mfrom[39;49m keras.metrics [36mimport[39;49m binary_accuracy[K
[36mfrom[39;49m sklearn.metrics [36mimport[39;49m roc_curve, auc
[K
[36mimport[39;49m hyperas[K
[36mfrom[39;49m hyperas [36mimport[39;49m optim[K
[36mfrom[39;49m hyperas.distributions [36mimport[39;49m choice, uniform[K
[36mfrom[39;49m hyperopt [36mimport[39;49m Trials, STATUS_OK, tpe, mongoexp
[36mimport[39;49m pickle[K
[36mimport[39;49m tempfile[K
[36mfrom[39;49m os [36mimport[39;49m path[K
plt.ioff()[K

[31m# Finds all the hdf5 files in a given directory                                                                                                                                                                                                                                                                                                            [39;49m
[36mglobal[39;49m onlyfiles[K
[8P
[33mrunname[39;49m = [36mstr[39;49m(sys.argv[1])[K
[33mhexmethod[39;49m=[33m'oversampling'[39;49m[K
[33mhomedir[39;49m=[33m'/users/exet4487/'[39;49m[K
[33mtrialsfile[39;49m=homedir+[33m'trials/'[39;49m+runname+[33m'.npy'[39;49m[K
[K
[31m# Define model architecture.                                                                                                                                                                                                                                                                                                                               [39;49m
[A
[36mif[39;49m hexmethod [36min[39;49m [[33m'axial_addressing'[39;49m,[33m'image_shifting'[39;49m]:[K
    [33minpshape[39;49m=([36mNone[39;49m,27,27,1)[K
[36melif[39;49m hexmethod [36min[39;49m [[33m'bicubic_interpolation'[39;49m,[33m'nearest_interpolation'[39;49m,[33m'oversampling'[39;49m,[33m'rebinning'[39;49m]:[K
    [33minpshape[39;49m=([36mNone[39;49m,54,54,1)[K
[36melse[39;49m:[K
    [36mprint[39;49m([33m'Invalid Hexmethod'[39;49m)[K
    [36mraise[39;49m [33mKeyboardInterrupt[39;49m[K
[K
[36mdef[39;49m [36mdata[39;49m():[K
    [36mdef[39;49m [36mhardcode_valid[39;49m():[K
        [33mhexmethod[39;49m=[33m'oversampling'[39;49m[K
        [33monlyfiles[39;49m = [36msorted[39;49m(glob.glob([33m'/mnt/extraspace/exet4487/Crab64080point/*.hdf5'[39;49m))[K[75;1H        [33mfilelist[39;49m = onlyfiles[-10:][K
        [36mglobal[39;49m validevents[K
        [36mglobal[39;49m valid2[K
        [33mvalidevents[39;49m=[][K
        [33mvalid2[39;49m=[][K
        [36mfor[39;49m [36mfile[39;49m [36min[39;49m filelist:[K
            [33minputdata[39;49m = h5py.File([36mfile[39;49m, [33m'r'[39;49m)[K
            [33mvalidevents[39;49m = validevents + inputdata[[33m'isGamma'[39;49m][:].tolist()[K
            [33mvalid2[39;49m = valid2 + inputdata[[33m'id'[39;49m][:].tolist()[K[98;30H[30m[47m 2% L56 [39;49m[50;65H[?12l[?25h[?12;25h[68;68H[?25l[33m[46m64080[39;49m[50;65H[?12l[?25h[?12;25h[99;1H[K[50;65H[99;1H[?25lMark saved where search started[50;65H[?12l[?25h[?12;25h[99;1H[?25lSaving file /users/exet4487/getout_glamdring/hypertrain.py...[50;65H[?12l[?25h[?12;25h[99;1H[?25lWrote /users/exet4487/getout_glamdring/hypertrain.py[K[50;65H[?12l[?25h[?12;25h[?25l[33m64080[39;49m[68;68H[33m64080[39;49m[98;6H[30m[47m----F1  [39;49m[1m[30m[47mhypertrain.py[0m[39;49m[30m[47m    2% L56   Git:master  (Python) --------[39;49m[50;65H[?12l[?25h[?12;25h[99;1H[K[50;65H[99;1H[K[?1l>[?12l[?25h[?1049l[23;0;0t[39;49m[1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m 
[1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m 
[1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m 
[1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m 
[1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m 
[1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m 
[1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m cd ../launchpad
[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m ls -trghl
total 35M
drwxrwxr-x 6 exet4487     6 Jul 21 12:31  venv
-rw-rw-r-- 1 exet4487  1.9K Jul 21 18:32  testgpu.py
-rw-rw-r-- 1 exet4487  2.3K Jul 24 17:08  temp_model.py
-rwxrw-r-- 1 exet4487   462 Aug  5 12:14  testlaunch.sh
-rw-rw-r-- 1 exet4487  1.6K Aug 20 20:03  testhead.sh.sh
-rw-rw-r-- 1 exet4487  734K Aug 22 00:57  screentest9_2.txt
-rw-rw-r-- 1 exet4487  764K Aug 22 01:18  screentest9_3.txt
-rw-rw-r-- 1 exet4487  708K Aug 22 01:20  screentest9_4.txt
-rw-rw-r-- 1 exet4487  776K Aug 22 01:33  screentest9_1.txt
-rw-rw-r-- 1 exet4487   12K Aug 22 19:00  screentest9_5.txt
-rw-rw-r-- 1 exet4487   22K Aug 22 20:17  screentest10_5.txt
-rw-rw-r-- 1 exet4487  117K Aug 22 20:17  screentest10_2.txt
-rw-rw-r-- 1 exet4487  111K Aug 22 20:17  screentest10_4.txt
-rw-rw-r-- 1 exet4487  134K Aug 22 20:17  screentest10_1.txt
-rw-rw-r-- 1 exet4487  111K Aug 22 20:17  screentest10_3.txt
-rw-rw-r-- 1 exet4487   11K Aug 22 20:24  _.txt
-rw-rw-r-- 1 exet4487  701K Aug 23 02:29  screentest11_3.txt
-rw-rw-r-- 1 exet4487  652K Aug 23 02:44  screentest11_8_.txt
-rw-rw-r-- 1 exet4487  783K Aug 23 02:47  screentest11_1.txt
-rw-rw-r-- 1 exet4487  796K Aug 23 02:55  screentest11_2.txt
-rw-rw-r-- 1 exet4487   12K Aug 23 09:56  screentest11_4.txt
-rw-rw-r-- 1 exet4487   12K Aug 23 09:57  screentest12_1.txt
-rw-rw-r-- 1 exet4487   612 Aug 23 09:57  screentest12_3.txt
-rw-rw-r-- 1 exet4487    80 Aug 23 09:57  screentest12_4.txt
-rw-rw-r-- 1 exet4487   12K Aug 23 09:57  screentest12_2.txt
-rw-rw-r-- 1 exet4487  8.9K Aug 23 10:04  screentest13_1.txt
-rw-rw-r-- 1 exet4487   12K Aug 23 10:04  screentest13_4.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 10:04  screentest13_3.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 10:04  screentest13_2.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 10:04  screentest13_5.txt
-rw-rw-r-- 1 exet4487  297K Aug 23 12:32  screentest14_4.txt
-rw-rw-r-- 1 exet4487  649K Aug 23 15:36  screentest14_5.txt
-rw-rw-r-- 1 exet4487  598K Aug 23 15:42  screentest14_1.txt
-rw-rw-r-- 1 exet4487  653K Aug 23 15:51  screentest14_2.txt
-rw-rw-r-- 1 exet4487  683K Aug 23 15:53  screentest14_3.txt
-rw-rw-r-- 1 exet4487   22K Aug 23 22:46  stresstest1_1.txt
-rw-rw-r-- 1 exet4487   22K Aug 23 22:46  stresstest1_3.txt
-rw-rw-r-- 1 exet4487   22K Aug 23 22:46  stresstest1_2.txt
-rw-rw-r-- 1 exet4487   21K Aug 23 22:46  stresstest1_5.txt
-rw-rw-r-- 1 exet4487   20K Aug 23 22:46  stresstest1_4.txt
-rwxrw-r-- 1 exet4487   363 Aug 23 22:47  testhead.sh~
-rwxrw-r-- 1 exet4487   357 Aug 23 22:51  testhead.sh
-rw-rw-r-- 1 exet4487   13K Aug 23 23:02  stresstest4_3.txt
-rw-rw-r-- 1 exet4487  8.9K Aug 23 23:02  stresstest4_1.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 23:02  stresstest4_5.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 23:02  stresstest4_4.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 23:02  stresstest4_2.txt
-rw-rw-r-- 1 exet4487  483K Aug 25 09:55  screentest5_4.txt
-rw-rw-r-- 1 exet4487  515K Aug 25 10:40  screentest5_5.txt
-rw-rw-r-- 1 exet4487  573K Aug 25 11:12  screentest5_3.txt
-rw-rw-r-- 1 exet4487  495K Aug 25 12:23  screentest5_1.txt
-rw-rw-r-- 1 exet4487  589K Aug 25 12:45  screentest5_2.txt
-rw-rw-r-- 1 exet4487   62K Aug 27 20:13  crashtest1_3.txt
-rw-rw-r-- 1 exet4487  110K Aug 27 22:40  crashtest1_4.txt
-rw-rw-r-- 1 exet4487  116K Aug 28 14:52  crashtest1_6.txt
-rw-rw-r-- 1 exet4487  165K Aug 28 17:55  crashtest1_7.txt
-rw-rw-r-- 1 exet4487  813K Aug 29 04:44  crashtest1_5.txt
-rw-rw-r-- 1 exet4487  729K Aug 29 05:01  crashtest1_1.txt
-rw-rw-r-- 1 exet4487  830K Aug 29 06:44  crashtest1_2.txt
-rw-rw-r-- 1 exet4487   61K Aug 31 16:47  crashtest2_3.txt
-rw-rw-r-- 1 exet4487  110K Aug 31 19:11  crashtest2_4.txt
-rw-rw-r-- 1 exet4487  441K Sep  1 10:51  crashtest2_5.txt
-rw-rw-r-- 1 exet4487  402K Sep  1 10:58  crashtest2_1.txt
-rw-rw-r-- 1 exet4487  404K Sep  1 10:58  crashtest2_2.txt
-rw-rw-r-- 1 exet4487   61K Sep  1 14:23  crashtest3_3.txt
-rw-rw-r-- 1 exet4487  592K Sep  2 14:44  crashtest3_4.txt
-rw-rw-r-- 1 exet4487  606K Sep  2 21:34  crashtest3_1.txt
-rw-rw-r-- 1 exet4487  668K Sep  2 21:34  crashtest3_2.txt
-rw-rw-r-- 1 exet4487  682K Sep  2 21:34  crashtest3_5.txt
-rw-rw-r-- 1 exet4487   61K Sep  3 20:54  crashtest4_3.txt
-rw-rw-r-- 1 exet4487  654K Sep  5 01:52  crashtest4_6.txt
-rw-rw-r-- 1 exet4487  722K Sep  5 02:18  crashtest4_2.txt
-rw-rw-r-- 1 exet4487  618K Sep  5 02:42  crashtest4_1.txt
-rw-rw-r-- 1 exet4487  728K Sep  5 04:27  crashtest4_4.txt
-rw-rw-r-- 1 exet4487  621K Sep  6 16:12  crashtest5_3.txt
-rw-rw-r-- 1 exet4487  688K Sep  6 17:38  crashtest5_4.txt
-rw-rw-r-- 1 exet4487   53K Sep  6 17:46  crashtest5_5.txt
-rw-rw-r-- 1 exet4487  703K Sep  6 18:01  crashtest5_2.txt
-rw-rw-r-- 1 exet4487 1001K Sep  6 20:03  crashtest5_1.txt
-rw-rw-r-- 1 exet4487  707K Sep  9 00:26  crashtest6_2.txt
-rw-rw-r-- 1 exet4487  665K Sep  9 01:20  crashtest6_4.txt
-rw-rw-r-- 1 exet4487  257K Sep  9 01:34  crashtest6_gpu03.txt
-rw-rw-r-- 1 exet4487  674K Sep  9 02:59  crashtest6_3.txt
-rw-rw-r-- 1 exet4487  782K Sep  9 03:57  crashtest6_1.txt
-rw-rw-r-- 1 exet4487  117K Sep  9 15:27  crashtest7_2.txt
-rw-rw-r-- 1 exet4487   89K Sep  9 15:27  crashtest7_4.txt
-rw-rw-r-- 1 exet4487  110K Sep  9 15:27  crashtest7_1.txt
-rw-rw-r-- 1 exet4487  121K Sep  9 15:27  crashtest7_5.txt
-rw-rw-r-- 1 exet4487  110K Sep  9 15:27  crashtest7_3.txt
-rw-rw-r-- 1 exet4487  211K Sep 10 00:21  crashtest8_4.txt
-rw-rw-r-- 1 exet4487  247K Sep 10 01:35  crashtest8_2.txt
-rw-rw-r-- 1 exet4487  263K Sep 10 02:12  crashtest8_5.txt
-rw-rw-r-- 1 exet4487  247K Sep 10 02:25  crashtest8_3.txt
-rw-rw-r-- 1 exet4487  285K Sep 10 02:27  crashtest8_1.txt
-rw-rw-r-- 1 exet4487   13K Sep 10 10:15  longtest5_1.txt
-rw-rw-r-- 1 exet4487  8.9K Sep 10 10:15  longtest5_4.txt
-rw-rw-r-- 1 exet4487   13K Sep 10 10:15  longtest5_2.txt
-rw-rw-r-- 1 exet4487   13K Sep 10 10:15  longtest5_5.txt
-rw-rw-r-- 1 exet4487   13K Sep 10 10:15  longtest5_3.txt
-rw-rw-r-- 1 exet4487   61K Sep 10 12:59  longtest7_3.txt
-rw-rw-r-- 1 exet4487  2.0M Sep 14 11:47  longtest7_2.txt
-rw-rw-r-- 1 exet4487  2.0M Sep 14 11:47  longtest7_1.txt
-rw-rw-r-- 1 exet4487  2.0M Sep 14 11:47  longtest7_5.txt
-rw-rw-r-- 1 exet4487  1.7M Sep 14 11:47  longtest7_4.txt
-rwxrwxr-x 1 exet4487   998 Sep 14 11:48  submitjobs.sh~
-rw-rw-r-- 1 exet4487  3.1M Sep 20 16:05  longtest8_1.txt
-rw-rw-r-- 1 exet4487  3.2M Sep 20 16:25  longtest8_2.txt
-rw-rw-r-- 1 exet4487  2.6M Sep 20 16:48  longtest8_4.txt
-rw-rw-r-- 1 exet4487  3.2M Sep 20 17:28  longtest8_3.txt
-rw-rw-r-- 1 exet4487  3.1M Sep 20 18:04  longtest8_5.txt
-rw-rw-r-- 1 exet4487   25M Sep 23 04:39  Crab64080opt1_4.txt
-rw-rw-r-- 1 exet4487  3.7M Sep 24 10:25  Crab64080opt2_3.txt
-rw-rw-r-- 1 exet4487  3.9M Sep 24 12:17  Crab64080opt1_5.txt
-rw-rw-r-- 1 exet4487  4.1M Sep 24 12:17  Crab64080opt1_3.txt
-rw-rw-r-- 1 exet4487  4.1M Sep 24 12:17  Crab64080opt1_1.txt
-rw-rw-r-- 1 exet4487  4.0M Sep 24 12:17  Crab64080opt1_2.txt
-rw-rw-r-- 1 exet4487   11K Sep 24 12:17  Crab64080opt2_5.txt
-rw-rw-r-- 1 exet4487   12K Sep 24 12:17  Crab64080opt2_2.txt
-rw-rw-r-- 1 exet4487  3.4M Sep 24 12:17  Crab64080opt2_4.txt
-rw-rw-r-- 1 exet4487   13K Sep 24 12:17  Crab64080opt2_1.txt
-rw-rw-r-- 1 exet4487   52K Oct  3 17:11  Crab64080opt3_1.txt
-rw-rw-r-- 1 exet4487   52K Oct  3 17:11  Crab64080opt3_2.txt
-rw-rw-r-- 1 exet4487   52K Oct  3 17:11  Crab64080opt3_3.txt
-rw-rw-r-- 1 exet4487   52K Oct  3 17:11  Crab64080opt3_4.txt
-rw-rw-r-- 1 exet4487   53K Oct  3 17:11  Crab64080opt3_5.txt
-rw-rw-r-- 1 exet4487  517K Oct  4 10:56  Crab64080pointopt3_3.txt
-rwxrwxr-x 1 exet4487   998 Oct  6 09:04  submitjobs.sh
-rwxrwxr-x 1 exet4487  1.2K Oct 11 13:21 '#submitjobs.sh#'
-rw-rw-r-- 1 exet4487  1.6K Oct 11 13:44  testlaunch.sh.sh
-rw-rw-r-- 1 exet4487  3.4M Oct 11 13:49  Crab64080pointopt3_4.txt
-rw-rw-r-- 1 exet4487   33M Oct 11 18:54  screenlog.0
-rw-rw-r-- 1 exet4487  5.9M Oct 11 19:47  Crab64080pointopt3_1.txt
-rw-rw-r-- 1 exet4487  5.5M Oct 11 19:47  Crab64080pointopt3_5.txt
-rw-rw-r-- 1 exet4487  5.7M Oct 11 19:47  Crab64080pointopt3_2.txt
[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m ls -trhgl
total 35M
drwxrwxr-x 6 exet4487     6 Jul 21 12:31  venv
-rw-rw-r-- 1 exet4487  1.9K Jul 21 18:32  testgpu.py
-rw-rw-r-- 1 exet4487  2.3K Jul 24 17:08  temp_model.py
-rwxrw-r-- 1 exet4487   462 Aug  5 12:14  testlaunch.sh
-rw-rw-r-- 1 exet4487  1.6K Aug 20 20:03  testhead.sh.sh
-rw-rw-r-- 1 exet4487  734K Aug 22 00:57  screentest9_2.txt
-rw-rw-r-- 1 exet4487  764K Aug 22 01:18  screentest9_3.txt
-rw-rw-r-- 1 exet4487  708K Aug 22 01:20  screentest9_4.txt
-rw-rw-r-- 1 exet4487  776K Aug 22 01:33  screentest9_1.txt
-rw-rw-r-- 1 exet4487   12K Aug 22 19:00  screentest9_5.txt
-rw-rw-r-- 1 exet4487   22K Aug 22 20:17  screentest10_5.txt
-rw-rw-r-- 1 exet4487  117K Aug 22 20:17  screentest10_2.txt
-rw-rw-r-- 1 exet4487  111K Aug 22 20:17  screentest10_4.txt
-rw-rw-r-- 1 exet4487  134K Aug 22 20:17  screentest10_1.txt
-rw-rw-r-- 1 exet4487  111K Aug 22 20:17  screentest10_3.txt
-rw-rw-r-- 1 exet4487   11K Aug 22 20:24  _.txt
-rw-rw-r-- 1 exet4487  701K Aug 23 02:29  screentest11_3.txt
-rw-rw-r-- 1 exet4487  652K Aug 23 02:44  screentest11_8_.txt
-rw-rw-r-- 1 exet4487  783K Aug 23 02:47  screentest11_1.txt
-rw-rw-r-- 1 exet4487  796K Aug 23 02:55  screentest11_2.txt
-rw-rw-r-- 1 exet4487   12K Aug 23 09:56  screentest11_4.txt
-rw-rw-r-- 1 exet4487   12K Aug 23 09:57  screentest12_1.txt
-rw-rw-r-- 1 exet4487   612 Aug 23 09:57  screentest12_3.txt
-rw-rw-r-- 1 exet4487    80 Aug 23 09:57  screentest12_4.txt
-rw-rw-r-- 1 exet4487   12K Aug 23 09:57  screentest12_2.txt
-rw-rw-r-- 1 exet4487  8.9K Aug 23 10:04  screentest13_1.txt
-rw-rw-r-- 1 exet4487   12K Aug 23 10:04  screentest13_4.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 10:04  screentest13_3.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 10:04  screentest13_2.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 10:04  screentest13_5.txt
-rw-rw-r-- 1 exet4487  297K Aug 23 12:32  screentest14_4.txt
-rw-rw-r-- 1 exet4487  649K Aug 23 15:36  screentest14_5.txt
-rw-rw-r-- 1 exet4487  598K Aug 23 15:42  screentest14_1.txt
-rw-rw-r-- 1 exet4487  653K Aug 23 15:51  screentest14_2.txt
-rw-rw-r-- 1 exet4487  683K Aug 23 15:53  screentest14_3.txt
-rw-rw-r-- 1 exet4487   22K Aug 23 22:46  stresstest1_1.txt
-rw-rw-r-- 1 exet4487   22K Aug 23 22:46  stresstest1_3.txt
-rw-rw-r-- 1 exet4487   22K Aug 23 22:46  stresstest1_2.txt
-rw-rw-r-- 1 exet4487   21K Aug 23 22:46  stresstest1_5.txt
-rw-rw-r-- 1 exet4487   20K Aug 23 22:46  stresstest1_4.txt
-rwxrw-r-- 1 exet4487   363 Aug 23 22:47  testhead.sh~
-rwxrw-r-- 1 exet4487   357 Aug 23 22:51  testhead.sh
-rw-rw-r-- 1 exet4487   13K Aug 23 23:02  stresstest4_3.txt
-rw-rw-r-- 1 exet4487  8.9K Aug 23 23:02  stresstest4_1.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 23:02  stresstest4_5.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 23:02  stresstest4_4.txt
-rw-rw-r-- 1 exet4487   13K Aug 23 23:02  stresstest4_2.txt
-rw-rw-r-- 1 exet4487  483K Aug 25 09:55  screentest5_4.txt
-rw-rw-r-- 1 exet4487  515K Aug 25 10:40  screentest5_5.txt
-rw-rw-r-- 1 exet4487  573K Aug 25 11:12  screentest5_3.txt
-rw-rw-r-- 1 exet4487  495K Aug 25 12:23  screentest5_1.txt
-rw-rw-r-- 1 exet4487  589K Aug 25 12:45  screentest5_2.txt
-rw-rw-r-- 1 exet4487   62K Aug 27 20:13  crashtest1_3.txt
-rw-rw-r-- 1 exet4487  110K Aug 27 22:40  crashtest1_4.txt
-rw-rw-r-- 1 exet4487  116K Aug 28 14:52  crashtest1_6.txt
-rw-rw-r-- 1 exet4487  165K Aug 28 17:55  crashtest1_7.txt
-rw-rw-r-- 1 exet4487  813K Aug 29 04:44  crashtest1_5.txt
-rw-rw-r-- 1 exet4487  729K Aug 29 05:01  crashtest1_1.txt
-rw-rw-r-- 1 exet4487  830K Aug 29 06:44  crashtest1_2.txt
-rw-rw-r-- 1 exet4487   61K Aug 31 16:47  crashtest2_3.txt
-rw-rw-r-- 1 exet4487  110K Aug 31 19:11  crashtest2_4.txt
-rw-rw-r-- 1 exet4487  441K Sep  1 10:51  crashtest2_5.txt
-rw-rw-r-- 1 exet4487  402K Sep  1 10:58  crashtest2_1.txt
-rw-rw-r-- 1 exet4487  404K Sep  1 10:58  crashtest2_2.txt
-rw-rw-r-- 1 exet4487   61K Sep  1 14:23  crashtest3_3.txt
-rw-rw-r-- 1 exet4487  592K Sep  2 14:44  crashtest3_4.txt
-rw-rw-r-- 1 exet4487  606K Sep  2 21:34  crashtest3_1.txt
-rw-rw-r-- 1 exet4487  668K Sep  2 21:34  crashtest3_2.txt
-rw-rw-r-- 1 exet4487  682K Sep  2 21:34  crashtest3_5.txt
-rw-rw-r-- 1 exet4487   61K Sep  3 20:54  crashtest4_3.txt
-rw-rw-r-- 1 exet4487  654K Sep  5 01:52  crashtest4_6.txt
-rw-rw-r-- 1 exet4487  722K Sep  5 02:18  crashtest4_2.txt
-rw-rw-r-- 1 exet4487  618K Sep  5 02:42  crashtest4_1.txt
-rw-rw-r-- 1 exet4487  728K Sep  5 04:27  crashtest4_4.txt
-rw-rw-r-- 1 exet4487  621K Sep  6 16:12  crashtest5_3.txt
-rw-rw-r-- 1 exet4487  688K Sep  6 17:38  crashtest5_4.txt
-rw-rw-r-- 1 exet4487   53K Sep  6 17:46  crashtest5_5.txt
-rw-rw-r-- 1 exet4487  703K Sep  6 18:01  crashtest5_2.txt
-rw-rw-r-- 1 exet4487 1001K Sep  6 20:03  crashtest5_1.txt
-rw-rw-r-- 1 exet4487  707K Sep  9 00:26  crashtest6_2.txt
-rw-rw-r-- 1 exet4487  665K Sep  9 01:20  crashtest6_4.txt
-rw-rw-r-- 1 exet4487  257K Sep  9 01:34  crashtest6_gpu03.txt
-rw-rw-r-- 1 exet4487  674K Sep  9 02:59  crashtest6_3.txt
-rw-rw-r-- 1 exet4487  782K Sep  9 03:57  crashtest6_1.txt
-rw-rw-r-- 1 exet4487  117K Sep  9 15:27  crashtest7_2.txt
-rw-rw-r-- 1 exet4487   89K Sep  9 15:27  crashtest7_4.txt
-rw-rw-r-- 1 exet4487  110K Sep  9 15:27  crashtest7_1.txt
-rw-rw-r-- 1 exet4487  121K Sep  9 15:27  crashtest7_5.txt
-rw-rw-r-- 1 exet4487  110K Sep  9 15:27  crashtest7_3.txt
-rw-rw-r-- 1 exet4487  211K Sep 10 00:21  crashtest8_4.txt
-rw-rw-r-- 1 exet4487  247K Sep 10 01:35  crashtest8_2.txt
-rw-rw-r-- 1 exet4487  263K Sep 10 02:12  crashtest8_5.txt
-rw-rw-r-- 1 exet4487  247K Sep 10 02:25  crashtest8_3.txt
-rw-rw-r-- 1 exet4487  285K Sep 10 02:27  crashtest8_1.txt
-rw-rw-r-- 1 exet4487   13K Sep 10 10:15  longtest5_1.txt
-rw-rw-r-- 1 exet4487  8.9K Sep 10 10:15  longtest5_4.txt
-rw-rw-r-- 1 exet4487   13K Sep 10 10:15  longtest5_2.txt
-rw-rw-r-- 1 exet4487   13K Sep 10 10:15  longtest5_5.txt
-rw-rw-r-- 1 exet4487   13K Sep 10 10:15  longtest5_3.txt
-rw-rw-r-- 1 exet4487   61K Sep 10 12:59  longtest7_3.txt
-rw-rw-r-- 1 exet4487  2.0M Sep 14 11:47  longtest7_2.txt
-rw-rw-r-- 1 exet4487  2.0M Sep 14 11:47  longtest7_1.txt
-rw-rw-r-- 1 exet4487  2.0M Sep 14 11:47  longtest7_5.txt
-rw-rw-r-- 1 exet4487  1.7M Sep 14 11:47  longtest7_4.txt
-rwxrwxr-x 1 exet4487   998 Sep 14 11:48  submitjobs.sh~
-rw-rw-r-- 1 exet4487  3.1M Sep 20 16:05  longtest8_1.txt
-rw-rw-r-- 1 exet4487  3.2M Sep 20 16:25  longtest8_2.txt
-rw-rw-r-- 1 exet4487  2.6M Sep 20 16:48  longtest8_4.txt
-rw-rw-r-- 1 exet4487  3.2M Sep 20 17:28  longtest8_3.txt
-rw-rw-r-- 1 exet4487  3.1M Sep 20 18:04  longtest8_5.txt
-rw-rw-r-- 1 exet4487   25M Sep 23 04:39  Crab64080opt1_4.txt
-rw-rw-r-- 1 exet4487  3.7M Sep 24 10:25  Crab64080opt2_3.txt
-rw-rw-r-- 1 exet4487  3.9M Sep 24 12:17  Crab64080opt1_5.txt
-rw-rw-r-- 1 exet4487  4.1M Sep 24 12:17  Crab64080opt1_3.txt
-rw-rw-r-- 1 exet4487  4.1M Sep 24 12:17  Crab64080opt1_1.txt
-rw-rw-r-- 1 exet4487  4.0M Sep 24 12:17  Crab64080opt1_2.txt
-rw-rw-r-- 1 exet4487   11K Sep 24 12:17  Crab64080opt2_5.txt
-rw-rw-r-- 1 exet4487   12K Sep 24 12:17  Crab64080opt2_2.txt
-rw-rw-r-- 1 exet4487  3.4M Sep 24 12:17  Crab64080opt2_4.txt
-rw-rw-r-- 1 exet4487   13K Sep 24 12:17  Crab64080opt2_1.txt
-rw-rw-r-- 1 exet4487   52K Oct  3 17:11  Crab64080opt3_1.txt
-rw-rw-r-- 1 exet4487   52K Oct  3 17:11  Crab64080opt3_2.txt
-rw-rw-r-- 1 exet4487   52K Oct  3 17:11  Crab64080opt3_3.txt
-rw-rw-r-- 1 exet4487   52K Oct  3 17:11  Crab64080opt3_4.txt
-rw-rw-r-- 1 exet4487   53K Oct  3 17:11  Crab64080opt3_5.txt
-rw-rw-r-- 1 exet4487  517K Oct  4 10:56  Crab64080pointopt3_3.txt
-rwxrwxr-x 1 exet4487   998 Oct  6 09:04  submitjobs.sh
-rwxrwxr-x 1 exet4487  1.2K Oct 11 13:21 '#submitjobs.sh#'
-rw-rw-r-- 1 exet4487  1.6K Oct 11 13:44  testlaunch.sh.sh
-rw-rw-r-- 1 exet4487  3.4M Oct 11 13:49  Crab64080pointopt3_4.txt
-rw-rw-r-- 1 exet4487   33M Oct 11 18:54  screenlog.0
-rw-rw-r-- 1 exet4487  5.9M Oct 11 19:47  Crab64080pointopt3_1.txt
-rw-rw-r-- 1 exet4487  5.5M Oct 11 19:47  Crab64080pointopt3_5.txt
-rw-rw-r-- 1 exet4487  5.7M Oct 11 19:47  Crab64080pointopt3_2.txt
[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m ./testhead.sh Crab64080pointopt4
[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m q
JobNum    Status    Name    Job Name    Cores used/reserved    GB    IO (r/w mbps)    Runtime/Q time    Comment    Nodes List
--------  --------  ------  ----------  ---------------------  ----  ---------------  ----------------  ---------  ------------

╒═══════════════════════╤══════════╤═════════════╤══════════╤══════════╤═══════════╤═════════════╕
│ cores free in queue   │ NORMAL   │ BLACKHOLE   │ PLANET   │ CMB      │ BERG      │ GPULONG     │
╞═══════════════════════╪══════════╪═════════════╪══════════╪══════════╪═══════════╪═════════════╡
│                       │ 40 / 40  │ 48 / 80     │ 60 / 96  │ 88 / 488 │ 234 / 420 │ 4 / 4 nodes │
╘═══════════════════════╧══════════╧═════════════╧══════════╧══════════╧═══════════╧═════════════╛
You can use the command "n" ("n -t" for text-only) to list cores/GB availability on the compute nodes.
[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m cd [K[K[Kcd ../getout_glamdring/[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kwatch -n0.1 ls -trghl ../getout_glamdring/
[?1049h[22;0;0t[1;99r(B[m[4l[?7h[H[2JEvery 0.1s: ls -trghl ../getout_glamdring/[1;313Hglamdring: Sun Oct 11 19:49:39 2020[3;1Htotal 249K[4d-rw-rw-r-- 1 exet4487   98 Jul 22 12:45 README.md[5d-rw-rw-r-- 1 exet4487  16K Jul 28 10:30 net_utils.py[6ddrwxrwxr-x 2 exet4487    5 Aug  5 12:24 submit[7d-rw-rw-r-- 1 exet4487 7.1K Sep 28 11:56 graphtrain.py~[8d-rw-rw-r-- 1 exet4487 7.8K Sep 28 12:06 graphtrain.py[9d-rw-rw-r-- 1 exet4487  15K Oct  3 17:15 temp_model.py[10ddrwxrwxr-x 2 exet4487    3 Oct  3 17:15 __pycache__[11d-rw-rw-r-- 1 exet4487 1.4K Oct  6 09:49 best_model.py[12d-rw-rw-r-- 1 exet4487  14K Oct 11 19:48 hypertrain.py[13d-rw-rw-r-- 1 exet4487 508K Oct 11 19:49 screenlog.0[99;347H[1;341H40[99;347H[1;342H1[99;347H2020-10-11 19:49:41.924904: I tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcudart.so.10.1
[1;342H2[99;347H[1;342H3[99;347H[1;342H4[99;347H[1;342H5[99;347H[1;342H6[99;347H[1;342H7[99;347H[1;342H8[13;25H9[99;347H[1;342H9[99;347H[1;341H50[99;347H[1;342H1[99;347H[1;342H2[99;347H[1;342H3[99;347H[1;342H4[99;347H[1;342H5[99;347H[1;342H6[99;347H[1;342H7[99;347H[1;342H8[99;347H[13;24H10[99;347H[1;342H9[99;347H[1;338H50:00[99;347H[1;342H1[99;347H[1;342H2[99;347H[1;342H3[99;347H[1;342H4[99;347H[1;342H5[99;347H[1;342H6[99;347H[1;342H7[99;347H[1;342H8[99;347H[13;38H50[99;347H[9d[2M[12d-rw-rw-r-- 1 exet4487  15K Oct 11 19:50 temp_model.py[13ddrwxrwxr-x 2 exet4487    3 Oct 11 19:50 __pycache__[99;347H[1;342H9[99;347H[1;341H10[99;347H[1;342H1[99;347H[1;342H2[99;347H[1;342H3[99;347H[1;342H4[99;347H[1;342H5[99;347H[1;342H6[99;347H[1;342H7[99;347H[3;8H61[99;347H[1;342H8[99;347H[11;23H 15[11;41Htemp_model.py[12ddrwxrwxr-x 2[12;24H  3[12;41H__pycache__  [13d-rw-rw-r-- 1[13;23H510K[13;41Hscreenlog.0[99;347H[1;342H9[99;347H[1;341H20[99;347H[1;342H1[99;347H[1;342H2[99;347H[1;342H3[99;347H[1;342H4[99;347H[1;342H5[99;347H[1;342H6[99;347H[1;342H7[99;347H[1;342H8[99;347H[1;342H9[99;347H[1;341H30[99;347H[1;342H1[99;347H[1;342H2[99;347H[1;342H3[99;347H[1;342H4[99;347H[1;342H5[99;347H[1;342H6[99;347H[1;342H7[99;347H[1;342H8[99;347H[13;25H1[99;347H[1;342H9[99;347H[1;341H40[99;347H[1;342H1[99;347H[99;1H[?1049l[23;0;0t[?1l>[1;34m[exet4487@(NEW) glamdring:[0;37mlaunchpad[1;34m]$[0m cd ../getout_glamdring/
[1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m ls -trghl
total 261K
-rw-rw-r-- 1 exet4487   98 Jul 22 12:45 README.md
-rw-rw-r-- 1 exet4487  16K Jul 28 10:30 net_utils.py
drwxrwxr-x 2 exet4487    5 Aug  5 12:24 submit
-rw-rw-r-- 1 exet4487 7.1K Sep 28 11:56 graphtrain.py~
-rw-rw-r-- 1 exet4487 7.8K Sep 28 12:06 graphtrain.py
-rw-rw-r-- 1 exet4487 1.4K Oct  6 09:49 best_model.py
-rw-rw-r-- 1 exet4487  14K Oct 11 19:48 hypertrain.py
-rw-rw-r-- 1 exet4487  15K Oct 11 19:50 temp_model.py
drwxrwxr-x 2 exet4487    3 Oct 11 19:50 __pycache__
-rw-rw-r-- 1 exet4487 511K Oct 11 19:50 screenlog.0
[1;34m[exet4487@(NEW) glamdring:[0;37mgetout_glamdring[1;34m]$[0m cd ../ligs[K[K[Kogs
[1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m ls -trhgl
total 1.7M
-rw-rw-r-- 1 exet4487  50K Jul 30 17:38 hyperasglamdringtest8log.txt
-rw-rw-r-- 1 exet4487  26K Jul 31 12:37 hypertrain8v2.txt
-rw-rw-r-- 1 exet4487    0 Jul 31 17:11 hypertrain3.txt
-rw-rw-r-- 1 exet4487  27K Jul 31 17:29 hypertrain8v3.txt
-rw-rw-r-- 1 exet4487  180 Aug 23 22:42 stresstest1_log.txt
-rw-rw-r-- 1 exet4487  174 Aug 23 22:49 _log.txt
-rw-rw-r-- 1 exet4487  174 Aug 23 22:49 1_log.txt
-rw-rw-r-- 1 exet4487  14K Aug 23 22:52 stresstest2_log.txt
-rw-rw-r-- 1 exet4487    0 Aug 23 22:52 stresstest3_log.txt
-rw-rw-r-- 1 exet4487  14K Aug 23 22:54 stresstest4_log.txt
-rw-rw-r-- 1 exet4487  18K Aug 25 12:37 screentest5_log.txt
-rw-rw-r-- 1 exet4487  18K Aug 29 06:37 crashtest1_log.txt
-rw-rw-r-- 1 exet4487  16K Sep  1 09:21 crashtest2_log.txt
-rw-rw-r-- 1 exet4487  18K Sep  2 21:07 crashtest3_log.txt
-rw-rw-r-- 1 exet4487  19K Sep  5 04:20 crashtest4_log.txt
-rw-rw-r-- 1 exet4487  44K Sep  6 19:55 crashtest5_log.txt
-rw-rw-r-- 1 exet4487  44K Sep  9 03:49 crashtest6_log.txt
-rw-rw-r-- 1 exet4487  15K Sep  9 14:48 crashtest7_log.txt
-rw-rw-r-- 1 exet4487  14K Sep  9 18:02 crashtest8_log.txt
-rw-rw-r-- 1 exet4487  14K Sep 10 09:48 longtest1_log.txt
-rw-rw-r-- 1 exet4487  14K Sep 10 09:53 longtest2_log.txt
-rw-rw-r-- 1 exet4487  14K Sep 10 10:12 longtest5_log.txt
-rw-rw-r-- 1 exet4487  14K Sep 10 10:21 screentest6_log.txt
-rw-rw-r-- 1 exet4487  26K Sep 14 10:19 longtest7_log.txt
-rw-rw-r-- 1 exet4487 158K Sep 20 17:56 longtest8_log.txt
-rw-rw-r-- 1 exet4487  38K Sep 24 09:42 Crab64080opt1_log.txt
-rw-rw-r-- 1 exet4487  16K Sep 24 10:19 Crab64080opt2_log.txt
-rw-rw-r-- 1 exet4487 5.1M Oct  3 11:35 screenlog.0
-rw-rw-r-- 1 exet4487  16K Oct  3 17:02 Crab64080opt3_log.txt
-rw-rw-r-- 1 exet4487  43K Oct 11 18:54 Crab64080pointopt3_log.txt
-rw-rw-r-- 1 exet4487  16K Oct 11 19:50 Crab64080pointopt4_log.txt
[1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m cat Crab64080pointopt3_log.txt 
>>> Imports:
#coding=utf-8

try:
    import os
except:
    pass

try:
    import matplotlib as mpl
except:
    pass

try:
    import numpy as np
except:
    pass

try:
    import h5py
except:
    pass

try:
    import keras
except:
    pass

try:
    import tempfile
except:
    pass

try:
    import sys
except:
    pass

try:
    import tensorflow as tf
except:
    pass

try:
    from tensorflow.compat.v1 import ConfigProto
except:
    pass

try:
    from tensorflow.compat.v1 import Session
except:
    pass

try:
    from keras.utils import HDF5Matrix
except:
    pass

try:
    from keras.models import Sequential
except:
    pass

try:
    from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout, Conv2D, ConvLSTM2D, MaxPooling2D, BatchNormalization, Conv3D, GlobalAveragePooling3D
except:
    pass

try:
    from keras.layers.normalization import BatchNormalization
except:
    pass

try:
    from keras.layers.convolutional import AveragePooling2D
except:
    pass

try:
    from keras.layers.core import Activation
except:
    pass

try:
    from keras.layers.core import Dropout
except:
    pass

try:
    from keras.layers import Input, GaussianNoise
except:
    pass

try:
    from keras.models import Model
except:
    pass

try:
    from keras.layers import concatenate
except:
    pass

try:
    import tensorflow.python.keras.backend as K
except:
    pass

try:
    from keras.utils import plot_model
except:
    pass

try:
    import matplotlib.pyplot as plt
except:
    pass

try:
    import glob
except:
    pass

try:
    from sklearn.preprocessing import StandardScaler
except:
    pass

try:
    from keras.callbacks import EarlyStopping
except:
    pass

try:
    from keras import regularizers
except:
    pass

try:
    from mpl_toolkits.axes_grid1 import make_axes_locatable
except:
    pass

try:
    import numpy.ma as ma
except:
    pass

try:
    from matplotlib.pyplot import cm
except:
    pass

try:
    from sklearn.preprocessing import scale
except:
    pass

try:
    from mpl_toolkits.axes_grid1 import make_axes_locatable
except:
    pass

try:
    import numpy.ma as ma
except:
    pass

try:
    from matplotlib.pyplot import cm
except:
    pass

try:
    from mlxtend.evaluate import confusion_matrix
except:
    pass

try:
    from mlxtend.plotting import plot_confusion_matrix
except:
    pass

try:
    from keras.metrics import binary_accuracy
except:
    pass

try:
    from sklearn.metrics import roc_curve, auc
except:
    pass

try:
    import hyperas
except:
    pass

try:
    from hyperas import optim
except:
    pass

try:
    from hyperas.distributions import choice, uniform
except:
    pass

try:
    from hyperopt import Trials, STATUS_OK, tpe, mongoexp
except:
    pass

try:
    import pickle
except:
    pass

try:
    import tempfile
except:
    pass

try:
    from os import path
except:
    pass

>>> Hyperas search space:

def get_space():
    return {
        'filters': hp.choice('filters', [10,20,30,40,50,60]),
        'kernel_size': hp.choice('kernel_size', [(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)]),
        'l2': hp.uniform('l2', 0,1),
        'l2_1': hp.uniform('l2_1', 0,1),
        'l2_2': hp.uniform('l2_2', 0,1),
        'filters_1': hp.choice('filters_1', [10,20,30,40,50,60]),
        'kernel_size_1': hp.choice('kernel_size_1', [(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)]),
        'l2_3': hp.uniform('l2_3', 0,1),
        'l2_4': hp.uniform('l2_4', 0,1),
        'l2_5': hp.uniform('l2_5', 0,1),
        'filters_2': hp.choice('filters_2', [10,20,30,40,50,60]),
        'kernel_size_2': hp.choice('kernel_size_2', [(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)]),
        'l2_6': hp.uniform('l2_6', 0,1),
        'l2_7': hp.uniform('l2_7', 0,1),
        'l2_8': hp.uniform('l2_8', 0,1),
        'filters_3': hp.choice('filters_3', [10,20,30,40,50,60]),
        'kernel_size_3': hp.choice('kernel_size_3', [(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)]),
        'l2_9': hp.uniform('l2_9', 0,1),
        'l2_10': hp.uniform('l2_10', 0,1),
        'l2_11': hp.uniform('l2_11', 0,1),
        'l2_12': hp.choice('l2_12', ['four','five','six']),
        'filters_4': hp.choice('filters_4', [10,20,30,40,50,60]),
        'kernel_size_4': hp.choice('kernel_size_4', [(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)]),
        'l2_13': hp.uniform('l2_13', 0,1),
        'l2_14': hp.uniform('l2_14', 0,1),
        'l2_15': hp.uniform('l2_15', 0,1),
        'l2_16': hp.choice('l2_16', ['four','five','six']),
        'filters_5': hp.choice('filters_5', [10,20,30,40,50,60]),
        'kernel_size_5': hp.choice('kernel_size_5', [(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)]),
        'l2_17': hp.uniform('l2_17', 0,1),
        'l2_18': hp.uniform('l2_18', 0,1),
        'l2_19': hp.uniform('l2_19', 0,1),
        'filters_6': hp.choice('filters_6', [10,20,30,40,50,60]),
        'kernel_size_6': hp.choice('kernel_size_6', [(2,2),(3, 3),(4,4),(5,5),(6,6),(7,7)]),
        'l2_20': hp.uniform('l2_20', 0,1),
        'l2_21': hp.uniform('l2_21', 0,1),
        'l2_22': hp.uniform('l2_22', 0,1),
        'Dense': hp.choice('Dense', [10,50,100,200]),
    }

>>> Data
   1: 
   2: def hardcode_valid():
   3:     hexmethod='oversampling'
   4:     onlyfiles = sorted(glob.glob('/mnt/extraspace/exet4487/Crab64080/*.hdf5'))
   5:     batch_size=50
   6:     """ Generates training/test sequences on demand
   7:     """
   8:     
   9:     nofiles = 0
  10:     i = 0  # No. events loaded in total
  11:     filelist = onlyfiles[-10:]
  12:     global validevents
  13:     global valid2
  14:     validevents=[]
  15:     valid2=[]
  16:     for file in filelist:
  17:         inputdata = h5py.File(file, 'r')
  18:         validevents = validevents + inputdata['isGamma'][:].tolist()
  19:         valid2 = valid2 + inputdata['id'][:].tolist()
  20:         inputdata.close()
  21: 
  22:     while True:
  23:         for file in filelist:
  24:             try:
  25:                 inputdata = h5py.File(file, 'r')
  26:             except OSError:
  27:                 continue
  28:             trainarr = np.asarray(inputdata[hexmethod][:, :, :, :])
  29:             labelsarr = np.asarray(inputdata['isGamma'][:])
  30:             idarr = np.asarray(inputdata['id'][:])
  31:             nofiles = nofiles + 1
  32:             inputdata.close()
  33:             notrigs=np.shape(trainarr)[0]
  34:             
  35:             for x in np.arange(np.shape(trainarr)[0]):
  36:                 chargevals = []
  37:                 for y in np.arange(4):
  38:                     chargevals.append(np.sum(trainarr[x,y,:,:]))
  39:                     
  40:                 chargevals = np.argsort(chargevals)
  41:                 chargevals = np.flip(chargevals,axis=0) #Flip to descending order.
  42:                 trainarr[x, :, :, :] = trainarr[x, chargevals, :, :]
  43:             training_sample_count = len(trainarr)
  44:             batches = int(training_sample_count / batch_size)
  45:             remainder_samples = training_sample_count % batch_size
  46:             i = i + 1000
  47:             countarr = np.arange(0, len(labelsarr))
  48:             #trainarr = (trainarr-np.amin(trainarr,axis=0))/(np.amax(trainarr,axis=0)-np.amin(trainarr,axis=0))
  49:             if remainder_samples:
  50:                 batches = batches + 1
  51:                     # generate batches of samples
  52:             for idx in list(range(0, batches)):
  53:                 if idx == batches - 1:
  54:                     batch_idxs = countarr[idx * batch_size:]
  55:                 else:
  56:                     batch_idxs = countarr[idx *
  57:                                           batch_size:idx *
  58:                                           batch_size +
  59:                                           batch_size]
  60:                 X = trainarr[batch_idxs]
  61:                 X = np.nan_to_num(X)
  62:                 Y = keras.utils.to_categorical(
  63:                     labelsarr[batch_idxs], num_classes=2)
  64:                 yield (np.array(X), np.array(Y))
  65: 
  66: def hardcode_train():
  67:     hexmethod='oversampling'
  68:     onlyfiles = sorted(glob.glob('/mnt/extraspace/exet4487/Crab64080/*.hdf5'))
  69:     batch_size=50
  70:     """ Generates training/test sequences on demand
  71:     """
  72:     
  73:     nofiles = 0
  74:     i = 0  # No. events loaded in total
  75:     global trainevents
  76:     global train2
  77:     trainevents=[]
  78:     train2=[]
  79:     filelist = onlyfiles[:20]
  80:     for file in filelist:
  81:         try:
  82:             inputdata = h5py.File(file, 'r')
  83:         except OSError:
  84:             continue
  85:         trainevents = trainevents + inputdata['isGamma'][:].tolist()
  86:         train2 = train2 + inputdata['id'][:].tolist()
  87:         inputdata.close()
  88: 
  89:     while True:
  90:         for file in filelist:
  91:             try:
  92:                 inputdata = h5py.File(file, 'r')
  93:             except OSError:
  94:                 continue
  95:             trainarr = np.asarray(inputdata[hexmethod][:, :, :, :])
  96:             labelsarr = np.asarray(inputdata['isGamma'][:])
  97:             idarr = np.asarray(inputdata['id'][:])
  98:             nofiles = nofiles + 1
  99:             inputdata.close()
 100:             notrigs=np.shape(trainarr)[0]
 101:             
 102:             for x in np.arange(np.shape(trainarr)[0]):
 103:                 chargevals = []
 104:                 for y in np.arange(4):
 105:                     chargevals.append(np.sum(trainarr[x,y,:,:]))
 106:                     
 107:                 chargevals = np.argsort(chargevals)
 108:                 chargevals = np.flip(chargevals,axis=0) #Flip to descending order.
 109:                 trainarr[x, :, :, :] = trainarr[x, chargevals, :, :]
 110:                 
 111:             training_sample_count = len(trainarr)
 112:             batches = int(training_sample_count / batch_size)
 113:             remainder_samples = training_sample_count % batch_size
 114:             i = i + 1000
 115:             countarr = np.arange(0, len(labelsarr))
 116:                 
 117:             #            trainarr = (trainarr-np.amin(trainarr,axis=0))/(np.amax(trainarr,axis=0)-np.amin(trainarr,axis=0))
 118:             if remainder_samples:
 119:                 batches = batches + 1
 120:                     
 121:             # generate batches of samples
 122:             for idx in list(range(0, batches)):
 123:                 if idx == batches - 1:
 124:                     batch_idxs = countarr[idx * batch_size:]
 125:                 else:
 126:                     batch_idxs = countarr[idx *
 127:                                           batch_size:idx *
 128:                                           batch_size +
 129:                                           batch_size]
 130:                 X = trainarr[batch_idxs]
 131:                 X = np.nan_to_num(X)
 132:                 Y = keras.utils.to_categorical(
 133:                     labelsarr[batch_idxs], num_classes=2)
 134:                 yield (np.array(X), np.array(Y))
 135: 
 136: 
 137: train_generator=hardcode_train()
 138: validation_generator=hardcode_valid()
 139: 
 140: 
 141: 
>>> Resulting replaced keras model:

   1: def keras_fmin_fnct(space):
   2: 
   3:     inpshape=(None,54,54,1)
   4:     strategy=tf.distribute.MirroredStrategy()
   5:     print('Number of devices: {}'.format(strategy.num_replicas_in_sync))
   6:     with strategy.scope():
   7:         model = Sequential()
   8:         model.add(ConvLSTM2D(filters=space['filters'], kernel_size=space['kernel_size'],
   9:                              input_shape=inpshape,
  10:                              padding='same', return_sequences=True,kernel_regularizer=keras.regularizers.l2(space['l2']),dropout=space['l2_1'],recurrent_dropout=space['l2_2']))
  11:         model.add(BatchNormalization())
  12:         
  13:         model.add(ConvLSTM2D(filters=space['filters_1'], kernel_size=space['kernel_size_1'],
  14:                              padding='same', return_sequences=True,kernel_regularizer=keras.regularizers.l2(space['l2_3']),dropout=space['l2_4'],recurrent_dropout=space['l2_5']))
  15:         model.add(BatchNormalization())
  16:         
  17:         model.add(ConvLSTM2D(filters=space['filters_2'], kernel_size=space['kernel_size_2'],
  18:                              padding='same', return_sequences=True,kernel_regularizer=keras.regularizers.l2(space['l2_6']),dropout=space['l2_7'],recurrent_dropout=space['l2_8']))
  19:         model.add(BatchNormalization())
  20:         model.add(ConvLSTM2D(filters=space['filters_3'], kernel_size=space['kernel_size_3'],
  21:                              padding='same', return_sequences=True,kernel_regularizer=keras.regularizers.l2(space['l2_9']),dropout=space['l2_10'],recurrent_dropout=space['l2_11']))
  22:         model.add(BatchNormalization())
  23:         if space['l2_12']=='five':
  24:             model.add(ConvLSTM2D(filters=space['filters_4'], kernel_size=space['kernel_size_4'],
  25:                                  padding='same', return_sequences=True,kernel_regularizer=keras.regularizers.l2(space['l2_13']),dropout=space['l2_14'],recurrent_dropout=space['l2_15']))
  26:             model.add(BatchNormalization())
  27:         if space['l2_16']=='six':
  28:             model.add(ConvLSTM2D(filters=space['filters_5'], kernel_size=space['kernel_size_5'],
  29:                                  padding='same', return_sequences=True,kernel_regularizer=keras.regularizers.l2(space['l2_17']),dropout=space['l2_18'],recurrent_dropout=space['l2_19']))
  30:             model.add(BatchNormalization())
  31:             model.add(ConvLSTM2D(filters=space['filters_6'], kernel_size=space['kernel_size_6'],
  32:                                  padding='same', return_sequences=True,kernel_regularizer=keras.regularizers.l2(space['l2_20']),dropout=space['l2_21'],recurrent_dropout=space['l2_22']))
  33:             model.add(BatchNormalization())
  34:         model.add(GlobalAveragePooling3D())
  35:         model.add(Dense(space['Dense'],activation='relu'))
  36:         model.add(Dense(2, activation='softmax'))
  37:         # Compile the model
  38:         model.compile(loss='binary_crossentropy',
  39:                       optimizer='Adam',
  40:                       metrics=['binary_accuracy'])
  41:         '''early_stop = EarlyStopping(
  42:         monitor='val_loss',
  43:         min_delta=0,
  44:         patience=10,
  45:         verbose=1,
  46:         mode='auto')'''
  47:     
  48:     # Code for ensuring no contamination between training and test data.
  49:     lentrain=19574*2
  50:     lentruth=19600
  51: # Train the network
  52:     history = model.fit(
  53:         train_generator,
  54:         steps_per_epoch=lentrain/50.0,
  55:         epochs=30,
  56:         verbose=0,
  57:         workers=0,
  58:         use_multiprocessing=False,
  59:         shuffle=True,validation_data=validation_generator,validation_steps=lentruth/50.0)
  60:     score, acc=model.evaluate(validation_generator,steps=lentruth/50.0)
  61:     modelnumber=next(tempfile._get_candidate_names())
  62:     modelcode=np.random.randint(0,1e10)
  63:     out = {'loss': -acc,
  64:         'score': score,
  65:         'modelno':str(modelnumber)+str(modelcode),
  66:         'status': STATUS_OK,
  67:         'model_params': model.summary()
  68:     }
  69:     model.save('/users/exet4487/hypermodels/'+str(modelnumber)+str(modelcode)+'.h5')
  70:     # optionally store a dump of your model here so you can get it from the database later                                                                                                   
  71:     temp_name = tempfile.gettempdir()+'/'+modelnumber + '.h5'
  72:     model.save(temp_name)
  73:     #with open(temp_name, 'rb') as infile:
  74:     #model_bytes = infile.read()
  75:     #out['model_serial'] = model_bytes
  76:     return out
  77: 
  0%|          | 0/350 [00:00<?, ?trial/s, best loss=?]  0%|          | 1/350 [2:42:05<942:48:12, 9725.19s/trial, best loss: -0.641614556312561]  1%|          | 2/350 [2:57:06<684:12:42, 7078.05s/trial, best loss: -0.7951562404632568]  1%|          | 3/350 [3:12:03<503:30:56, 5223.79s/trial, best loss: -0.7951562404632568]  1%|          | 4/350 [3:22:59<370:21:48, 3853.49s/trial, best loss: -0.7951562404632568]  1%|▏         | 5/350 [3:26:46<265:00:20, 2765.28s/trial, best loss: -0.8004687428474426]  2%|▏         | 6/350 [5:17:37<375:38:34, 3931.15s/trial, best loss: -0.8004687428474426]  2%|▏         | 7/350 [5:38:42<298:21:05, 3131.39s/trial, best loss: -0.8004687428474426]  2%|▏         | 8/350 [6:04:53<253:00:01, 2663.16s/trial, best loss: -0.8004687428474426]  3%|▎         | 9/350 [6:46:01<246:43:20, 2604.69s/trial, best loss: -0.8004687428474426]  3%|▎         | 10/350 [7:50:57<282:34:01, 2991.89s/trial, best loss: -0.8004687428474426]  3%|▎         | 11/350 [8:11:59<232:52:21, 2472.98s/trial, best loss: -0.8004687428474426]  3%|▎         | 12/350 [8:20:53<177:35:30, 1891.51s/trial, best loss: -0.8004687428474426]  4%|▎         | 13/350 [9:32:35<244:44:55, 2614.53s/trial, best loss: -0.8004687428474426]  4%|▍         | 14/350 [9:43:54<189:48:45, 2033.71s/trial, best loss: -0.8004687428474426]  4%|▍         | 15/350 [10:16:20<186:49:27, 2007.66s/trial, best loss: -0.8105208277702332]  5%|▍         | 16/350 [11:19:49<236:23:13, 2547.88s/trial, best loss: -0.8105208277702332]  5%|▍         | 17/350 [11:25:13<173:57:42, 1880.67s/trial, best loss: -0.8105208277702332]  5%|▌         | 18/350 [11:38:10<142:54:24, 1549.59s/trial, best loss: -0.8105208277702332]  5%|▌         | 19/350 [12:10:00<152:25:01, 1657.71s/trial, best loss: -0.8105208277702332]  6%|▌         | 20/350 [12:35:04<147:43:45, 1611.59s/trial, best loss: -0.8105208277702332]  6%|▌         | 21/350 [14:19:12<274:24:48, 3002.70s/trial, best loss: -0.8105208277702332]  6%|▋         | 22/350 [14:29:22<208:09:29, 2284.66s/trial, best loss: -0.8105208277702332]  7%|▋         | 23/350 [14:36:14<156:30:00, 1722.94s/trial, best loss: -0.8105208277702332]  7%|▋         | 24/350 [15:52:25<233:23:45, 2577.38s/trial, best loss: -0.8105208277702332]  7%|▋         | 25/350 [17:09:55<288:49:12, 3199.24s/trial, best loss: -0.8105208277702332]  7%|▋         | 26/350 [17:19:48<217:33:08, 2417.25s/trial, best loss: -0.8105208277702332]  8%|▊         | 27/350 [17:39:59<184:25:17, 2055.47s/trial, best loss: -0.8105208277702332]  8%|▊         | 28/350 [18:12:35<181:10:02, 2025.47s/trial, best loss: -0.8105208277702332]  8%|▊         | 29/350 [18:47:12<181:59:19, 2040.99s/trial, best loss: -0.8105208277702332]  9%|▊         | 30/350 [19:11:58<166:37:10, 1874.47s/trial, best loss: -0.8105208277702332]  9%|▉         | 31/350 [19:43:02<165:49:13, 1871.33s/trial, best loss: -0.8105208277702332]  9%|▉         | 32/350 [21:30:02<285:51:37, 3236.16s/trial, best loss: -0.8105208277702332]  9%|▉         | 33/350 [21:41:05<216:57:52, 2463.95s/trial, best loss: -0.8105208277702332] 10%|▉         | 34/350 [22:00:14<181:39:11, 2069.47s/trial, best loss: -0.8105208277702332] 10%|█         | 35/350 [23:38:38<281:45:08, 3220.03s/trial, best loss: -0.8105208277702332] 10%|█         | 36/350 [24:09:51<245:36:22, 2815.87s/trial, best loss: -0.8105208277702332] 11%|█         | 37/350 [24:11:17<173:36:33, 1996.78s/trial, best loss: -0.8105208277702332] 11%|█         | 38/350 [24:49:39<180:59:55, 2088.45s/trial, best loss: -0.8105208277702332] 11%|█         | 39/350 [26:02:40<239:49:27, 2776.10s/trial, best loss: -0.8105208277702332] 11%|█▏        | 40/350 [26:27:40<206:06:31, 2393.52s/trial, best loss: -0.8105208277702332] 12%|█▏        | 41/350 [27:16:55<219:52:45, 2561.70s/trial, best loss: -0.8105208277702332] 12%|█▏        | 42/350 [28:24:39<257:44:10, 3012.50s/trial, best loss: -0.8105208277702332] 12%|█▏        | 43/350 [28:32:26<191:46:58, 2248.92s/trial, best loss: -0.8236979246139526] 13%|█▎        | 44/350 [30:03:28<273:06:01, 3212.95s/trial, best loss: -0.8236979246139526] 13%|█▎        | 45/350 [30:14:34<207:27:23, 2448.67s/trial, best loss: -0.8236979246139526] 13%|█▎        | 46/350 [31:20:50<245:28:26, 2906.93s/trial, best loss: -0.8236979246139526] 13%|█▎        | 47/350 [32:36:15<285:31:07, 3392.30s/trial, best loss: -0.8236979246139526] 14%|█▎        | 48/350 [33:23:12<270:06:25, 3219.82s/trial, best loss: -0.8236979246139526] 14%|█▍        | 49/350 [33:28:37<196:36:22, 2351.44s/trial, best loss: -0.8236979246139526] 14%|█▍        | 50/350 [34:10:37<200:09:50, 2401.97s/trial, best loss: -0.8236979246139526] 15%|█▍        | 51/350 [36:35:38<356:26:28, 4291.60s/trial, best loss: -0.8236979246139526] 15%|█▍        | 52/350 [36:52:29<273:46:49, 3307.42s/trial, best loss: -0.8236979246139526] 15%|█▌        | 53/350 [37:14:24<223:33:06, 2709.72s/trial, best loss: -0.8236979246139526] 15%|█▌        | 54/350 [38:29:05<266:29:13, 3241.06s/trial, best loss: -0.8236979246139526] 16%|█▌        | 55/350 [38:40:48<203:11:18, 2479.59s/trial, best loss: -0.8236979246139526] 16%|█▌        | 56/350 [39:03:21<174:54:31, 2141.74s/trial, best loss: -0.8236979246139526] 16%|█▋        | 57/350 [40:50:07<278:25:38, 3420.95s/trial, best loss: -0.8236979246139526] 17%|█▋        | 58/350 [41:12:17<226:36:32, 2793.81s/trial, best loss: -0.8236979246139526] 17%|█▋        | 59/350 [41:38:16<195:52:03, 2423.11s/trial, best loss: -0.8236979246139526] 17%|█▋        | 60/350 [42:01:00<169:35:56, 2105.37s/trial, best loss: -0.8236979246139526] 17%|█▋        | 61/350 [43:47:31<272:14:41, 3391.28s/trial, best loss: -0.8236979246139526] 18%|█▊        | 62/350 [44:14:00<228:02:26, 2850.51s/trial, best loss: -0.8236979246139526] 18%|█▊        | 63/350 [44:36:55<191:57:22, 2407.81s/trial, best loss: -0.8236979246139526] 18%|█▊        | 64/350 [44:45:06<145:36:03, 1832.74s/trial, best loss: -0.8236979246139526] 19%|█▊        | 65/350 [45:55:12<201:27:25, 2544.72s/trial, best loss: -0.8236979246139526] 19%|█▉        | 66/350 [46:24:22<181:56:50, 2306.38s/trial, best loss: -0.8236979246139526] 19%|█▉        | 67/350 [47:15:15<198:55:23, 2530.47s/trial, best loss: -0.8236979246139526] 19%|█▉        | 68/350 [47:36:15<168:21:15, 2149.20s/trial, best loss: -0.8236979246139526] 20%|█▉        | 69/350 [48:23:10<183:20:17, 2348.82s/trial, best loss: -0.8236979246139526] 20%|██        | 70/350 [48:54:14<171:22:57, 2203.49s/trial, best loss: -0.8236979246139526] 20%|██        | 71/350 [49:59:23<210:24:59, 2715.05s/trial, best loss: -0.8236979246139526] 21%|██        | 72/350 [50:42:46<207:04:26, 2681.53s/trial, best loss: -0.8236979246139526] 21%|██        | 73/350 [51:04:06<173:58:11, 2260.98s/trial, best loss: -0.8236979246139526] 21%|██        | 74/350 [53:24:03<314:28:27, 4101.84s/trial, best loss: -0.8236979246139526] 21%|██▏       | 75/350 [53:28:54<226:00:46, 2958.72s/trial, best loss: -0.8236979246139526] 22%|██▏       | 76/350 [54:13:13<218:21:06, 2868.85s/trial, best loss: -0.8236979246139526] 22%|██▏       | 77/350 [55:09:22<228:55:35, 3018.81s/trial, best loss: -0.8236979246139526] 22%|██▏       | 78/350 [56:01:28<230:30:10, 3050.77s/trial, best loss: -0.8236979246139526] 23%|██▎       | 79/350 [57:32:57<284:44:00, 3782.44s/trial, best loss: -0.8236979246139526] 23%|██▎       | 80/350 [57:56:04<229:46:49, 3063.74s/trial, best loss: -0.8236979246139526] 23%|██▎       | 81/350 [58:24:20<198:16:34, 2653.51s/trial, best loss: -0.8236979246139526] 23%|██▎       | 82/350 [60:33:02<310:43:21, 4173.89s/trial, best loss: -0.8236979246139526] 24%|██▎       | 83/350 [60:36:46<221:41:04, 2989.01s/trial, best loss: -0.8236979246139526] 24%|██▍       | 84/350 [61:22:25<215:18:48, 2914.02s/trial, best loss: -0.8236979246139526] 24%|██▍       | 85/350 [61:48:27<184:38:42, 2508.39s/trial, best loss: -0.8236979246139526] 25%|██▍       | 86/350 [62:34:29<189:31:53, 2584.52s/trial, best loss: -0.8236979246139526] 25%|██▍       | 87/350 [64:06:34<253:15:59, 3466.77s/trial, best loss: -0.8236979246139526] 25%|██▌       | 88/350 [64:11:17<182:46:52, 2511.50s/trial, best loss: -0.8364062309265137] 25%|██▌       | 89/350 [64:46:06<172:53:59, 2384.82s/trial, best loss: -0.8364062309265137] 26%|██▌       | 90/350 [66:24:51<248:56:21, 3446.85s/trial, best loss: -0.8364062309265137] 26%|██▌       | 91/350 [66:48:01<203:35:43, 2829.90s/trial, best loss: -0.8364062309265137] 26%|██▋       | 92/350 [66:54:22<150:08:49, 2095.08s/trial, best loss: -0.8364062309265137] 27%|██▋       | 93/350 [67:32:07<153:12:19, 2146.07s/trial, best loss: -0.8364062309265137] 27%|██▋       | 94/350 [68:47:31<203:19:52, 2859.35s/trial, best loss: -0.8364062309265137] 27%|██▋       | 95/350 [69:07:41<167:30:15, 2364.77s/trial, best loss: -0.8364062309265137] 27%|██▋       | 96/350 [70:22:34<211:53:04, 3003.09s/trial, best loss: -0.8364062309265137] 28%|██▊       | 97/350 [70:31:40<159:14:54, 2265.99s/trial, best loss: -0.8364062309265137] 28%|██▊       | 98/350 [70:34:52<115:03:53, 1643.78s/trial, best loss: -0.8364062309265137] 28%|██▊       | 99/350 [71:26:32<145:03:57, 2080.63s/trial, best loss: -0.8364062309265137] 29%|██▊       | 100/350 [73:13:20<234:38:23, 3378.81s/trial, best loss: -0.8364062309265137] 29%|██▉       | 101/350 [73:50:13<209:30:27, 3029.03s/trial, best loss: -0.8364062309265137] 29%|██▉       | 102/350 [74:43:29<212:07:12, 3079.16s/trial, best loss: -0.8364062309265137] 29%|██▉       | 103/350 [74:47:29<152:49:14, 2227.35s/trial, best loss: -0.8364062309265137] 30%|██▉       | 104/350 [75:34:03<163:49:50, 2397.52s/trial, best loss: -0.8364062309265137] 30%|███       | 105/350 [76:13:19<162:19:02, 2385.07s/trial, best loss: -0.8364062309265137] 30%|███       | 106/350 [77:26:51<202:52:05, 2993.14s/trial, best loss: -0.8364062309265137] 31%|███       | 107/350 [77:54:18<174:45:54, 2589.11s/trial, best loss: -0.8364062309265137] 31%|███       | 108/350 [78:35:04<171:09:33, 2546.17s/trial, best loss: -0.8364062309265137] 31%|███       | 109/350 [78:36:41<121:15:58, 1811.45s/trial, best loss: -0.8364062309265137] 31%|███▏      | 110/350 [79:54:01<177:20:00, 2660.00s/trial, best loss: -0.8364062309265137] 32%|███▏      | 111/350 [80:00:59<131:56:37, 1987.44s/trial, best loss: -0.8364062309265137] 32%|███▏      | 112/350 [80:38:20<136:26:00, 2063.70s/trial, best loss: -0.8364062309265137] 32%|███▏      | 113/350 [81:42:11<170:44:55, 2593.65s/trial, best loss: -0.8364062309265137] 33%|███▎      | 114/350 [82:22:38<166:45:42, 2543.82s/trial, best loss: -0.8364062309265137] 33%|███▎      | 115/350 [83:22:00<185:59:40, 2849.28s/trial, best loss: -0.8364062309265137] 33%|███▎      | 116/350 [83:56:40<170:12:19, 2618.55s/trial, best loss: -0.8364062309265137] 33%|███▎      | 117/350 [85:26:04<222:46:41, 3442.07s/trial, best loss: -0.8364062309265137] 34%|███▎      | 118/350 [86:09:56<206:09:22, 3198.98s/trial, best loss: -0.8364062309265137] 34%|███▍      | 119/350 [86:13:16<147:32:19, 2299.30s/trial, best loss: -0.8364062309265137] 34%|███▍      | 120/350 [88:42:39<274:38:02, 4298.62s/trial, best loss: -0.8364062309265137] 35%|███▍      | 121/350 [88:45:43<194:55:02, 3064.20s/trial, best loss: -0.8364062309265137] 35%|███▍      | 122/350 [89:05:43<158:37:53, 2504.71s/trial, best loss: -0.8364062309265137] 35%|███▌      | 123/350 [91:31:28<275:59:48, 4377.04s/trial, best loss: -0.8364062309265137] 35%|███▌      | 124/350 [91:44:28<207:02:14, 3297.94s/trial, best loss: -0.8364062309265137] 36%|███▌      | 125/350 [91:56:51<158:12:36, 2531.36s/trial, best loss: -0.8364062309265137] 36%|███▌      | 126/350 [92:13:20<128:42:38, 2068.57s/trial, best loss: -0.8364062309265137] 36%|███▋      | 127/350 [94:04:54<214:05:21, 3456.15s/trial, best loss: -0.8364062309265137] 37%|███▋      | 128/350 [94:25:49<172:24:32, 2795.82s/trial, best loss: -0.8364062309265137] 37%|███▋      | 129/350 [94:40:49<136:43:41, 2227.25s/trial, best loss: -0.8364062309265137] 37%|███▋      | 130/350 [96:01:04<183:33:04, 3003.57s/trial, best loss: -0.8364062309265137] 37%|███▋      | 131/350 [96:04:59<132:11:15, 2172.95s/trial, best loss: -0.8364062309265137] 38%|███▊      | 132/350 [96:39:18<129:30:55, 2138.78s/trial, best loss: -0.8364062309265137] 38%|███▊      | 133/350 [96:51:12<103:09:27, 1711.37s/trial, best loss: -0.8364062309265137] 38%|███▊      | 134/350 [98:54:01<204:31:09, 3408.65s/trial, best loss: -0.8364062309265137] 39%|███▊      | 135/350 [98:57:38<146:22:55, 2451.05s/trial, best loss: -0.8364062309265137] 39%|███▉      | 136/350 [99:38:01<145:12:05, 2442.64s/trial, best loss: -0.8364062309265137] 39%|███▉      | 137/350 [99:45:20<108:57:20, 1841.50s/trial, best loss: -0.8364062309265137] 39%|███▉      | 138/350 [101:32:33<189:33:21, 3218.88s/trial, best loss: -0.8364062309265137] 40%|███▉      | 139/350 [101:37:49<137:37:56, 2348.23s/trial, best loss: -0.8364062309265137] 40%|████      | 140/350 [102:04:36<124:00:04, 2125.74s/trial, best loss: -0.8364062309265137] 40%|████      | 141/350 [102:05:33<87:22:30, 1505.03s/trial, best loss: -0.8364062309265137]  41%|████      | 142/350 [103:50:40<170:12:04, 2945.79s/trial, best loss: -0.8364062309265137] 41%|████      | 143/350 [104:23:55<152:59:02, 2660.59s/trial, best loss: -0.8364062309265137] 41%|████      | 144/350 [104:29:04<111:52:04, 1954.98s/trial, best loss: -0.8364062309265137] 41%|████▏     | 145/350 [105:20:14<130:23:00, 2289.66s/trial, best loss: -0.8364062309265137] 42%|████▏     | 146/350 [106:08:54<140:27:51, 2478.78s/trial, best loss: -0.8364062309265137] 42%|████▏     | 147/350 [106:47:34<137:05:18, 2431.13s/trial, best loss: -0.8364062309265137] 42%|████▏     | 148/350 [106:56:34<104:33:56, 1863.55s/trial, best loss: -0.8364062309265137] 43%|████▎     | 149/350 [108:53:49<190:41:07, 3415.26s/trial, best loss: -0.8364062309265137] 43%|████▎     | 150/350 [109:12:38<151:37:45, 2729.33s/trial, best loss: -0.8364062309265137] 43%|████▎     | 151/350 [109:24:38<117:32:33, 2126.40s/trial, best loss: -0.8364062309265137] 43%|████▎     | 152/350 [109:45:42<102:43:47, 1867.81s/trial, best loss: -0.8364062309265137] 44%|████▎     | 153/350 [111:42:37<186:42:30, 3411.93s/trial, best loss: -0.8364062309265137] 44%|████▍     | 154/350 [112:25:13<171:46:46, 3155.14s/trial, best loss: -0.8364062309265137] 44%|████▍     | 155/350 [112:55:38<149:17:24, 2756.13s/trial, best loss: -0.8364062309265137] 45%|████▍     | 156/350 [113:05:12<113:14:47, 2101.48s/trial, best loss: -0.8364062309265137] 45%|████▍     | 157/350 [114:44:45<174:55:06, 3262.73s/trial, best loss: -0.8364062309265137] 45%|████▌     | 158/350 [115:09:27<145:32:06, 2728.78s/trial, best loss: -0.8364062309265137] 45%|████▌     | 159/350 [115:34:03<124:49:57, 2352.87s/trial, best loss: -0.8364062309265137] 46%|████▌     | 160/350 [116:40:50<150:21:39, 2848.94s/trial, best loss: -0.8364062309265137] 46%|████▌     | 161/350 [117:12:45<134:51:59, 2568.89s/trial, best loss: -0.8364062309265137] 46%|████▋     | 162/350 [117:27:04<107:22:10, 2056.01s/trial, best loss: -0.8364062309265137] 47%|████▋     | 163/350 [118:02:17<107:40:48, 2072.99s/trial, best loss: -0.8364062309265137] 47%|████▋     | 164/350 [119:42:16<167:57:34, 3250.83s/trial, best loss: -0.8364062309265137] 47%|████▋     | 165/350 [119:57:32<131:03:55, 2550.46s/trial, best loss: -0.8364062309265137] 47%|████▋     | 166/350 [120:13:58<106:21:54, 2081.06s/trial, best loss: -0.8364062309265137] 48%|████▊     | 167/350 [120:47:52<105:03:47, 2066.82s/trial, best loss: -0.8364062309265137] 48%|████▊     | 168/350 [122:13:17<150:52:21, 2984.29s/trial, best loss: -0.8364062309265137] 48%|████▊     | 169/350 [123:27:29<172:11:21, 3424.76s/trial, best loss: -0.8364062309265137] 49%|████▊     | 170/350 [123:47:39<138:01:11, 2760.40s/trial, best loss: -0.8364062309265137] 49%|████▉     | 171/350 [124:23:18<127:58:52, 2573.92s/trial, best loss: -0.8364062309265137] 49%|████▉     | 172/350 [124:43:58<107:28:22, 2173.61s/trial, best loss: -0.8364062309265137] 49%|████▉     | 173/350 [125:55:43<138:18:12, 2812.95s/trial, best loss: -0.8364062309265137] 50%|████▉     | 174/350 [126:55:48<149:08:37, 3050.67s/trial, best loss: -0.8364062309265137] 50%|█████     | 175/350 [127:30:22<134:02:58, 2757.59s/trial, best loss: -0.8364062309265137] 50%|█████     | 176/350 [127:48:10<108:47:39, 2250.92s/trial, best loss: -0.8364062309265137] 51%|█████     | 177/350 [129:20:05<155:12:45, 3229.86s/trial, best loss: -0.8364062309265137] 51%|█████     | 178/350 [129:45:10<129:35:46, 2712.48s/trial, best loss: -0.8364062309265137] 51%|█████     | 179/350 [130:06:34<108:29:31, 2284.05s/trial, best loss: -0.8364062309265137] 51%|█████▏    | 180/350 [130:43:41<107:03:16, 2267.04s/trial, best loss: -0.8364062309265137] 52%|█████▏    | 181/350 [131:26:51<110:57:54, 2363.75s/trial, best loss: -0.8364062309265137] 52%|█████▏    | 182/350 [132:17:07<119:26:28, 2559.45s/trial, best loss: -0.8364062309265137] 52%|█████▏    | 183/350 [132:33:42<96:57:17, 2090.04s/trial, best loss: -0.8364062309265137]  53%|█████▎    | 184/350 [134:02:43<141:21:04, 3065.45s/trial, best loss: -0.8364062309265137] 53%|█████▎    | 185/350 [134:15:40<109:01:58, 2378.90s/trial, best loss: -0.8364062309265137] 53%|█████▎    | 186/350 [135:33:53<139:59:57, 3073.16s/trial, best loss: -0.8364062309265137] 53%|█████▎    | 187/350 [136:19:39<134:42:11, 2975.04s/trial, best loss: -0.8364062309265137] 54%|█████▎    | 188/350 [136:27:53<100:23:03, 2230.76s/trial, best loss: -0.8364062309265137] 54%|█████▍    | 189/350 [136:46:03<84:27:20, 1888.45s/trial, best loss: -0.8364062309265137]  54%|█████▍    | 190/350 [137:44:19<105:22:12, 2370.83s/trial, best loss: -0.8364062309265137] 55%|█████▍    | 191/350 [138:38:40<116:29:49, 2637.67s/trial, best loss: -0.8364062309265137] 55%|█████▍    | 192/350 [138:39:24<81:36:48, 1859.55s/trial, best loss: -0.8364062309265137]  55%|█████▌    | 193/350 [140:11:28<129:02:41, 2958.99s/trial, best loss: -0.8364062309265137] 55%|█████▌    | 194/350 [140:20:28<96:46:46, 2233.38s/trial, best loss: -0.8364062309265137]  56%|█████▌    | 195/350 [141:09:05<104:59:09, 2438.39s/trial, best loss: -0.8364062309265137] 56%|█████▌    | 196/350 [142:38:03<141:31:15, 3308.28s/trial, best loss: -0.8364062309265137] 56%|█████▋    | 197/350 [143:06:28<120:09:38, 2827.31s/trial, best loss: -0.8364062309265137] 57%|█████▋    | 198/350 [143:07:41<84:29:27, 2001.10s/trial, best loss: -0.8364062309265137]  57%|█████▋    | 199/350 [143:28:25<74:23:59, 1773.77s/trial, best loss: -0.8364062309265137] 57%|█████▋    | 200/350 [145:18:19<134:09:57, 3219.98s/trial, best loss: -0.8364062309265137] 57%|█████▋    | 201/350 [146:29:09<146:03:11, 3528.80s/trial, best loss: -0.8364062309265137] 58%|█████▊    | 202/350 [146:33:11<104:32:18, 2542.83s/trial, best loss: -0.8364062309265137] 58%|█████▊    | 203/350 [147:10:07<99:50:06, 2444.94s/trial, best loss: -0.8364062309265137]  58%|█████▊    | 204/350 [147:10:38<69:47:01, 1720.70s/trial, best loss: -0.8364062309265137] 59%|█████▊    | 205/350 [149:10:33<135:27:09, 3362.96s/trial, best loss: -0.8364062309265137] 59%|█████▉    | 206/350 [149:26:17<105:29:23, 2637.25s/trial, best loss: -0.8364062309265137] 59%|█████▉    | 207/350 [149:38:23<81:59:01, 2063.93s/trial, best loss: -0.8364062309265137]  59%|█████▉    | 208/350 [151:26:04<133:26:39, 3383.09s/trial, best loss: -0.8364062309265137] 60%|█████▉    | 209/350 [151:48:59<108:54:34, 2780.67s/trial, best loss: -0.8364062309265137] 60%|██████    | 210/350 [152:03:19<85:43:39, 2204.42s/trial, best loss: -0.8364062309265137]  60%|██████    | 211/350 [152:09:05<63:35:00, 1646.77s/trial, best loss: -0.8364062309265137] 61%|██████    | 212/350 [153:32:18<101:36:36, 2650.70s/trial, best loss: -0.8364062309265137] 61%|██████    | 213/350 [154:01:43<90:45:50, 2385.04s/trial, best loss: -0.8364062309265137]  61%|██████    | 214/350 [154:26:06<79:39:06, 2108.43s/trial, best loss: -0.8364062309265137] 61%|██████▏   | 215/350 [156:12:31<127:10:18, 3391.25s/trial, best loss: -0.8364062309265137] 62%|██████▏   | 216/350 [156:21:09<94:09:01, 2529.42s/trial, best loss: -0.8364062309265137]  62%|██████▏   | 217/350 [156:32:43<73:06:18, 1978.79s/trial, best loss: -0.8364062309265137] 62%|██████▏   | 218/350 [156:35:25<52:33:59, 1433.63s/trial, best loss: -0.8364062309265137] 63%|██████▎   | 219/350 [158:29:45<111:24:34, 3061.64s/trial, best loss: -0.8364062309265137] 63%|██████▎   | 220/350 [158:32:20<79:04:26, 2189.74s/trial, best loss: -0.8364062309265137]  63%|██████▎   | 221/350 [159:31:44<93:14:08, 2601.92s/trial, best loss: -0.8364062309265137] 63%|██████▎   | 222/350 [160:13:17<91:20:56, 2569.19s/trial, best loss: -0.8364062309265137] 64%|██████▎   | 223/350 [161:12:22<100:57:37, 2861.87s/trial, best loss: -0.8364062309265137] 64%|██████▍   | 224/350 [162:14:59<109:34:09, 3130.55s/trial, best loss: -0.8364062309265137] 64%|██████▍   | 225/350 [162:20:08<79:18:14, 2283.96s/trial, best loss: -0.8364062309265137]  65%|██████▍   | 226/350 [162:57:05<77:58:37, 2263.85s/trial, best loss: -0.8364062309265137] 65%|██████▍   | 227/350 [163:33:29<76:32:08, 2240.07s/trial, best loss: -0.8364062309265137] 65%|██████▌   | 228/350 [164:24:25<84:12:34, 2484.87s/trial, best loss: -0.8364062309265137] 65%|██████▌   | 229/350 [165:28:41<97:20:34, 2896.15s/trial, best loss: -0.8364062309265137] 66%|██████▌   | 230/350 [165:41:24<75:12:35, 2256.29s/trial, best loss: -0.8364062309265137] 66%|██████▌   | 231/350 [165:50:06<57:22:54, 1735.92s/trial, best loss: -0.8364062309265137] 66%|██████▋   | 232/350 [167:33:00<100:32:32, 3067.39s/trial, best loss: -0.8364062309265137] 67%|██████▋   | 233/350 [168:20:46<97:43:46, 3007.07s/trial, best loss: -0.8364062309265137]  67%|██████▋   | 234/350 [168:37:06<77:17:50, 2398.89s/trial, best loss: -0.8364062309265137] 67%|██████▋   | 235/350 [168:43:47<57:29:09, 1799.56s/trial, best loss: -0.8364062309265137] 67%|██████▋   | 236/350 [170:31:56<101:31:58, 3206.30s/trial, best loss: -0.8364062309265137] 68%|██████▊   | 237/350 [170:42:00<76:08:24, 2425.70s/trial, best loss: -0.8364062309265137]  68%|██████▊   | 238/350 [170:45:00<54:30:14, 1751.91s/trial, best loss: -0.8364062309265137] 68%|██████▊   | 239/350 [172:29:12<95:38:21, 3101.82s/trial, best loss: -0.8364062309265137] 69%|██████▊   | 240/350 [172:35:00<69:32:12, 2275.75s/trial, best loss: -0.8364062309265137] 69%|██████▉   | 241/350 [173:10:44<67:42:15, 2236.11s/trial, best loss: -0.8364062309265137] 69%|██████▉   | 242/350 [174:54:28<102:58:31, 3432.52s/trial, best loss: -0.8364062309265137] 69%|██████▉   | 243/350 [174:58:12<73:24:58, 2470.08s/trial, best loss: -0.8364062309265137]  70%|██████▉   | 244/350 [175:18:23<61:36:28, 2092.34s/trial, best loss: -0.8364062309265137] 70%|███████   | 245/350 [175:44:19<56:20:09, 1931.52s/trial, best loss: -0.8364062309265137] 70%|███████   | 246/350 [177:04:41<80:50:32, 2798.39s/trial, best loss: -0.8364062309265137] 71%|███████   | 247/350 [177:18:41<63:15:36, 2211.04s/trial, best loss: -0.8364062309265137] 71%|███████   | 248/350 [177:35:36<52:28:34, 1852.10s/trial, best loss: -0.8364062309265137] 71%|███████   | 249/350 [177:39:36<38:23:48, 1368.60s/trial, best loss: -0.8364062309265137] 71%|███████▏  | 250/350 [179:11:41<72:38:58, 2615.38s/trial, best loss: -0.8364062309265137] 72%|███████▏  | 251/350 [180:50:47<99:24:01, 3614.56s/trial, best loss: -0.8364062309265137] 72%|███████▏  | 252/350 [181:11:06<78:50:18, 2896.10s/trial, best loss: -0.8364062309265137] 72%|███████▏  | 253/350 [182:20:21<88:12:32, 3273.74s/trial, best loss: -0.8364062309265137] 73%|███████▎  | 254/350 [184:02:24<110:05:33, 4128.48s/trial, best loss: -0.8364062309265137] 73%|███████▎  | 255/350 [184:28:38<88:43:03, 3361.93s/trial, best loss: -0.8364062309265137]  73%|███████▎  | 256/350 [185:29:24<90:00:53, 3447.37s/trial, best loss: -0.8364062309265137] 73%|███████▎  | 257/350 [187:14:06<111:01:31, 4297.76s/trial, best loss: -0.8364062309265137] 74%|███████▎  | 258/350 [187:46:40<91:51:31, 3594.48s/trial, best loss: -0.8364062309265137]  74%|███████▍  | 259/350 [188:38:44<87:17:40, 3453.41s/trial, best loss: -0.8364062309265137] 74%|███████▍  | 260/350 [190:26:34<108:57:47, 4358.53s/trial, best loss: -0.8364062309265137] 75%|███████▍  | 261/350 [191:34:58<105:51:49, 4282.12s/trial, best loss: -0.8364062309265137] 75%|███████▍  | 262/350 [192:01:27<84:55:12, 3474.01s/trial, best loss: -0.8364062309265137]  75%|███████▌  | 263/350 [193:38:29<100:58:56, 4178.58s/trial, best loss: -0.8364062309265137][1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m ^C
[1;34m[exet4487@(NEW) glamdring:[0;37mlogs[1;34m]$[0m a[Ke[Kkillall screen
